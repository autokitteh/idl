// source: values/values.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var validate_validate_pb = require('../validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.autokitteh.values.Boolean', null, global);
goog.exportSymbol('proto.autokitteh.values.Bytes', null, global);
goog.exportSymbol('proto.autokitteh.values.Call', null, global);
goog.exportSymbol('proto.autokitteh.values.Dict', null, global);
goog.exportSymbol('proto.autokitteh.values.DictItem', null, global);
goog.exportSymbol('proto.autokitteh.values.Duration', null, global);
goog.exportSymbol('proto.autokitteh.values.Float', null, global);
goog.exportSymbol('proto.autokitteh.values.Function', null, global);
goog.exportSymbol('proto.autokitteh.values.FunctionSignature', null, global);
goog.exportSymbol('proto.autokitteh.values.Integer', null, global);
goog.exportSymbol('proto.autokitteh.values.List', null, global);
goog.exportSymbol('proto.autokitteh.values.Module', null, global);
goog.exportSymbol('proto.autokitteh.values.None', null, global);
goog.exportSymbol('proto.autokitteh.values.Set', null, global);
goog.exportSymbol('proto.autokitteh.values.String', null, global);
goog.exportSymbol('proto.autokitteh.values.Struct', null, global);
goog.exportSymbol('proto.autokitteh.values.Symbol', null, global);
goog.exportSymbol('proto.autokitteh.values.Time', null, global);
goog.exportSymbol('proto.autokitteh.values.Value', null, global);
goog.exportSymbol('proto.autokitteh.values.Value.TypeCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.None = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.None, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.None.displayName = 'proto.autokitteh.values.None';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.String = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.String, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.String.displayName = 'proto.autokitteh.values.String';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Integer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Integer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Integer.displayName = 'proto.autokitteh.values.Integer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Float = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Float, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Float.displayName = 'proto.autokitteh.values.Float';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Boolean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Boolean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Boolean.displayName = 'proto.autokitteh.values.Boolean';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.values.List.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.values.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.List.displayName = 'proto.autokitteh.values.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Set = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.values.Set.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.values.Set, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Set.displayName = 'proto.autokitteh.values.Set';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.DictItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.DictItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.DictItem.displayName = 'proto.autokitteh.values.DictItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Dict = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.values.Dict.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.values.Dict, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Dict.displayName = 'proto.autokitteh.values.Dict';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Bytes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Bytes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Bytes.displayName = 'proto.autokitteh.values.Bytes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Time = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Time.displayName = 'proto.autokitteh.values.Time';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Duration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Duration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Duration.displayName = 'proto.autokitteh.values.Duration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Call = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Call, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Call.displayName = 'proto.autokitteh.values.Call';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Struct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Struct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Struct.displayName = 'proto.autokitteh.values.Struct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Module = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Module, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Module.displayName = 'proto.autokitteh.values.Module';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Symbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Symbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Symbol.displayName = 'proto.autokitteh.values.Symbol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.FunctionSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.values.FunctionSignature.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.values.FunctionSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.FunctionSignature.displayName = 'proto.autokitteh.values.FunctionSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Function = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.values.Function, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Function.displayName = 'proto.autokitteh.values.Function';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.values.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.autokitteh.values.Value.oneofGroups_);
};
goog.inherits(proto.autokitteh.values.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.values.Value.displayName = 'proto.autokitteh.values.Value';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.None.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.None.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.None} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.None.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.None}
 */
proto.autokitteh.values.None.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.None;
  return proto.autokitteh.values.None.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.None} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.None}
 */
proto.autokitteh.values.None.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.None.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.None.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.None} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.None.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.String.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.String.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.String} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.String.toObject = function(includeInstance, msg) {
  var f, obj = {
    v: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.String}
 */
proto.autokitteh.values.String.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.String;
  return proto.autokitteh.values.String.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.String} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.String}
 */
proto.autokitteh.values.String.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.String.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.String.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.String} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.String.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string v = 1;
 * @return {string}
 */
proto.autokitteh.values.String.prototype.getV = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.String} returns this
 */
proto.autokitteh.values.String.prototype.setV = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Integer.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Integer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Integer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Integer.toObject = function(includeInstance, msg) {
  var f, obj = {
    v: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Integer}
 */
proto.autokitteh.values.Integer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Integer;
  return proto.autokitteh.values.Integer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Integer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Integer}
 */
proto.autokitteh.values.Integer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Integer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Integer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Integer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Integer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 v = 1;
 * @return {number}
 */
proto.autokitteh.values.Integer.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.autokitteh.values.Integer} returns this
 */
proto.autokitteh.values.Integer.prototype.setV = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Float.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Float.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Float} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Float.toObject = function(includeInstance, msg) {
  var f, obj = {
    v: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Float}
 */
proto.autokitteh.values.Float.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Float;
  return proto.autokitteh.values.Float.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Float} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Float}
 */
proto.autokitteh.values.Float.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Float.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Float.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Float} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Float.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float v = 1;
 * @return {number}
 */
proto.autokitteh.values.Float.prototype.getV = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.autokitteh.values.Float} returns this
 */
proto.autokitteh.values.Float.prototype.setV = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Boolean.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Boolean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Boolean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Boolean.toObject = function(includeInstance, msg) {
  var f, obj = {
    v: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Boolean}
 */
proto.autokitteh.values.Boolean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Boolean;
  return proto.autokitteh.values.Boolean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Boolean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Boolean}
 */
proto.autokitteh.values.Boolean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Boolean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Boolean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Boolean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Boolean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool v = 1;
 * @return {boolean}
 */
proto.autokitteh.values.Boolean.prototype.getV = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.autokitteh.values.Boolean} returns this
 */
proto.autokitteh.values.Boolean.prototype.setV = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.values.List.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.List.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.List.toObject = function(includeInstance, msg) {
  var f, obj = {
    vsList: jspb.Message.toObjectList(msg.getVsList(),
    proto.autokitteh.values.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.List}
 */
proto.autokitteh.values.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.List;
  return proto.autokitteh.values.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.List}
 */
proto.autokitteh.values.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autokitteh.values.Value;
      reader.readMessage(value,proto.autokitteh.values.Value.deserializeBinaryFromReader);
      msg.addVs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.autokitteh.values.Value.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Value vs = 1;
 * @return {!Array<!proto.autokitteh.values.Value>}
 */
proto.autokitteh.values.List.prototype.getVsList = function() {
  return /** @type{!Array<!proto.autokitteh.values.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.autokitteh.values.Value, 1));
};


/**
 * @param {!Array<!proto.autokitteh.values.Value>} value
 * @return {!proto.autokitteh.values.List} returns this
*/
proto.autokitteh.values.List.prototype.setVsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.autokitteh.values.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.values.Value}
 */
proto.autokitteh.values.List.prototype.addVs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.autokitteh.values.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.values.List} returns this
 */
proto.autokitteh.values.List.prototype.clearVsList = function() {
  return this.setVsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.values.Set.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Set.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Set.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Set} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Set.toObject = function(includeInstance, msg) {
  var f, obj = {
    vsList: jspb.Message.toObjectList(msg.getVsList(),
    proto.autokitteh.values.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Set}
 */
proto.autokitteh.values.Set.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Set;
  return proto.autokitteh.values.Set.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Set} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Set}
 */
proto.autokitteh.values.Set.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autokitteh.values.Value;
      reader.readMessage(value,proto.autokitteh.values.Value.deserializeBinaryFromReader);
      msg.addVs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Set.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Set.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Set} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Set.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.autokitteh.values.Value.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Value vs = 1;
 * @return {!Array<!proto.autokitteh.values.Value>}
 */
proto.autokitteh.values.Set.prototype.getVsList = function() {
  return /** @type{!Array<!proto.autokitteh.values.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.autokitteh.values.Value, 1));
};


/**
 * @param {!Array<!proto.autokitteh.values.Value>} value
 * @return {!proto.autokitteh.values.Set} returns this
*/
proto.autokitteh.values.Set.prototype.setVsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.autokitteh.values.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.values.Value}
 */
proto.autokitteh.values.Set.prototype.addVs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.autokitteh.values.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.values.Set} returns this
 */
proto.autokitteh.values.Set.prototype.clearVsList = function() {
  return this.setVsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.DictItem.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.DictItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.DictItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.DictItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    k: (f = msg.getK()) && proto.autokitteh.values.Value.toObject(includeInstance, f),
    v: (f = msg.getV()) && proto.autokitteh.values.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.DictItem}
 */
proto.autokitteh.values.DictItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.DictItem;
  return proto.autokitteh.values.DictItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.DictItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.DictItem}
 */
proto.autokitteh.values.DictItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autokitteh.values.Value;
      reader.readMessage(value,proto.autokitteh.values.Value.deserializeBinaryFromReader);
      msg.setK(value);
      break;
    case 2:
      var value = new proto.autokitteh.values.Value;
      reader.readMessage(value,proto.autokitteh.values.Value.deserializeBinaryFromReader);
      msg.setV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.DictItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.DictItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.DictItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.DictItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getK();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.autokitteh.values.Value.serializeBinaryToWriter
    );
  }
  f = message.getV();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.autokitteh.values.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value k = 1;
 * @return {?proto.autokitteh.values.Value}
 */
proto.autokitteh.values.DictItem.prototype.getK = function() {
  return /** @type{?proto.autokitteh.values.Value} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Value, 1));
};


/**
 * @param {?proto.autokitteh.values.Value|undefined} value
 * @return {!proto.autokitteh.values.DictItem} returns this
*/
proto.autokitteh.values.DictItem.prototype.setK = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.DictItem} returns this
 */
proto.autokitteh.values.DictItem.prototype.clearK = function() {
  return this.setK(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.DictItem.prototype.hasK = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value v = 2;
 * @return {?proto.autokitteh.values.Value}
 */
proto.autokitteh.values.DictItem.prototype.getV = function() {
  return /** @type{?proto.autokitteh.values.Value} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Value, 2));
};


/**
 * @param {?proto.autokitteh.values.Value|undefined} value
 * @return {!proto.autokitteh.values.DictItem} returns this
*/
proto.autokitteh.values.DictItem.prototype.setV = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.DictItem} returns this
 */
proto.autokitteh.values.DictItem.prototype.clearV = function() {
  return this.setV(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.DictItem.prototype.hasV = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.values.Dict.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Dict.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Dict.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Dict} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Dict.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.autokitteh.values.DictItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Dict}
 */
proto.autokitteh.values.Dict.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Dict;
  return proto.autokitteh.values.Dict.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Dict} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Dict}
 */
proto.autokitteh.values.Dict.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autokitteh.values.DictItem;
      reader.readMessage(value,proto.autokitteh.values.DictItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Dict.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Dict.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Dict} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Dict.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.autokitteh.values.DictItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DictItem items = 1;
 * @return {!Array<!proto.autokitteh.values.DictItem>}
 */
proto.autokitteh.values.Dict.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.autokitteh.values.DictItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.autokitteh.values.DictItem, 1));
};


/**
 * @param {!Array<!proto.autokitteh.values.DictItem>} value
 * @return {!proto.autokitteh.values.Dict} returns this
*/
proto.autokitteh.values.Dict.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.autokitteh.values.DictItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.values.DictItem}
 */
proto.autokitteh.values.Dict.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.autokitteh.values.DictItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.values.Dict} returns this
 */
proto.autokitteh.values.Dict.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Bytes.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Bytes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Bytes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Bytes.toObject = function(includeInstance, msg) {
  var f, obj = {
    v: msg.getV_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Bytes}
 */
proto.autokitteh.values.Bytes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Bytes;
  return proto.autokitteh.values.Bytes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Bytes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Bytes}
 */
proto.autokitteh.values.Bytes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Bytes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Bytes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Bytes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Bytes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes v = 1;
 * @return {string}
 */
proto.autokitteh.values.Bytes.prototype.getV = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes v = 1;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.autokitteh.values.Bytes.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Bytes.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.autokitteh.values.Bytes} returns this
 */
proto.autokitteh.values.Bytes.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Time.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Time.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Time} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Time.toObject = function(includeInstance, msg) {
  var f, obj = {
    t: (f = msg.getT()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Time}
 */
proto.autokitteh.values.Time.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Time;
  return proto.autokitteh.values.Time.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Time}
 */
proto.autokitteh.values.Time.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setT(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Time.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Time.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Time.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getT();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp t = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.autokitteh.values.Time.prototype.getT = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.autokitteh.values.Time} returns this
*/
proto.autokitteh.values.Time.prototype.setT = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Time} returns this
 */
proto.autokitteh.values.Time.prototype.clearT = function() {
  return this.setT(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Time.prototype.hasT = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Duration.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Duration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Duration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Duration.toObject = function(includeInstance, msg) {
  var f, obj = {
    d: (f = msg.getD()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Duration}
 */
proto.autokitteh.values.Duration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Duration;
  return proto.autokitteh.values.Duration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Duration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Duration}
 */
proto.autokitteh.values.Duration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setD(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Duration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Duration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Duration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Duration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getD();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Duration d = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.autokitteh.values.Duration.prototype.getD = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.autokitteh.values.Duration} returns this
*/
proto.autokitteh.values.Duration.prototype.setD = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Duration} returns this
 */
proto.autokitteh.values.Duration.prototype.clearD = function() {
  return this.setD(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Duration.prototype.hasD = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Call.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Call.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Call} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Call.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    issuer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    flagsMap: (f = msg.getFlagsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Call}
 */
proto.autokitteh.values.Call.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Call;
  return proto.autokitteh.values.Call.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Call} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Call}
 */
proto.autokitteh.values.Call.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuer(value);
      break;
    case 4:
      var value = msg.getFlagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Call.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Call.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Call} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Call.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIssuer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFlagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.autokitteh.values.Call.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.Call} returns this
 */
proto.autokitteh.values.Call.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.autokitteh.values.Call.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.Call} returns this
 */
proto.autokitteh.values.Call.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string issuer = 3;
 * @return {string}
 */
proto.autokitteh.values.Call.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.Call} returns this
 */
proto.autokitteh.values.Call.prototype.setIssuer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, bool> flags = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.autokitteh.values.Call.prototype.getFlagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.autokitteh.values.Call} returns this
 */
proto.autokitteh.values.Call.prototype.clearFlagsMap = function() {
  this.getFlagsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Struct.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Struct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Struct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Struct.toObject = function(includeInstance, msg) {
  var f, obj = {
    ctor: (f = msg.getCtor()) && proto.autokitteh.values.Value.toObject(includeInstance, f),
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, proto.autokitteh.values.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Struct}
 */
proto.autokitteh.values.Struct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Struct;
  return proto.autokitteh.values.Struct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Struct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Struct}
 */
proto.autokitteh.values.Struct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autokitteh.values.Value;
      reader.readMessage(value,proto.autokitteh.values.Value.deserializeBinaryFromReader);
      msg.setCtor(value);
      break;
    case 2:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.autokitteh.values.Value.deserializeBinaryFromReader, "", new proto.autokitteh.values.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Struct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Struct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Struct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Struct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCtor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.autokitteh.values.Value.serializeBinaryToWriter
    );
  }
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.autokitteh.values.Value.serializeBinaryToWriter);
  }
};


/**
 * optional Value ctor = 1;
 * @return {?proto.autokitteh.values.Value}
 */
proto.autokitteh.values.Struct.prototype.getCtor = function() {
  return /** @type{?proto.autokitteh.values.Value} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Value, 1));
};


/**
 * @param {?proto.autokitteh.values.Value|undefined} value
 * @return {!proto.autokitteh.values.Struct} returns this
*/
proto.autokitteh.values.Struct.prototype.setCtor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Struct} returns this
 */
proto.autokitteh.values.Struct.prototype.clearCtor = function() {
  return this.setCtor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Struct.prototype.hasCtor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, Value> fields = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.autokitteh.values.Value>}
 */
proto.autokitteh.values.Struct.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.autokitteh.values.Value>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.autokitteh.values.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.autokitteh.values.Struct} returns this
 */
proto.autokitteh.values.Struct.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Module.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Module.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Module} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Module.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    membersMap: (f = msg.getMembersMap()) ? f.toObject(includeInstance, proto.autokitteh.values.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Module}
 */
proto.autokitteh.values.Module.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Module;
  return proto.autokitteh.values.Module.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Module} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Module}
 */
proto.autokitteh.values.Module.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getMembersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.autokitteh.values.Value.deserializeBinaryFromReader, "", new proto.autokitteh.values.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Module.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Module.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Module} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Module.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMembersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.autokitteh.values.Value.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.autokitteh.values.Module.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.Module} returns this
 */
proto.autokitteh.values.Module.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, Value> members = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.autokitteh.values.Value>}
 */
proto.autokitteh.values.Module.prototype.getMembersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.autokitteh.values.Value>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.autokitteh.values.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.autokitteh.values.Module} returns this
 */
proto.autokitteh.values.Module.prototype.clearMembersMap = function() {
  this.getMembersMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Symbol.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Symbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Symbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Symbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Symbol}
 */
proto.autokitteh.values.Symbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Symbol;
  return proto.autokitteh.values.Symbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Symbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Symbol}
 */
proto.autokitteh.values.Symbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Symbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Symbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Symbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Symbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.autokitteh.values.Symbol.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.Symbol} returns this
 */
proto.autokitteh.values.Symbol.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.values.FunctionSignature.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.FunctionSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.FunctionSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.FunctionSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.FunctionSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    doc: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nArgs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nKwonlyargs: jspb.Message.getFieldWithDefault(msg, 4, 0),
    argsNamesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    hasVarargs: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    hasKwargs: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.FunctionSignature}
 */
proto.autokitteh.values.FunctionSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.FunctionSignature;
  return proto.autokitteh.values.FunctionSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.FunctionSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.FunctionSignature}
 */
proto.autokitteh.values.FunctionSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoc(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNArgs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNKwonlyargs(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgsNames(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasVarargs(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasKwargs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.FunctionSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.FunctionSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.FunctionSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.FunctionSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDoc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNArgs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getNKwonlyargs();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getArgsNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getHasVarargs();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getHasKwargs();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.autokitteh.values.FunctionSignature.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.FunctionSignature} returns this
 */
proto.autokitteh.values.FunctionSignature.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string doc = 2;
 * @return {string}
 */
proto.autokitteh.values.FunctionSignature.prototype.getDoc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.FunctionSignature} returns this
 */
proto.autokitteh.values.FunctionSignature.prototype.setDoc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 n_args = 3;
 * @return {number}
 */
proto.autokitteh.values.FunctionSignature.prototype.getNArgs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.autokitteh.values.FunctionSignature} returns this
 */
proto.autokitteh.values.FunctionSignature.prototype.setNArgs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 n_kwonlyargs = 4;
 * @return {number}
 */
proto.autokitteh.values.FunctionSignature.prototype.getNKwonlyargs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.autokitteh.values.FunctionSignature} returns this
 */
proto.autokitteh.values.FunctionSignature.prototype.setNKwonlyargs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated string args_names = 5;
 * @return {!Array<string>}
 */
proto.autokitteh.values.FunctionSignature.prototype.getArgsNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autokitteh.values.FunctionSignature} returns this
 */
proto.autokitteh.values.FunctionSignature.prototype.setArgsNamesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.values.FunctionSignature} returns this
 */
proto.autokitteh.values.FunctionSignature.prototype.addArgsNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.values.FunctionSignature} returns this
 */
proto.autokitteh.values.FunctionSignature.prototype.clearArgsNamesList = function() {
  return this.setArgsNamesList([]);
};


/**
 * optional bool has_varargs = 6;
 * @return {boolean}
 */
proto.autokitteh.values.FunctionSignature.prototype.getHasVarargs = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.autokitteh.values.FunctionSignature} returns this
 */
proto.autokitteh.values.FunctionSignature.prototype.setHasVarargs = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool has_kwargs = 7;
 * @return {boolean}
 */
proto.autokitteh.values.FunctionSignature.prototype.getHasKwargs = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.autokitteh.values.FunctionSignature} returns this
 */
proto.autokitteh.values.FunctionSignature.prototype.setHasKwargs = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Function.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Function.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Function} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Function.toObject = function(includeInstance, msg) {
  var f, obj = {
    funcId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lang: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sig: (f = msg.getSig()) && proto.autokitteh.values.FunctionSignature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Function}
 */
proto.autokitteh.values.Function.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Function;
  return proto.autokitteh.values.Function.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Function} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Function}
 */
proto.autokitteh.values.Function.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuncId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 4:
      var value = new proto.autokitteh.values.FunctionSignature;
      reader.readMessage(value,proto.autokitteh.values.FunctionSignature.deserializeBinaryFromReader);
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Function.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Function.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Function} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Function.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFuncId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLang();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.autokitteh.values.FunctionSignature.serializeBinaryToWriter
    );
  }
};


/**
 * optional string func_id = 1;
 * @return {string}
 */
proto.autokitteh.values.Function.prototype.getFuncId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.Function} returns this
 */
proto.autokitteh.values.Function.prototype.setFuncId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string lang = 2;
 * @return {string}
 */
proto.autokitteh.values.Function.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.Function} returns this
 */
proto.autokitteh.values.Function.prototype.setLang = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string scope = 3;
 * @return {string}
 */
proto.autokitteh.values.Function.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.values.Function} returns this
 */
proto.autokitteh.values.Function.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional FunctionSignature sig = 4;
 * @return {?proto.autokitteh.values.FunctionSignature}
 */
proto.autokitteh.values.Function.prototype.getSig = function() {
  return /** @type{?proto.autokitteh.values.FunctionSignature} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.FunctionSignature, 4));
};


/**
 * @param {?proto.autokitteh.values.FunctionSignature|undefined} value
 * @return {!proto.autokitteh.values.Function} returns this
*/
proto.autokitteh.values.Function.prototype.setSig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Function} returns this
 */
proto.autokitteh.values.Function.prototype.clearSig = function() {
  return this.setSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Function.prototype.hasSig = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.autokitteh.values.Value.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,50,51,52,100]];

/**
 * @enum {number}
 */
proto.autokitteh.values.Value.TypeCase = {
  TYPE_NOT_SET: 0,
  NONE: 1,
  STRING: 2,
  INTEGER: 3,
  BOOLEAN: 4,
  LIST: 5,
  DICT: 6,
  FLOAT: 7,
  SET: 8,
  BYTES: 9,
  TIME: 10,
  DURATION: 11,
  SYMBOL: 12,
  STRUCT: 50,
  MODULE: 51,
  FUNCTION: 52,
  CALL: 100
};

/**
 * @return {proto.autokitteh.values.Value.TypeCase}
 */
proto.autokitteh.values.Value.prototype.getTypeCase = function() {
  return /** @type {proto.autokitteh.values.Value.TypeCase} */(jspb.Message.computeOneofCase(this, proto.autokitteh.values.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.values.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.values.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.values.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    none: (f = msg.getNone()) && proto.autokitteh.values.None.toObject(includeInstance, f),
    string: (f = msg.getString()) && proto.autokitteh.values.String.toObject(includeInstance, f),
    integer: (f = msg.getInteger()) && proto.autokitteh.values.Integer.toObject(includeInstance, f),
    pb_boolean: (f = msg.getBoolean()) && proto.autokitteh.values.Boolean.toObject(includeInstance, f),
    list: (f = msg.getList()) && proto.autokitteh.values.List.toObject(includeInstance, f),
    dict: (f = msg.getDict()) && proto.autokitteh.values.Dict.toObject(includeInstance, f),
    pb_float: (f = msg.getFloat()) && proto.autokitteh.values.Float.toObject(includeInstance, f),
    set: (f = msg.getSet()) && proto.autokitteh.values.Set.toObject(includeInstance, f),
    bytes: (f = msg.getBytes()) && proto.autokitteh.values.Bytes.toObject(includeInstance, f),
    time: (f = msg.getTime()) && proto.autokitteh.values.Time.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && proto.autokitteh.values.Duration.toObject(includeInstance, f),
    symbol: (f = msg.getSymbol()) && proto.autokitteh.values.Symbol.toObject(includeInstance, f),
    struct: (f = msg.getStruct()) && proto.autokitteh.values.Struct.toObject(includeInstance, f),
    module: (f = msg.getModule()) && proto.autokitteh.values.Module.toObject(includeInstance, f),
    pb_function: (f = msg.getFunction()) && proto.autokitteh.values.Function.toObject(includeInstance, f),
    call: (f = msg.getCall()) && proto.autokitteh.values.Call.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.values.Value}
 */
proto.autokitteh.values.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.values.Value;
  return proto.autokitteh.values.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.values.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.values.Value}
 */
proto.autokitteh.values.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autokitteh.values.None;
      reader.readMessage(value,proto.autokitteh.values.None.deserializeBinaryFromReader);
      msg.setNone(value);
      break;
    case 2:
      var value = new proto.autokitteh.values.String;
      reader.readMessage(value,proto.autokitteh.values.String.deserializeBinaryFromReader);
      msg.setString(value);
      break;
    case 3:
      var value = new proto.autokitteh.values.Integer;
      reader.readMessage(value,proto.autokitteh.values.Integer.deserializeBinaryFromReader);
      msg.setInteger(value);
      break;
    case 4:
      var value = new proto.autokitteh.values.Boolean;
      reader.readMessage(value,proto.autokitteh.values.Boolean.deserializeBinaryFromReader);
      msg.setBoolean(value);
      break;
    case 5:
      var value = new proto.autokitteh.values.List;
      reader.readMessage(value,proto.autokitteh.values.List.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    case 6:
      var value = new proto.autokitteh.values.Dict;
      reader.readMessage(value,proto.autokitteh.values.Dict.deserializeBinaryFromReader);
      msg.setDict(value);
      break;
    case 7:
      var value = new proto.autokitteh.values.Float;
      reader.readMessage(value,proto.autokitteh.values.Float.deserializeBinaryFromReader);
      msg.setFloat(value);
      break;
    case 8:
      var value = new proto.autokitteh.values.Set;
      reader.readMessage(value,proto.autokitteh.values.Set.deserializeBinaryFromReader);
      msg.setSet(value);
      break;
    case 9:
      var value = new proto.autokitteh.values.Bytes;
      reader.readMessage(value,proto.autokitteh.values.Bytes.deserializeBinaryFromReader);
      msg.setBytes(value);
      break;
    case 10:
      var value = new proto.autokitteh.values.Time;
      reader.readMessage(value,proto.autokitteh.values.Time.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 11:
      var value = new proto.autokitteh.values.Duration;
      reader.readMessage(value,proto.autokitteh.values.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    case 12:
      var value = new proto.autokitteh.values.Symbol;
      reader.readMessage(value,proto.autokitteh.values.Symbol.deserializeBinaryFromReader);
      msg.setSymbol(value);
      break;
    case 50:
      var value = new proto.autokitteh.values.Struct;
      reader.readMessage(value,proto.autokitteh.values.Struct.deserializeBinaryFromReader);
      msg.setStruct(value);
      break;
    case 51:
      var value = new proto.autokitteh.values.Module;
      reader.readMessage(value,proto.autokitteh.values.Module.deserializeBinaryFromReader);
      msg.setModule(value);
      break;
    case 52:
      var value = new proto.autokitteh.values.Function;
      reader.readMessage(value,proto.autokitteh.values.Function.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 100:
      var value = new proto.autokitteh.values.Call;
      reader.readMessage(value,proto.autokitteh.values.Call.deserializeBinaryFromReader);
      msg.setCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.values.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.values.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.values.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.values.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNone();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.autokitteh.values.None.serializeBinaryToWriter
    );
  }
  f = message.getString();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.autokitteh.values.String.serializeBinaryToWriter
    );
  }
  f = message.getInteger();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.autokitteh.values.Integer.serializeBinaryToWriter
    );
  }
  f = message.getBoolean();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.autokitteh.values.Boolean.serializeBinaryToWriter
    );
  }
  f = message.getList();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.autokitteh.values.List.serializeBinaryToWriter
    );
  }
  f = message.getDict();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.autokitteh.values.Dict.serializeBinaryToWriter
    );
  }
  f = message.getFloat();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.autokitteh.values.Float.serializeBinaryToWriter
    );
  }
  f = message.getSet();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.autokitteh.values.Set.serializeBinaryToWriter
    );
  }
  f = message.getBytes();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.autokitteh.values.Bytes.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.autokitteh.values.Time.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.autokitteh.values.Duration.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.autokitteh.values.Symbol.serializeBinaryToWriter
    );
  }
  f = message.getStruct();
  if (f != null) {
    writer.writeMessage(
      50,
      f,
      proto.autokitteh.values.Struct.serializeBinaryToWriter
    );
  }
  f = message.getModule();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.autokitteh.values.Module.serializeBinaryToWriter
    );
  }
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      52,
      f,
      proto.autokitteh.values.Function.serializeBinaryToWriter
    );
  }
  f = message.getCall();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.autokitteh.values.Call.serializeBinaryToWriter
    );
  }
};


/**
 * optional None none = 1;
 * @return {?proto.autokitteh.values.None}
 */
proto.autokitteh.values.Value.prototype.getNone = function() {
  return /** @type{?proto.autokitteh.values.None} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.None, 1));
};


/**
 * @param {?proto.autokitteh.values.None|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setNone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearNone = function() {
  return this.setNone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasNone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional String string = 2;
 * @return {?proto.autokitteh.values.String}
 */
proto.autokitteh.values.Value.prototype.getString = function() {
  return /** @type{?proto.autokitteh.values.String} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.String, 2));
};


/**
 * @param {?proto.autokitteh.values.String|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setString = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearString = function() {
  return this.setString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Integer integer = 3;
 * @return {?proto.autokitteh.values.Integer}
 */
proto.autokitteh.values.Value.prototype.getInteger = function() {
  return /** @type{?proto.autokitteh.values.Integer} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Integer, 3));
};


/**
 * @param {?proto.autokitteh.values.Integer|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setInteger = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearInteger = function() {
  return this.setInteger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasInteger = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Boolean boolean = 4;
 * @return {?proto.autokitteh.values.Boolean}
 */
proto.autokitteh.values.Value.prototype.getBoolean = function() {
  return /** @type{?proto.autokitteh.values.Boolean} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Boolean, 4));
};


/**
 * @param {?proto.autokitteh.values.Boolean|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setBoolean = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearBoolean = function() {
  return this.setBoolean(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional List list = 5;
 * @return {?proto.autokitteh.values.List}
 */
proto.autokitteh.values.Value.prototype.getList = function() {
  return /** @type{?proto.autokitteh.values.List} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.List, 5));
};


/**
 * @param {?proto.autokitteh.values.List|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearList = function() {
  return this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasList = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Dict dict = 6;
 * @return {?proto.autokitteh.values.Dict}
 */
proto.autokitteh.values.Value.prototype.getDict = function() {
  return /** @type{?proto.autokitteh.values.Dict} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Dict, 6));
};


/**
 * @param {?proto.autokitteh.values.Dict|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setDict = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearDict = function() {
  return this.setDict(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasDict = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Float float = 7;
 * @return {?proto.autokitteh.values.Float}
 */
proto.autokitteh.values.Value.prototype.getFloat = function() {
  return /** @type{?proto.autokitteh.values.Float} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Float, 7));
};


/**
 * @param {?proto.autokitteh.values.Float|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setFloat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearFloat = function() {
  return this.setFloat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Set set = 8;
 * @return {?proto.autokitteh.values.Set}
 */
proto.autokitteh.values.Value.prototype.getSet = function() {
  return /** @type{?proto.autokitteh.values.Set} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Set, 8));
};


/**
 * @param {?proto.autokitteh.values.Set|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setSet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearSet = function() {
  return this.setSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasSet = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Bytes bytes = 9;
 * @return {?proto.autokitteh.values.Bytes}
 */
proto.autokitteh.values.Value.prototype.getBytes = function() {
  return /** @type{?proto.autokitteh.values.Bytes} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Bytes, 9));
};


/**
 * @param {?proto.autokitteh.values.Bytes|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setBytes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearBytes = function() {
  return this.setBytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Time time = 10;
 * @return {?proto.autokitteh.values.Time}
 */
proto.autokitteh.values.Value.prototype.getTime = function() {
  return /** @type{?proto.autokitteh.values.Time} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Time, 10));
};


/**
 * @param {?proto.autokitteh.values.Time|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setTime = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasTime = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Duration duration = 11;
 * @return {?proto.autokitteh.values.Duration}
 */
proto.autokitteh.values.Value.prototype.getDuration = function() {
  return /** @type{?proto.autokitteh.values.Duration} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Duration, 11));
};


/**
 * @param {?proto.autokitteh.values.Duration|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setDuration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearDuration = function() {
  return this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Symbol symbol = 12;
 * @return {?proto.autokitteh.values.Symbol}
 */
proto.autokitteh.values.Value.prototype.getSymbol = function() {
  return /** @type{?proto.autokitteh.values.Symbol} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Symbol, 12));
};


/**
 * @param {?proto.autokitteh.values.Symbol|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setSymbol = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearSymbol = function() {
  return this.setSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Struct struct = 50;
 * @return {?proto.autokitteh.values.Struct}
 */
proto.autokitteh.values.Value.prototype.getStruct = function() {
  return /** @type{?proto.autokitteh.values.Struct} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Struct, 50));
};


/**
 * @param {?proto.autokitteh.values.Struct|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setStruct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 50, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearStruct = function() {
  return this.setStruct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasStruct = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional Module module = 51;
 * @return {?proto.autokitteh.values.Module}
 */
proto.autokitteh.values.Value.prototype.getModule = function() {
  return /** @type{?proto.autokitteh.values.Module} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Module, 51));
};


/**
 * @param {?proto.autokitteh.values.Module|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setModule = function(value) {
  return jspb.Message.setOneofWrapperField(this, 51, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearModule = function() {
  return this.setModule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasModule = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * optional Function function = 52;
 * @return {?proto.autokitteh.values.Function}
 */
proto.autokitteh.values.Value.prototype.getFunction = function() {
  return /** @type{?proto.autokitteh.values.Function} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Function, 52));
};


/**
 * @param {?proto.autokitteh.values.Function|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setFunction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 52, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 52) != null;
};


/**
 * optional Call call = 100;
 * @return {?proto.autokitteh.values.Call}
 */
proto.autokitteh.values.Value.prototype.getCall = function() {
  return /** @type{?proto.autokitteh.values.Call} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.values.Call, 100));
};


/**
 * @param {?proto.autokitteh.values.Call|undefined} value
 * @return {!proto.autokitteh.values.Value} returns this
*/
proto.autokitteh.values.Value.prototype.setCall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.autokitteh.values.Value.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.values.Value} returns this
 */
proto.autokitteh.values.Value.prototype.clearCall = function() {
  return this.setCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.values.Value.prototype.hasCall = function() {
  return jspb.Message.getField(this, 100) != null;
};


goog.object.extend(exports, proto.autokitteh.values);
