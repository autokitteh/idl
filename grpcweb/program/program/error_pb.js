// source: program/error.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var program_program_pb = require('../program/program_pb.js');
goog.object.extend(proto, program_program_pb);
goog.exportSymbol('proto.autokitteh.program.CallFrame', null, global);
goog.exportSymbol('proto.autokitteh.program.Error', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.program.CallFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.program.CallFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.program.CallFrame.displayName = 'proto.autokitteh.program.CallFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.program.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.program.Error.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.program.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.program.Error.displayName = 'proto.autokitteh.program.Error';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.program.CallFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.program.CallFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.program.CallFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.program.CallFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    loc: (f = msg.getLoc()) && program_program_pb.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.program.CallFrame}
 */
proto.autokitteh.program.CallFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.program.CallFrame;
  return proto.autokitteh.program.CallFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.program.CallFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.program.CallFrame}
 */
proto.autokitteh.program.CallFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new program_program_pb.Location;
      reader.readMessage(value,program_program_pb.Location.deserializeBinaryFromReader);
      msg.setLoc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.program.CallFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.program.CallFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.program.CallFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.program.CallFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLoc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      program_program_pb.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.autokitteh.program.CallFrame.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.program.CallFrame} returns this
 */
proto.autokitteh.program.CallFrame.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Location loc = 2;
 * @return {?proto.autokitteh.program.Location}
 */
proto.autokitteh.program.CallFrame.prototype.getLoc = function() {
  return /** @type{?proto.autokitteh.program.Location} */ (
    jspb.Message.getWrapperField(this, program_program_pb.Location, 2));
};


/**
 * @param {?proto.autokitteh.program.Location|undefined} value
 * @return {!proto.autokitteh.program.CallFrame} returns this
*/
proto.autokitteh.program.CallFrame.prototype.setLoc = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.program.CallFrame} returns this
 */
proto.autokitteh.program.CallFrame.prototype.clearLoc = function() {
  return this.setLoc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.program.CallFrame.prototype.hasLoc = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.program.Error.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.program.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.program.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.program.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.program.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    callstackList: jspb.Message.toObjectList(msg.getCallstackList(),
    proto.autokitteh.program.CallFrame.toObject, includeInstance),
    next: (f = msg.getNext()) && proto.autokitteh.program.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.program.Error}
 */
proto.autokitteh.program.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.program.Error;
  return proto.autokitteh.program.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.program.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.program.Error}
 */
proto.autokitteh.program.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.autokitteh.program.CallFrame;
      reader.readMessage(value,proto.autokitteh.program.CallFrame.deserializeBinaryFromReader);
      msg.addCallstack(value);
      break;
    case 4:
      var value = new proto.autokitteh.program.Error;
      reader.readMessage(value,proto.autokitteh.program.Error.deserializeBinaryFromReader);
      msg.setNext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.program.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.program.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.program.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.program.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallstackList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.autokitteh.program.CallFrame.serializeBinaryToWriter
    );
  }
  f = message.getNext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.autokitteh.program.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string msg = 1;
 * @return {string}
 */
proto.autokitteh.program.Error.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.program.Error} returns this
 */
proto.autokitteh.program.Error.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.autokitteh.program.Error.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.program.Error} returns this
 */
proto.autokitteh.program.Error.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated CallFrame callstack = 3;
 * @return {!Array<!proto.autokitteh.program.CallFrame>}
 */
proto.autokitteh.program.Error.prototype.getCallstackList = function() {
  return /** @type{!Array<!proto.autokitteh.program.CallFrame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.autokitteh.program.CallFrame, 3));
};


/**
 * @param {!Array<!proto.autokitteh.program.CallFrame>} value
 * @return {!proto.autokitteh.program.Error} returns this
*/
proto.autokitteh.program.Error.prototype.setCallstackList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.autokitteh.program.CallFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.program.CallFrame}
 */
proto.autokitteh.program.Error.prototype.addCallstack = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.autokitteh.program.CallFrame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.program.Error} returns this
 */
proto.autokitteh.program.Error.prototype.clearCallstackList = function() {
  return this.setCallstackList([]);
};


/**
 * optional Error next = 4;
 * @return {?proto.autokitteh.program.Error}
 */
proto.autokitteh.program.Error.prototype.getNext = function() {
  return /** @type{?proto.autokitteh.program.Error} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.program.Error, 4));
};


/**
 * @param {?proto.autokitteh.program.Error|undefined} value
 * @return {!proto.autokitteh.program.Error} returns this
*/
proto.autokitteh.program.Error.prototype.setNext = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.program.Error} returns this
 */
proto.autokitteh.program.Error.prototype.clearNext = function() {
  return this.setNext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.program.Error.prototype.hasNext = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.autokitteh.program);
