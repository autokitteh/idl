// source: event/event_state.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var validate_validate_pb = require('../validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.autokitteh.event.ErrorEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.EventState', null, global);
goog.exportSymbol('proto.autokitteh.event.EventState.TypeCase', null, global);
goog.exportSymbol('proto.autokitteh.event.EventStateRecord', null, global);
goog.exportSymbol('proto.autokitteh.event.IgnoredEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.PendingEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.ProcessedEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.ProcessingEventState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.EventStateRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.EventStateRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.EventStateRecord.displayName = 'proto.autokitteh.event.EventStateRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.EventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.autokitteh.event.EventState.oneofGroups_);
};
goog.inherits(proto.autokitteh.event.EventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.EventState.displayName = 'proto.autokitteh.event.EventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.IgnoredEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.IgnoredEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.IgnoredEventState.displayName = 'proto.autokitteh.event.IgnoredEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.ErrorEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.ErrorEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.ErrorEventState.displayName = 'proto.autokitteh.event.ErrorEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.PendingEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.PendingEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.PendingEventState.displayName = 'proto.autokitteh.event.PendingEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.ProcessingEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.event.ProcessingEventState.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.event.ProcessingEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.ProcessingEventState.displayName = 'proto.autokitteh.event.ProcessingEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.ProcessedEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.event.ProcessedEventState.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.event.ProcessedEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.ProcessedEventState.displayName = 'proto.autokitteh.event.ProcessedEventState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.EventStateRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.EventStateRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.EventStateRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.EventStateRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    t: (f = msg.getT()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.autokitteh.event.EventState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.EventStateRecord}
 */
proto.autokitteh.event.EventStateRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.EventStateRecord;
  return proto.autokitteh.event.EventStateRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.EventStateRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.EventStateRecord}
 */
proto.autokitteh.event.EventStateRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setT(value);
      break;
    case 2:
      var value = new proto.autokitteh.event.EventState;
      reader.readMessage(value,proto.autokitteh.event.EventState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.EventStateRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.EventStateRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.EventStateRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.EventStateRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getT();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.autokitteh.event.EventState.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp t = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.autokitteh.event.EventStateRecord.prototype.getT = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.autokitteh.event.EventStateRecord} returns this
*/
proto.autokitteh.event.EventStateRecord.prototype.setT = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.EventStateRecord} returns this
 */
proto.autokitteh.event.EventStateRecord.prototype.clearT = function() {
  return this.setT(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.EventStateRecord.prototype.hasT = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EventState state = 2;
 * @return {?proto.autokitteh.event.EventState}
 */
proto.autokitteh.event.EventStateRecord.prototype.getState = function() {
  return /** @type{?proto.autokitteh.event.EventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.EventState, 2));
};


/**
 * @param {?proto.autokitteh.event.EventState|undefined} value
 * @return {!proto.autokitteh.event.EventStateRecord} returns this
*/
proto.autokitteh.event.EventStateRecord.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.EventStateRecord} returns this
 */
proto.autokitteh.event.EventStateRecord.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.EventStateRecord.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.autokitteh.event.EventState.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.autokitteh.event.EventState.TypeCase = {
  TYPE_NOT_SET: 0,
  IGNORED: 1,
  ERROR: 2,
  PENDING: 3,
  PROCESSING: 4,
  PROCESSED: 5
};

/**
 * @return {proto.autokitteh.event.EventState.TypeCase}
 */
proto.autokitteh.event.EventState.prototype.getTypeCase = function() {
  return /** @type {proto.autokitteh.event.EventState.TypeCase} */(jspb.Message.computeOneofCase(this, proto.autokitteh.event.EventState.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.EventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.EventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.EventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.EventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    ignored: (f = msg.getIgnored()) && proto.autokitteh.event.IgnoredEventState.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.autokitteh.event.ErrorEventState.toObject(includeInstance, f),
    pending: (f = msg.getPending()) && proto.autokitteh.event.PendingEventState.toObject(includeInstance, f),
    processing: (f = msg.getProcessing()) && proto.autokitteh.event.ProcessingEventState.toObject(includeInstance, f),
    processed: (f = msg.getProcessed()) && proto.autokitteh.event.ProcessedEventState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.EventState}
 */
proto.autokitteh.event.EventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.EventState;
  return proto.autokitteh.event.EventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.EventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.EventState}
 */
proto.autokitteh.event.EventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autokitteh.event.IgnoredEventState;
      reader.readMessage(value,proto.autokitteh.event.IgnoredEventState.deserializeBinaryFromReader);
      msg.setIgnored(value);
      break;
    case 2:
      var value = new proto.autokitteh.event.ErrorEventState;
      reader.readMessage(value,proto.autokitteh.event.ErrorEventState.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.autokitteh.event.PendingEventState;
      reader.readMessage(value,proto.autokitteh.event.PendingEventState.deserializeBinaryFromReader);
      msg.setPending(value);
      break;
    case 4:
      var value = new proto.autokitteh.event.ProcessingEventState;
      reader.readMessage(value,proto.autokitteh.event.ProcessingEventState.deserializeBinaryFromReader);
      msg.setProcessing(value);
      break;
    case 5:
      var value = new proto.autokitteh.event.ProcessedEventState;
      reader.readMessage(value,proto.autokitteh.event.ProcessedEventState.deserializeBinaryFromReader);
      msg.setProcessed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.EventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.EventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.EventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.EventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIgnored();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.autokitteh.event.IgnoredEventState.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.autokitteh.event.ErrorEventState.serializeBinaryToWriter
    );
  }
  f = message.getPending();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.autokitteh.event.PendingEventState.serializeBinaryToWriter
    );
  }
  f = message.getProcessing();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.autokitteh.event.ProcessingEventState.serializeBinaryToWriter
    );
  }
  f = message.getProcessed();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.autokitteh.event.ProcessedEventState.serializeBinaryToWriter
    );
  }
};


/**
 * optional IgnoredEventState ignored = 1;
 * @return {?proto.autokitteh.event.IgnoredEventState}
 */
proto.autokitteh.event.EventState.prototype.getIgnored = function() {
  return /** @type{?proto.autokitteh.event.IgnoredEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.IgnoredEventState, 1));
};


/**
 * @param {?proto.autokitteh.event.IgnoredEventState|undefined} value
 * @return {!proto.autokitteh.event.EventState} returns this
*/
proto.autokitteh.event.EventState.prototype.setIgnored = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.autokitteh.event.EventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.EventState} returns this
 */
proto.autokitteh.event.EventState.prototype.clearIgnored = function() {
  return this.setIgnored(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.EventState.prototype.hasIgnored = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorEventState error = 2;
 * @return {?proto.autokitteh.event.ErrorEventState}
 */
proto.autokitteh.event.EventState.prototype.getError = function() {
  return /** @type{?proto.autokitteh.event.ErrorEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.ErrorEventState, 2));
};


/**
 * @param {?proto.autokitteh.event.ErrorEventState|undefined} value
 * @return {!proto.autokitteh.event.EventState} returns this
*/
proto.autokitteh.event.EventState.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.autokitteh.event.EventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.EventState} returns this
 */
proto.autokitteh.event.EventState.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.EventState.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PendingEventState pending = 3;
 * @return {?proto.autokitteh.event.PendingEventState}
 */
proto.autokitteh.event.EventState.prototype.getPending = function() {
  return /** @type{?proto.autokitteh.event.PendingEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.PendingEventState, 3));
};


/**
 * @param {?proto.autokitteh.event.PendingEventState|undefined} value
 * @return {!proto.autokitteh.event.EventState} returns this
*/
proto.autokitteh.event.EventState.prototype.setPending = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.autokitteh.event.EventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.EventState} returns this
 */
proto.autokitteh.event.EventState.prototype.clearPending = function() {
  return this.setPending(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.EventState.prototype.hasPending = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProcessingEventState processing = 4;
 * @return {?proto.autokitteh.event.ProcessingEventState}
 */
proto.autokitteh.event.EventState.prototype.getProcessing = function() {
  return /** @type{?proto.autokitteh.event.ProcessingEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.ProcessingEventState, 4));
};


/**
 * @param {?proto.autokitteh.event.ProcessingEventState|undefined} value
 * @return {!proto.autokitteh.event.EventState} returns this
*/
proto.autokitteh.event.EventState.prototype.setProcessing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.autokitteh.event.EventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.EventState} returns this
 */
proto.autokitteh.event.EventState.prototype.clearProcessing = function() {
  return this.setProcessing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.EventState.prototype.hasProcessing = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProcessedEventState processed = 5;
 * @return {?proto.autokitteh.event.ProcessedEventState}
 */
proto.autokitteh.event.EventState.prototype.getProcessed = function() {
  return /** @type{?proto.autokitteh.event.ProcessedEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.ProcessedEventState, 5));
};


/**
 * @param {?proto.autokitteh.event.ProcessedEventState|undefined} value
 * @return {!proto.autokitteh.event.EventState} returns this
*/
proto.autokitteh.event.EventState.prototype.setProcessed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.autokitteh.event.EventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.EventState} returns this
 */
proto.autokitteh.event.EventState.prototype.clearProcessed = function() {
  return this.setProcessed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.EventState.prototype.hasProcessed = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.IgnoredEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.IgnoredEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.IgnoredEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.IgnoredEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.IgnoredEventState}
 */
proto.autokitteh.event.IgnoredEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.IgnoredEventState;
  return proto.autokitteh.event.IgnoredEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.IgnoredEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.IgnoredEventState}
 */
proto.autokitteh.event.IgnoredEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.IgnoredEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.IgnoredEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.IgnoredEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.IgnoredEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.autokitteh.event.IgnoredEventState.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.event.IgnoredEventState} returns this
 */
proto.autokitteh.event.IgnoredEventState.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.ErrorEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.ErrorEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.ErrorEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ErrorEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.ErrorEventState}
 */
proto.autokitteh.event.ErrorEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.ErrorEventState;
  return proto.autokitteh.event.ErrorEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.ErrorEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.ErrorEventState}
 */
proto.autokitteh.event.ErrorEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.ErrorEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.ErrorEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.ErrorEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ErrorEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.autokitteh.event.ErrorEventState.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.event.ErrorEventState} returns this
 */
proto.autokitteh.event.ErrorEventState.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.PendingEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.PendingEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.PendingEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.PendingEventState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.PendingEventState}
 */
proto.autokitteh.event.PendingEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.PendingEventState;
  return proto.autokitteh.event.PendingEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.PendingEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.PendingEventState}
 */
proto.autokitteh.event.PendingEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.PendingEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.PendingEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.PendingEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.PendingEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.event.ProcessingEventState.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.ProcessingEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.ProcessingEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.ProcessingEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProcessingEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    ignoredProjectIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.ProcessingEventState}
 */
proto.autokitteh.event.ProcessingEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.ProcessingEventState;
  return proto.autokitteh.event.ProcessingEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.ProcessingEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.ProcessingEventState}
 */
proto.autokitteh.event.ProcessingEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addProjectIds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addIgnoredProjectIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.ProcessingEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.ProcessingEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.ProcessingEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProcessingEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getIgnoredProjectIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string project_ids = 1;
 * @return {!Array<string>}
 */
proto.autokitteh.event.ProcessingEventState.prototype.getProjectIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autokitteh.event.ProcessingEventState} returns this
 */
proto.autokitteh.event.ProcessingEventState.prototype.setProjectIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.event.ProcessingEventState} returns this
 */
proto.autokitteh.event.ProcessingEventState.prototype.addProjectIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.event.ProcessingEventState} returns this
 */
proto.autokitteh.event.ProcessingEventState.prototype.clearProjectIdsList = function() {
  return this.setProjectIdsList([]);
};


/**
 * repeated string ignored_project_ids = 2;
 * @return {!Array<string>}
 */
proto.autokitteh.event.ProcessingEventState.prototype.getIgnoredProjectIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autokitteh.event.ProcessingEventState} returns this
 */
proto.autokitteh.event.ProcessingEventState.prototype.setIgnoredProjectIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.event.ProcessingEventState} returns this
 */
proto.autokitteh.event.ProcessingEventState.prototype.addIgnoredProjectIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.event.ProcessingEventState} returns this
 */
proto.autokitteh.event.ProcessingEventState.prototype.clearIgnoredProjectIdsList = function() {
  return this.setIgnoredProjectIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.event.ProcessedEventState.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.ProcessedEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.ProcessedEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.ProcessedEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProcessedEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    attnProjectIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.ProcessedEventState}
 */
proto.autokitteh.event.ProcessedEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.ProcessedEventState;
  return proto.autokitteh.event.ProcessedEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.ProcessedEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.ProcessedEventState}
 */
proto.autokitteh.event.ProcessedEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addProjectIds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAttnProjectIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.ProcessedEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.ProcessedEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.ProcessedEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProcessedEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAttnProjectIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string project_ids = 1;
 * @return {!Array<string>}
 */
proto.autokitteh.event.ProcessedEventState.prototype.getProjectIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autokitteh.event.ProcessedEventState} returns this
 */
proto.autokitteh.event.ProcessedEventState.prototype.setProjectIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.event.ProcessedEventState} returns this
 */
proto.autokitteh.event.ProcessedEventState.prototype.addProjectIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.event.ProcessedEventState} returns this
 */
proto.autokitteh.event.ProcessedEventState.prototype.clearProjectIdsList = function() {
  return this.setProjectIdsList([]);
};


/**
 * repeated string attn_project_ids = 2;
 * @return {!Array<string>}
 */
proto.autokitteh.event.ProcessedEventState.prototype.getAttnProjectIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autokitteh.event.ProcessedEventState} returns this
 */
proto.autokitteh.event.ProcessedEventState.prototype.setAttnProjectIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.event.ProcessedEventState} returns this
 */
proto.autokitteh.event.ProcessedEventState.prototype.addAttnProjectIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.event.ProcessedEventState} returns this
 */
proto.autokitteh.event.ProcessedEventState.prototype.clearAttnProjectIdsList = function() {
  return this.setAttnProjectIdsList([]);
};


goog.object.extend(exports, proto.autokitteh.event);
