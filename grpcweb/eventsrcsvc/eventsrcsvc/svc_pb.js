// source: eventsrcsvc/svc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var validate_validate_pb = require('../validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
var eventsrc_src_pb = require('../eventsrc/src_pb.js');
goog.object.extend(proto, eventsrc_src_pb);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.AddEventSourceRequest', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.AddEventSourceResponse', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.GetEventSourceRequest', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.GetEventSourceResponse', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.ListEventSourcesRequest', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.ListEventSourcesResponse', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest', null, global);
goog.exportSymbol('proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.AddEventSourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.AddEventSourceRequest.displayName = 'proto.autokitteh.eventsrcsvc.AddEventSourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.AddEventSourceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.AddEventSourceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.AddEventSourceResponse.displayName = 'proto.autokitteh.eventsrcsvc.AddEventSourceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.displayName = 'proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.displayName = 'proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.GetEventSourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.GetEventSourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.GetEventSourceRequest.displayName = 'proto.autokitteh.eventsrcsvc.GetEventSourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.GetEventSourceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.GetEventSourceResponse.displayName = 'proto.autokitteh.eventsrcsvc.GetEventSourceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.ListEventSourcesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.displayName = 'proto.autokitteh.eventsrcsvc.ListEventSourcesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.ListEventSourcesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.displayName = 'proto.autokitteh.eventsrcsvc.ListEventSourcesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.displayName = 'proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.displayName = 'proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.displayName = 'proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.displayName = 'proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.displayName = 'proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.displayName = 'proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.AddEventSourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    settings: (f = msg.getSettings()) && eventsrc_src_pb.EventSourceSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceRequest}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.AddEventSourceRequest;
  return proto.autokitteh.eventsrcsvc.AddEventSourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceRequest}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new eventsrc_src_pb.EventSourceSettings;
      reader.readMessage(value,eventsrc_src_pb.EventSourceSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.AddEventSourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      eventsrc_src_pb.EventSourceSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceRequest} returns this
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional autokitteh.eventsrc.EventSourceSettings settings = 2;
 * @return {?proto.autokitteh.eventsrc.EventSourceSettings}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.prototype.getSettings = function() {
  return /** @type{?proto.autokitteh.eventsrc.EventSourceSettings} */ (
    jspb.Message.getWrapperField(this, eventsrc_src_pb.EventSourceSettings, 2));
};


/**
 * @param {?proto.autokitteh.eventsrc.EventSourceSettings|undefined} value
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceRequest} returns this
*/
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceRequest} returns this
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceRequest.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.AddEventSourceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.AddEventSourceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceResponse}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.AddEventSourceResponse;
  return proto.autokitteh.eventsrcsvc.AddEventSourceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceResponse}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.AddEventSourceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.AddEventSourceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    settings: (f = msg.getSettings()) && eventsrc_src_pb.EventSourceSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest;
  return proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new eventsrc_src_pb.EventSourceSettings;
      reader.readMessage(value,eventsrc_src_pb.EventSourceSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      eventsrc_src_pb.EventSourceSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest} returns this
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional autokitteh.eventsrc.EventSourceSettings settings = 2;
 * @return {?proto.autokitteh.eventsrc.EventSourceSettings}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.prototype.getSettings = function() {
  return /** @type{?proto.autokitteh.eventsrc.EventSourceSettings} */ (
    jspb.Message.getWrapperField(this, eventsrc_src_pb.EventSourceSettings, 2));
};


/**
 * @param {?proto.autokitteh.eventsrc.EventSourceSettings|undefined} value
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest} returns this
*/
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest} returns this
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceRequest.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse;
  return proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.GetEventSourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.GetEventSourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceRequest}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.GetEventSourceRequest;
  return proto.autokitteh.eventsrcsvc.GetEventSourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceRequest}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.GetEventSourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.GetEventSourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceRequest} returns this
 */
proto.autokitteh.eventsrcsvc.GetEventSourceRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.GetEventSourceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    src: (f = msg.getSrc()) && eventsrc_src_pb.EventSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceResponse}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.GetEventSourceResponse;
  return proto.autokitteh.eventsrcsvc.GetEventSourceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceResponse}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new eventsrc_src_pb.EventSource;
      reader.readMessage(value,eventsrc_src_pb.EventSource.deserializeBinaryFromReader);
      msg.setSrc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.GetEventSourceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      eventsrc_src_pb.EventSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional autokitteh.eventsrc.EventSource src = 1;
 * @return {?proto.autokitteh.eventsrc.EventSource}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.prototype.getSrc = function() {
  return /** @type{?proto.autokitteh.eventsrc.EventSource} */ (
    jspb.Message.getWrapperField(this, eventsrc_src_pb.EventSource, 1));
};


/**
 * @param {?proto.autokitteh.eventsrc.EventSource|undefined} value
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceResponse} returns this
*/
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.prototype.setSrc = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceResponse} returns this
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.prototype.clearSrc = function() {
  return this.setSrc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceResponse.prototype.hasSrc = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.ListEventSourcesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.ListEventSourcesRequest}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.ListEventSourcesRequest;
  return proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.ListEventSourcesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.ListEventSourcesRequest}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.ListEventSourcesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string account_name = 1;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.ListEventSourcesRequest} returns this
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesRequest.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.ListEventSourcesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.ListEventSourcesResponse}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.ListEventSourcesResponse;
  return proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.ListEventSourcesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.ListEventSourcesResponse}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.ListEventSourcesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ids = 1;
 * @return {!Array<string>}
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autokitteh.eventsrcsvc.ListEventSourcesResponse} returns this
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.eventsrcsvc.ListEventSourcesResponse} returns this
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.eventsrcsvc.ListEventSourcesResponse} returns this
 */
proto.autokitteh.eventsrcsvc.ListEventSourcesResponse.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    projectId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    associationToken: jspb.Message.getFieldWithDefault(msg, 5, ""),
    includeUnapproved: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest;
  return proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssociationToken(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeUnapproved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProjectId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAssociationToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIncludeUnapproved();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest} returns this
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project_id = 3;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.getProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest} returns this
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest} returns this
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string association_token = 5;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.getAssociationToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest} returns this
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.setAssociationToken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool include_unapproved = 6;
 * @return {boolean}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.getIncludeUnapproved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest} returns this
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest.prototype.setIncludeUnapproved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bindingsList: jspb.Message.toObjectList(msg.getBindingsList(),
    eventsrc_src_pb.EventSourceProjectBinding.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse;
  return proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new eventsrc_src_pb.EventSourceProjectBinding;
      reader.readMessage(value,eventsrc_src_pb.EventSourceProjectBinding.deserializeBinaryFromReader);
      msg.addBindings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBindingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      eventsrc_src_pb.EventSourceProjectBinding.serializeBinaryToWriter
    );
  }
};


/**
 * repeated autokitteh.eventsrc.EventSourceProjectBinding bindings = 1;
 * @return {!Array<!proto.autokitteh.eventsrc.EventSourceProjectBinding>}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.prototype.getBindingsList = function() {
  return /** @type{!Array<!proto.autokitteh.eventsrc.EventSourceProjectBinding>} */ (
    jspb.Message.getRepeatedWrapperField(this, eventsrc_src_pb.EventSourceProjectBinding, 1));
};


/**
 * @param {!Array<!proto.autokitteh.eventsrc.EventSourceProjectBinding>} value
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse} returns this
*/
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.prototype.setBindingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.autokitteh.eventsrc.EventSourceProjectBinding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.eventsrc.EventSourceProjectBinding}
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.prototype.addBindings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.autokitteh.eventsrc.EventSourceProjectBinding, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse} returns this
 */
proto.autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.prototype.clearBindingsList = function() {
  return this.setBindingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    projectId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    associationToken: jspb.Message.getFieldWithDefault(msg, 5, ""),
    settings: (f = msg.getSettings()) && eventsrc_src_pb.EventSourceProjectBindingSettings.toObject(includeInstance, f),
    sourceConfig: jspb.Message.getFieldWithDefault(msg, 7, ""),
    approved: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest;
  return proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssociationToken(value);
      break;
    case 6:
      var value = new eventsrc_src_pb.EventSourceProjectBindingSettings;
      reader.readMessage(value,eventsrc_src_pb.EventSourceProjectBindingSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceConfig(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApproved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProjectId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAssociationToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      eventsrc_src_pb.EventSourceProjectBindingSettings.serializeBinaryToWriter
    );
  }
  f = message.getSourceConfig();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getApproved();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string src_id = 1;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.getSrcId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.setSrcId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project_id = 3;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.getProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string association_token = 5;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.getAssociationToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.setAssociationToken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional autokitteh.eventsrc.EventSourceProjectBindingSettings settings = 6;
 * @return {?proto.autokitteh.eventsrc.EventSourceProjectBindingSettings}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.getSettings = function() {
  return /** @type{?proto.autokitteh.eventsrc.EventSourceProjectBindingSettings} */ (
    jspb.Message.getWrapperField(this, eventsrc_src_pb.EventSourceProjectBindingSettings, 6));
};


/**
 * @param {?proto.autokitteh.eventsrc.EventSourceProjectBindingSettings|undefined} value
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} returns this
*/
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string source_config = 7;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.getSourceConfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.setSourceConfig = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool approved = 8;
 * @return {boolean}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.getApproved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.prototype.setApproved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse;
  return proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    projectId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    approved: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    settings: (f = msg.getSettings()) && eventsrc_src_pb.EventSourceProjectBindingSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest;
  return proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApproved(value);
      break;
    case 5:
      var value = new eventsrc_src_pb.EventSourceProjectBindingSettings;
      reader.readMessage(value,eventsrc_src_pb.EventSourceProjectBindingSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProjectId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getApproved();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      eventsrc_src_pb.EventSourceProjectBindingSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional string src_id = 1;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.getSrcId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.setSrcId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string project_id = 2;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.getProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool approved = 4;
 * @return {boolean}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.getApproved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.setApproved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional autokitteh.eventsrc.EventSourceProjectBindingSettings settings = 5;
 * @return {?proto.autokitteh.eventsrc.EventSourceProjectBindingSettings}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.getSettings = function() {
  return /** @type{?proto.autokitteh.eventsrc.EventSourceProjectBindingSettings} */ (
    jspb.Message.getWrapperField(this, eventsrc_src_pb.EventSourceProjectBindingSettings, 5));
};


/**
 * @param {?proto.autokitteh.eventsrc.EventSourceProjectBindingSettings|undefined} value
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest} returns this
*/
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest} returns this
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse;
  return proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.autokitteh.eventsrcsvc);
