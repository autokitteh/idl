// source: event/project_state.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var validate_validate_pb = require('../validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
var lang_run_pb = require('../lang/run_pb.js');
goog.object.extend(proto, lang_run_pb);
goog.exportSymbol('proto.autokitteh.event.ErrorProjectEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.IgnoredProjectEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.PendingProjectEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.ProcessedProjectEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.ProcessingProjectEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.ProjectEventState', null, global);
goog.exportSymbol('proto.autokitteh.event.ProjectEventState.TypeCase', null, global);
goog.exportSymbol('proto.autokitteh.event.ProjectEventStateRecord', null, global);
goog.exportSymbol('proto.autokitteh.event.WaitingProjectEventState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.ProjectEventStateRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.ProjectEventStateRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.ProjectEventStateRecord.displayName = 'proto.autokitteh.event.ProjectEventStateRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.ProjectEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.autokitteh.event.ProjectEventState.oneofGroups_);
};
goog.inherits(proto.autokitteh.event.ProjectEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.ProjectEventState.displayName = 'proto.autokitteh.event.ProjectEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.ErrorProjectEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.ErrorProjectEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.ErrorProjectEventState.displayName = 'proto.autokitteh.event.ErrorProjectEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.IgnoredProjectEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.IgnoredProjectEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.IgnoredProjectEventState.displayName = 'proto.autokitteh.event.IgnoredProjectEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.PendingProjectEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.PendingProjectEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.PendingProjectEventState.displayName = 'proto.autokitteh.event.PendingProjectEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.ProcessingProjectEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.ProcessingProjectEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.ProcessingProjectEventState.displayName = 'proto.autokitteh.event.ProcessingProjectEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.ProcessedProjectEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.autokitteh.event.ProcessedProjectEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.ProcessedProjectEventState.displayName = 'proto.autokitteh.event.ProcessedProjectEventState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.autokitteh.event.WaitingProjectEventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.autokitteh.event.WaitingProjectEventState.repeatedFields_, null);
};
goog.inherits(proto.autokitteh.event.WaitingProjectEventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.autokitteh.event.WaitingProjectEventState.displayName = 'proto.autokitteh.event.WaitingProjectEventState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.ProjectEventStateRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.ProjectEventStateRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.ProjectEventStateRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProjectEventStateRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    t: (f = msg.getT()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.autokitteh.event.ProjectEventState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.ProjectEventStateRecord}
 */
proto.autokitteh.event.ProjectEventStateRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.ProjectEventStateRecord;
  return proto.autokitteh.event.ProjectEventStateRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.ProjectEventStateRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.ProjectEventStateRecord}
 */
proto.autokitteh.event.ProjectEventStateRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setT(value);
      break;
    case 2:
      var value = new proto.autokitteh.event.ProjectEventState;
      reader.readMessage(value,proto.autokitteh.event.ProjectEventState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.ProjectEventStateRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.ProjectEventStateRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.ProjectEventStateRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProjectEventStateRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getT();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.autokitteh.event.ProjectEventState.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp t = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.autokitteh.event.ProjectEventStateRecord.prototype.getT = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.autokitteh.event.ProjectEventStateRecord} returns this
*/
proto.autokitteh.event.ProjectEventStateRecord.prototype.setT = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ProjectEventStateRecord} returns this
 */
proto.autokitteh.event.ProjectEventStateRecord.prototype.clearT = function() {
  return this.setT(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ProjectEventStateRecord.prototype.hasT = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProjectEventState state = 2;
 * @return {?proto.autokitteh.event.ProjectEventState}
 */
proto.autokitteh.event.ProjectEventStateRecord.prototype.getState = function() {
  return /** @type{?proto.autokitteh.event.ProjectEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.ProjectEventState, 2));
};


/**
 * @param {?proto.autokitteh.event.ProjectEventState|undefined} value
 * @return {!proto.autokitteh.event.ProjectEventStateRecord} returns this
*/
proto.autokitteh.event.ProjectEventStateRecord.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ProjectEventStateRecord} returns this
 */
proto.autokitteh.event.ProjectEventStateRecord.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ProjectEventStateRecord.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.autokitteh.event.ProjectEventState.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.autokitteh.event.ProjectEventState.TypeCase = {
  TYPE_NOT_SET: 0,
  ERROR: 1,
  IGNORED: 2,
  PENDING: 3,
  PROCESSING: 4,
  WAITING: 5,
  PROCESSED: 6
};

/**
 * @return {proto.autokitteh.event.ProjectEventState.TypeCase}
 */
proto.autokitteh.event.ProjectEventState.prototype.getTypeCase = function() {
  return /** @type {proto.autokitteh.event.ProjectEventState.TypeCase} */(jspb.Message.computeOneofCase(this, proto.autokitteh.event.ProjectEventState.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.ProjectEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.ProjectEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.ProjectEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProjectEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.autokitteh.event.ErrorProjectEventState.toObject(includeInstance, f),
    ignored: (f = msg.getIgnored()) && proto.autokitteh.event.IgnoredProjectEventState.toObject(includeInstance, f),
    pending: (f = msg.getPending()) && proto.autokitteh.event.PendingProjectEventState.toObject(includeInstance, f),
    processing: (f = msg.getProcessing()) && proto.autokitteh.event.ProcessingProjectEventState.toObject(includeInstance, f),
    waiting: (f = msg.getWaiting()) && proto.autokitteh.event.WaitingProjectEventState.toObject(includeInstance, f),
    processed: (f = msg.getProcessed()) && proto.autokitteh.event.ProcessedProjectEventState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.ProjectEventState}
 */
proto.autokitteh.event.ProjectEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.ProjectEventState;
  return proto.autokitteh.event.ProjectEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.ProjectEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.ProjectEventState}
 */
proto.autokitteh.event.ProjectEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.autokitteh.event.ErrorProjectEventState;
      reader.readMessage(value,proto.autokitteh.event.ErrorProjectEventState.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.autokitteh.event.IgnoredProjectEventState;
      reader.readMessage(value,proto.autokitteh.event.IgnoredProjectEventState.deserializeBinaryFromReader);
      msg.setIgnored(value);
      break;
    case 3:
      var value = new proto.autokitteh.event.PendingProjectEventState;
      reader.readMessage(value,proto.autokitteh.event.PendingProjectEventState.deserializeBinaryFromReader);
      msg.setPending(value);
      break;
    case 4:
      var value = new proto.autokitteh.event.ProcessingProjectEventState;
      reader.readMessage(value,proto.autokitteh.event.ProcessingProjectEventState.deserializeBinaryFromReader);
      msg.setProcessing(value);
      break;
    case 5:
      var value = new proto.autokitteh.event.WaitingProjectEventState;
      reader.readMessage(value,proto.autokitteh.event.WaitingProjectEventState.deserializeBinaryFromReader);
      msg.setWaiting(value);
      break;
    case 6:
      var value = new proto.autokitteh.event.ProcessedProjectEventState;
      reader.readMessage(value,proto.autokitteh.event.ProcessedProjectEventState.deserializeBinaryFromReader);
      msg.setProcessed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.ProjectEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.ProjectEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.ProjectEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProjectEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.autokitteh.event.ErrorProjectEventState.serializeBinaryToWriter
    );
  }
  f = message.getIgnored();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.autokitteh.event.IgnoredProjectEventState.serializeBinaryToWriter
    );
  }
  f = message.getPending();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.autokitteh.event.PendingProjectEventState.serializeBinaryToWriter
    );
  }
  f = message.getProcessing();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.autokitteh.event.ProcessingProjectEventState.serializeBinaryToWriter
    );
  }
  f = message.getWaiting();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.autokitteh.event.WaitingProjectEventState.serializeBinaryToWriter
    );
  }
  f = message.getProcessed();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.autokitteh.event.ProcessedProjectEventState.serializeBinaryToWriter
    );
  }
};


/**
 * optional ErrorProjectEventState error = 1;
 * @return {?proto.autokitteh.event.ErrorProjectEventState}
 */
proto.autokitteh.event.ProjectEventState.prototype.getError = function() {
  return /** @type{?proto.autokitteh.event.ErrorProjectEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.ErrorProjectEventState, 1));
};


/**
 * @param {?proto.autokitteh.event.ErrorProjectEventState|undefined} value
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
*/
proto.autokitteh.event.ProjectEventState.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.autokitteh.event.ProjectEventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
 */
proto.autokitteh.event.ProjectEventState.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ProjectEventState.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IgnoredProjectEventState ignored = 2;
 * @return {?proto.autokitteh.event.IgnoredProjectEventState}
 */
proto.autokitteh.event.ProjectEventState.prototype.getIgnored = function() {
  return /** @type{?proto.autokitteh.event.IgnoredProjectEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.IgnoredProjectEventState, 2));
};


/**
 * @param {?proto.autokitteh.event.IgnoredProjectEventState|undefined} value
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
*/
proto.autokitteh.event.ProjectEventState.prototype.setIgnored = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.autokitteh.event.ProjectEventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
 */
proto.autokitteh.event.ProjectEventState.prototype.clearIgnored = function() {
  return this.setIgnored(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ProjectEventState.prototype.hasIgnored = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PendingProjectEventState pending = 3;
 * @return {?proto.autokitteh.event.PendingProjectEventState}
 */
proto.autokitteh.event.ProjectEventState.prototype.getPending = function() {
  return /** @type{?proto.autokitteh.event.PendingProjectEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.PendingProjectEventState, 3));
};


/**
 * @param {?proto.autokitteh.event.PendingProjectEventState|undefined} value
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
*/
proto.autokitteh.event.ProjectEventState.prototype.setPending = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.autokitteh.event.ProjectEventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
 */
proto.autokitteh.event.ProjectEventState.prototype.clearPending = function() {
  return this.setPending(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ProjectEventState.prototype.hasPending = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProcessingProjectEventState processing = 4;
 * @return {?proto.autokitteh.event.ProcessingProjectEventState}
 */
proto.autokitteh.event.ProjectEventState.prototype.getProcessing = function() {
  return /** @type{?proto.autokitteh.event.ProcessingProjectEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.ProcessingProjectEventState, 4));
};


/**
 * @param {?proto.autokitteh.event.ProcessingProjectEventState|undefined} value
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
*/
proto.autokitteh.event.ProjectEventState.prototype.setProcessing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.autokitteh.event.ProjectEventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
 */
proto.autokitteh.event.ProjectEventState.prototype.clearProcessing = function() {
  return this.setProcessing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ProjectEventState.prototype.hasProcessing = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional WaitingProjectEventState waiting = 5;
 * @return {?proto.autokitteh.event.WaitingProjectEventState}
 */
proto.autokitteh.event.ProjectEventState.prototype.getWaiting = function() {
  return /** @type{?proto.autokitteh.event.WaitingProjectEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.WaitingProjectEventState, 5));
};


/**
 * @param {?proto.autokitteh.event.WaitingProjectEventState|undefined} value
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
*/
proto.autokitteh.event.ProjectEventState.prototype.setWaiting = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.autokitteh.event.ProjectEventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
 */
proto.autokitteh.event.ProjectEventState.prototype.clearWaiting = function() {
  return this.setWaiting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ProjectEventState.prototype.hasWaiting = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ProcessedProjectEventState processed = 6;
 * @return {?proto.autokitteh.event.ProcessedProjectEventState}
 */
proto.autokitteh.event.ProjectEventState.prototype.getProcessed = function() {
  return /** @type{?proto.autokitteh.event.ProcessedProjectEventState} */ (
    jspb.Message.getWrapperField(this, proto.autokitteh.event.ProcessedProjectEventState, 6));
};


/**
 * @param {?proto.autokitteh.event.ProcessedProjectEventState|undefined} value
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
*/
proto.autokitteh.event.ProjectEventState.prototype.setProcessed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.autokitteh.event.ProjectEventState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ProjectEventState} returns this
 */
proto.autokitteh.event.ProjectEventState.prototype.clearProcessed = function() {
  return this.setProcessed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ProjectEventState.prototype.hasProcessed = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.ErrorProjectEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.ErrorProjectEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.ErrorProjectEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ErrorProjectEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    runSummary: (f = msg.getRunSummary()) && lang_run_pb.RunSummary.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.ErrorProjectEventState}
 */
proto.autokitteh.event.ErrorProjectEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.ErrorProjectEventState;
  return proto.autokitteh.event.ErrorProjectEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.ErrorProjectEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.ErrorProjectEventState}
 */
proto.autokitteh.event.ErrorProjectEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lang_run_pb.RunSummary;
      reader.readMessage(value,lang_run_pb.RunSummary.deserializeBinaryFromReader);
      msg.setRunSummary(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.ErrorProjectEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.ErrorProjectEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.ErrorProjectEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ErrorProjectEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunSummary();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lang_run_pb.RunSummary.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional autokitteh.lang.RunSummary run_summary = 1;
 * @return {?proto.autokitteh.lang.RunSummary}
 */
proto.autokitteh.event.ErrorProjectEventState.prototype.getRunSummary = function() {
  return /** @type{?proto.autokitteh.lang.RunSummary} */ (
    jspb.Message.getWrapperField(this, lang_run_pb.RunSummary, 1));
};


/**
 * @param {?proto.autokitteh.lang.RunSummary|undefined} value
 * @return {!proto.autokitteh.event.ErrorProjectEventState} returns this
*/
proto.autokitteh.event.ErrorProjectEventState.prototype.setRunSummary = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ErrorProjectEventState} returns this
 */
proto.autokitteh.event.ErrorProjectEventState.prototype.clearRunSummary = function() {
  return this.setRunSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ErrorProjectEventState.prototype.hasRunSummary = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.autokitteh.event.ErrorProjectEventState.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.event.ErrorProjectEventState} returns this
 */
proto.autokitteh.event.ErrorProjectEventState.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.IgnoredProjectEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.IgnoredProjectEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.IgnoredProjectEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.IgnoredProjectEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.IgnoredProjectEventState}
 */
proto.autokitteh.event.IgnoredProjectEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.IgnoredProjectEventState;
  return proto.autokitteh.event.IgnoredProjectEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.IgnoredProjectEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.IgnoredProjectEventState}
 */
proto.autokitteh.event.IgnoredProjectEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.IgnoredProjectEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.IgnoredProjectEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.IgnoredProjectEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.IgnoredProjectEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.autokitteh.event.IgnoredProjectEventState.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.autokitteh.event.IgnoredProjectEventState} returns this
 */
proto.autokitteh.event.IgnoredProjectEventState.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.PendingProjectEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.PendingProjectEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.PendingProjectEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.PendingProjectEventState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.PendingProjectEventState}
 */
proto.autokitteh.event.PendingProjectEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.PendingProjectEventState;
  return proto.autokitteh.event.PendingProjectEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.PendingProjectEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.PendingProjectEventState}
 */
proto.autokitteh.event.PendingProjectEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.PendingProjectEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.PendingProjectEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.PendingProjectEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.PendingProjectEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.ProcessingProjectEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.ProcessingProjectEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.ProcessingProjectEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProcessingProjectEventState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.ProcessingProjectEventState}
 */
proto.autokitteh.event.ProcessingProjectEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.ProcessingProjectEventState;
  return proto.autokitteh.event.ProcessingProjectEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.ProcessingProjectEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.ProcessingProjectEventState}
 */
proto.autokitteh.event.ProcessingProjectEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.ProcessingProjectEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.ProcessingProjectEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.ProcessingProjectEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProcessingProjectEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.ProcessedProjectEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.ProcessedProjectEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.ProcessedProjectEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProcessedProjectEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    runSummary: (f = msg.getRunSummary()) && lang_run_pb.RunSummary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.ProcessedProjectEventState}
 */
proto.autokitteh.event.ProcessedProjectEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.ProcessedProjectEventState;
  return proto.autokitteh.event.ProcessedProjectEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.ProcessedProjectEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.ProcessedProjectEventState}
 */
proto.autokitteh.event.ProcessedProjectEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lang_run_pb.RunSummary;
      reader.readMessage(value,lang_run_pb.RunSummary.deserializeBinaryFromReader);
      msg.setRunSummary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.ProcessedProjectEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.ProcessedProjectEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.ProcessedProjectEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.ProcessedProjectEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunSummary();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lang_run_pb.RunSummary.serializeBinaryToWriter
    );
  }
};


/**
 * optional autokitteh.lang.RunSummary run_summary = 1;
 * @return {?proto.autokitteh.lang.RunSummary}
 */
proto.autokitteh.event.ProcessedProjectEventState.prototype.getRunSummary = function() {
  return /** @type{?proto.autokitteh.lang.RunSummary} */ (
    jspb.Message.getWrapperField(this, lang_run_pb.RunSummary, 1));
};


/**
 * @param {?proto.autokitteh.lang.RunSummary|undefined} value
 * @return {!proto.autokitteh.event.ProcessedProjectEventState} returns this
*/
proto.autokitteh.event.ProcessedProjectEventState.prototype.setRunSummary = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.ProcessedProjectEventState} returns this
 */
proto.autokitteh.event.ProcessedProjectEventState.prototype.clearRunSummary = function() {
  return this.setRunSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.ProcessedProjectEventState.prototype.hasRunSummary = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.autokitteh.event.WaitingProjectEventState.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.autokitteh.event.WaitingProjectEventState.prototype.toObject = function(opt_includeInstance) {
  return proto.autokitteh.event.WaitingProjectEventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.autokitteh.event.WaitingProjectEventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.WaitingProjectEventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    namesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    runSummary: (f = msg.getRunSummary()) && lang_run_pb.RunSummary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.autokitteh.event.WaitingProjectEventState}
 */
proto.autokitteh.event.WaitingProjectEventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.autokitteh.event.WaitingProjectEventState;
  return proto.autokitteh.event.WaitingProjectEventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.autokitteh.event.WaitingProjectEventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.autokitteh.event.WaitingProjectEventState}
 */
proto.autokitteh.event.WaitingProjectEventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    case 2:
      var value = new lang_run_pb.RunSummary;
      reader.readMessage(value,lang_run_pb.RunSummary.deserializeBinaryFromReader);
      msg.setRunSummary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.autokitteh.event.WaitingProjectEventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.autokitteh.event.WaitingProjectEventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.autokitteh.event.WaitingProjectEventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.autokitteh.event.WaitingProjectEventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getRunSummary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lang_run_pb.RunSummary.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string names = 1;
 * @return {!Array<string>}
 */
proto.autokitteh.event.WaitingProjectEventState.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.autokitteh.event.WaitingProjectEventState} returns this
 */
proto.autokitteh.event.WaitingProjectEventState.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.autokitteh.event.WaitingProjectEventState} returns this
 */
proto.autokitteh.event.WaitingProjectEventState.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.autokitteh.event.WaitingProjectEventState} returns this
 */
proto.autokitteh.event.WaitingProjectEventState.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};


/**
 * optional autokitteh.lang.RunSummary run_summary = 2;
 * @return {?proto.autokitteh.lang.RunSummary}
 */
proto.autokitteh.event.WaitingProjectEventState.prototype.getRunSummary = function() {
  return /** @type{?proto.autokitteh.lang.RunSummary} */ (
    jspb.Message.getWrapperField(this, lang_run_pb.RunSummary, 2));
};


/**
 * @param {?proto.autokitteh.lang.RunSummary|undefined} value
 * @return {!proto.autokitteh.event.WaitingProjectEventState} returns this
*/
proto.autokitteh.event.WaitingProjectEventState.prototype.setRunSummary = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.autokitteh.event.WaitingProjectEventState} returns this
 */
proto.autokitteh.event.WaitingProjectEventState.prototype.clearRunSummary = function() {
  return this.setRunSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.autokitteh.event.WaitingProjectEventState.prototype.hasRunSummary = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.autokitteh.event);
