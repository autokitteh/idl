// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: values/values.proto

package values

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on None with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *None) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NoneValidationError is the validation error returned by None.Validate if the
// designated constraints aren't met.
type NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NoneValidationError) ErrorName() string { return "NoneValidationError" }

// Error satisfies the builtin error interface
func (e NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NoneValidationError{}

// Validate checks the field values on String with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *String) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for V

	return nil
}

// StringValidationError is the validation error returned by String.Validate if
// the designated constraints aren't met.
type StringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringValidationError) ErrorName() string { return "StringValidationError" }

// Error satisfies the builtin error interface
func (e StringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringValidationError{}

// Validate checks the field values on Integer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Integer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for V

	return nil
}

// IntegerValidationError is the validation error returned by Integer.Validate
// if the designated constraints aren't met.
type IntegerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegerValidationError) ErrorName() string { return "IntegerValidationError" }

// Error satisfies the builtin error interface
func (e IntegerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInteger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegerValidationError{}

// Validate checks the field values on Float with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Float) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for V

	return nil
}

// FloatValidationError is the validation error returned by Float.Validate if
// the designated constraints aren't met.
type FloatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatValidationError) ErrorName() string { return "FloatValidationError" }

// Error satisfies the builtin error interface
func (e FloatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatValidationError{}

// Validate checks the field values on Boolean with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Boolean) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for V

	return nil
}

// BooleanValidationError is the validation error returned by Boolean.Validate
// if the designated constraints aren't met.
type BooleanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BooleanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BooleanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BooleanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BooleanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BooleanValidationError) ErrorName() string { return "BooleanValidationError" }

// Error satisfies the builtin error interface
func (e BooleanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoolean.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BooleanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BooleanValidationError{}

// Validate checks the field values on List with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *List) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVs() {
		_, _ = idx, item

		if item == nil {
			return ListValidationError{
				field:  fmt.Sprintf("Vs[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListValidationError{
					field:  fmt.Sprintf("Vs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListValidationError is the validation error returned by List.Validate if the
// designated constraints aren't met.
type ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListValidationError) ErrorName() string { return "ListValidationError" }

// Error satisfies the builtin error interface
func (e ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListValidationError{}

// Validate checks the field values on Set with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Set) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVs() {
		_, _ = idx, item

		if item == nil {
			return SetValidationError{
				field:  fmt.Sprintf("Vs[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetValidationError{
					field:  fmt.Sprintf("Vs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SetValidationError is the validation error returned by Set.Validate if the
// designated constraints aren't met.
type SetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetValidationError) ErrorName() string { return "SetValidationError" }

// Error satisfies the builtin error interface
func (e SetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetValidationError{}

// Validate checks the field values on DictItem with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DictItem) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetK() == nil {
		return DictItemValidationError{
			field:  "K",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetK()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DictItemValidationError{
				field:  "K",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetV() == nil {
		return DictItemValidationError{
			field:  "V",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetV()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DictItemValidationError{
				field:  "V",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DictItemValidationError is the validation error returned by
// DictItem.Validate if the designated constraints aren't met.
type DictItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictItemValidationError) ErrorName() string { return "DictItemValidationError" }

// Error satisfies the builtin error interface
func (e DictItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictItemValidationError{}

// Validate checks the field values on Dict with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Dict) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if item == nil {
			return DictValidationError{
				field:  fmt.Sprintf("Items[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DictValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DictValidationError is the validation error returned by Dict.Validate if the
// designated constraints aren't met.
type DictValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictValidationError) ErrorName() string { return "DictValidationError" }

// Error satisfies the builtin error interface
func (e DictValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDict.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictValidationError{}

// Validate checks the field values on Bytes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Bytes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for V

	return nil
}

// BytesValidationError is the validation error returned by Bytes.Validate if
// the designated constraints aren't met.
type BytesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesValidationError) ErrorName() string { return "BytesValidationError" }

// Error satisfies the builtin error interface
func (e BytesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesValidationError{}

// Validate checks the field values on Time with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Time) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetT() == nil {
		return TimeValidationError{
			field:  "T",
			reason: "value is required",
		}
	}

	return nil
}

// TimeValidationError is the validation error returned by Time.Validate if the
// designated constraints aren't met.
type TimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeValidationError) ErrorName() string { return "TimeValidationError" }

// Error satisfies the builtin error interface
func (e TimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeValidationError{}

// Validate checks the field values on Duration with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Duration) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetD() == nil {
		return DurationValidationError{
			field:  "D",
			reason: "value is required",
		}
	}

	return nil
}

// DurationValidationError is the validation error returned by
// Duration.Validate if the designated constraints aren't met.
type DurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationValidationError) ErrorName() string { return "DurationValidationError" }

// Error satisfies the builtin error interface
func (e DurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDuration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationValidationError{}

// Validate checks the field values on Call with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Call) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Issuer

	// no validation rules for Flags

	return nil
}

// CallValidationError is the validation error returned by Call.Validate if the
// designated constraints aren't met.
type CallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallValidationError) ErrorName() string { return "CallValidationError" }

// Error satisfies the builtin error interface
func (e CallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallValidationError{}

// Validate checks the field values on Struct with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Struct) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCtor() == nil {
		return StructValidationError{
			field:  "Ctor",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCtor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StructValidationError{
				field:  "Ctor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetFields() {
		_ = val

		if val == nil {
			return StructValidationError{
				field:  fmt.Sprintf("Fields[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_Struct_Fields_Pattern.MatchString(key) {
			return StructValidationError{
				field:  fmt.Sprintf("Fields[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StructValidationError{
					field:  fmt.Sprintf("Fields[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StructValidationError is the validation error returned by Struct.Validate if
// the designated constraints aren't met.
type StructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructValidationError) ErrorName() string { return "StructValidationError" }

// Error satisfies the builtin error interface
func (e StructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructValidationError{}

var _Struct_Fields_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Module) Validate() error {
	if m == nil {
		return nil
	}

	if !_Module_Name_Pattern.MatchString(m.GetName()) {
		return ModuleValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^.+\"",
		}
	}

	for key, val := range m.GetMembers() {
		_ = val

		if val == nil {
			return ModuleValidationError{
				field:  fmt.Sprintf("Members[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_Module_Members_Pattern.MatchString(key) {
			return ModuleValidationError{
				field:  fmt.Sprintf("Members[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModuleValidationError{
					field:  fmt.Sprintf("Members[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

var _Module_Name_Pattern = regexp.MustCompile("^.+")

var _Module_Members_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on Symbol with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Symbol) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// SymbolValidationError is the validation error returned by Symbol.Validate if
// the designated constraints aren't met.
type SymbolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SymbolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SymbolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SymbolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SymbolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SymbolValidationError) ErrorName() string { return "SymbolValidationError" }

// Error satisfies the builtin error interface
func (e SymbolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSymbol.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SymbolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SymbolValidationError{}

// Validate checks the field values on FunctionSignature with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FunctionSignature) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Doc

	// no validation rules for NArgs

	// no validation rules for NKwonlyargs

	// no validation rules for HasVarargs

	// no validation rules for HasKwargs

	return nil
}

// FunctionSignatureValidationError is the validation error returned by
// FunctionSignature.Validate if the designated constraints aren't met.
type FunctionSignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FunctionSignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FunctionSignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FunctionSignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FunctionSignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FunctionSignatureValidationError) ErrorName() string {
	return "FunctionSignatureValidationError"
}

// Error satisfies the builtin error interface
func (e FunctionSignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFunctionSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FunctionSignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FunctionSignatureValidationError{}

// Validate checks the field values on Function with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Function) Validate() error {
	if m == nil {
		return nil
	}

	if !_Function_FuncId_Pattern.MatchString(m.GetFuncId()) {
		return FunctionValidationError{
			field:  "FuncId",
			reason: "value does not match regex pattern \"^F[0-9a-f.]+$\"",
		}
	}

	if !_Function_Lang_Pattern.MatchString(m.GetLang()) {
		return FunctionValidationError{
			field:  "Lang",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_-]+$\"",
		}
	}

	// no validation rules for Scope

	if v, ok := interface{}(m.GetSig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FunctionValidationError{
				field:  "Sig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FunctionValidationError is the validation error returned by
// Function.Validate if the designated constraints aren't met.
type FunctionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FunctionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FunctionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FunctionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FunctionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FunctionValidationError) ErrorName() string { return "FunctionValidationError" }

// Error satisfies the builtin error interface
func (e FunctionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFunction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FunctionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FunctionValidationError{}

var _Function_FuncId_Pattern = regexp.MustCompile("^F[0-9a-f.]+$")

var _Function_Lang_Pattern = regexp.MustCompile("^[0-9a-zA-Z_-]+$")

// Validate checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Value) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Value_None:

		if v, ok := interface{}(m.GetNone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "None",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_String_:

		if v, ok := interface{}(m.GetString_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "String_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Integer:

		if v, ok := interface{}(m.GetInteger()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Integer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Boolean:

		if v, ok := interface{}(m.GetBoolean()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Boolean",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_List:

		if v, ok := interface{}(m.GetList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "List",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Dict:

		if v, ok := interface{}(m.GetDict()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Float:

		if v, ok := interface{}(m.GetFloat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Float",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Set:

		if v, ok := interface{}(m.GetSet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Set",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Bytes:

		if v, ok := interface{}(m.GetBytes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Bytes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Time:

		if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Duration:

		if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Symbol:

		if v, ok := interface{}(m.GetSymbol()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Symbol",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Struct:

		if v, ok := interface{}(m.GetStruct()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Struct",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Module:

		if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Function:

		if v, ok := interface{}(m.GetFunction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Function",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Call:

		if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValueValidationError is the validation error returned by Value.Validate if
// the designated constraints aren't met.
type ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueValidationError) ErrorName() string { return "ValueValidationError" }

// Error satisfies the builtin error interface
func (e ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueValidationError{}
