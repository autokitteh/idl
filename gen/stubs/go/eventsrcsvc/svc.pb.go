// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: eventsrcsvc/svc.proto

package eventsrcsvc

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	eventsrc "go.autokitteh.dev/idl/eventsrc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddEventSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Settings *eventsrc.EventSourceSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *AddEventSourceRequest) Reset() {
	*x = AddEventSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventSourceRequest) ProtoMessage() {}

func (x *AddEventSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventSourceRequest.ProtoReflect.Descriptor instead.
func (*AddEventSourceRequest) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{0}
}

func (x *AddEventSourceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddEventSourceRequest) GetSettings() *eventsrc.EventSourceSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type AddEventSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddEventSourceResponse) Reset() {
	*x = AddEventSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventSourceResponse) ProtoMessage() {}

func (x *AddEventSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventSourceResponse.ProtoReflect.Descriptor instead.
func (*AddEventSourceResponse) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{1}
}

type UpdateEventSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Settings *eventsrc.EventSourceSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UpdateEventSourceRequest) Reset() {
	*x = UpdateEventSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventSourceRequest) ProtoMessage() {}

func (x *UpdateEventSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventSourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventSourceRequest) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateEventSourceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateEventSourceRequest) GetSettings() *eventsrc.EventSourceSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdateEventSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEventSourceResponse) Reset() {
	*x = UpdateEventSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventSourceResponse) ProtoMessage() {}

func (x *UpdateEventSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventSourceResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventSourceResponse) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{3}
}

type GetEventSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEventSourceRequest) Reset() {
	*x = GetEventSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventSourceRequest) ProtoMessage() {}

func (x *GetEventSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventSourceRequest.ProtoReflect.Descriptor instead.
func (*GetEventSourceRequest) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{4}
}

func (x *GetEventSourceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetEventSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src *eventsrc.EventSource `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
}

func (x *GetEventSourceResponse) Reset() {
	*x = GetEventSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventSourceResponse) ProtoMessage() {}

func (x *GetEventSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventSourceResponse.ProtoReflect.Descriptor instead.
func (*GetEventSourceResponse) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{5}
}

func (x *GetEventSourceResponse) GetSrc() *eventsrc.EventSource {
	if x != nil {
		return x.Src
	}
	return nil
}

type ListEventSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *ListEventSourcesRequest) Reset() {
	*x = ListEventSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventSourcesRequest) ProtoMessage() {}

func (x *ListEventSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventSourcesRequest.ProtoReflect.Descriptor instead.
func (*ListEventSourcesRequest) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{6}
}

func (x *ListEventSourcesRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type ListEventSourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListEventSourcesResponse) Reset() {
	*x = ListEventSourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventSourcesResponse) ProtoMessage() {}

func (x *ListEventSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventSourcesResponse.ProtoReflect.Descriptor instead.
func (*ListEventSourcesResponse) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{7}
}

func (x *ListEventSourcesResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetEventSourceProjectBindingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // optional filter.
	ProjectId         string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`                          // optional filter
	Name              string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                     // optional filter
	AssociationToken  string `protobuf:"bytes,5,opt,name=association_token,json=associationToken,proto3" json:"association_token,omitempty"`     // optional filter
	IncludeUnapproved bool   `protobuf:"varint,6,opt,name=include_unapproved,json=includeUnapproved,proto3" json:"include_unapproved,omitempty"` // if true, include also unapproved.
}

func (x *GetEventSourceProjectBindingsRequest) Reset() {
	*x = GetEventSourceProjectBindingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventSourceProjectBindingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventSourceProjectBindingsRequest) ProtoMessage() {}

func (x *GetEventSourceProjectBindingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventSourceProjectBindingsRequest.ProtoReflect.Descriptor instead.
func (*GetEventSourceProjectBindingsRequest) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{8}
}

func (x *GetEventSourceProjectBindingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetEventSourceProjectBindingsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetEventSourceProjectBindingsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetEventSourceProjectBindingsRequest) GetAssociationToken() string {
	if x != nil {
		return x.AssociationToken
	}
	return ""
}

func (x *GetEventSourceProjectBindingsRequest) GetIncludeUnapproved() bool {
	if x != nil {
		return x.IncludeUnapproved
	}
	return false
}

type GetEventSourceProjectBindingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bindings []*eventsrc.EventSourceProjectBinding `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
}

func (x *GetEventSourceProjectBindingsResponse) Reset() {
	*x = GetEventSourceProjectBindingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventSourceProjectBindingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventSourceProjectBindingsResponse) ProtoMessage() {}

func (x *GetEventSourceProjectBindingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventSourceProjectBindingsResponse.ProtoReflect.Descriptor instead.
func (*GetEventSourceProjectBindingsResponse) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{9}
}

func (x *GetEventSourceProjectBindingsResponse) GetBindings() []*eventsrc.EventSourceProjectBinding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

type AddEventSourceProjectBindingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcId            string                                      `protobuf:"bytes,1,opt,name=src_id,json=srcId,proto3" json:"src_id,omitempty"`
	ProjectId        string                                      `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name             string                                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	AssociationToken string                                      `protobuf:"bytes,5,opt,name=association_token,json=associationToken,proto3" json:"association_token,omitempty"`
	Settings         *eventsrc.EventSourceProjectBindingSettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	SourceConfig     string                                      `protobuf:"bytes,7,opt,name=source_config,json=sourceConfig,proto3" json:"source_config,omitempty"`
	Approved         bool                                        `protobuf:"varint,8,opt,name=approved,proto3" json:"approved,omitempty"`
}

func (x *AddEventSourceProjectBindingRequest) Reset() {
	*x = AddEventSourceProjectBindingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventSourceProjectBindingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventSourceProjectBindingRequest) ProtoMessage() {}

func (x *AddEventSourceProjectBindingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventSourceProjectBindingRequest.ProtoReflect.Descriptor instead.
func (*AddEventSourceProjectBindingRequest) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{10}
}

func (x *AddEventSourceProjectBindingRequest) GetSrcId() string {
	if x != nil {
		return x.SrcId
	}
	return ""
}

func (x *AddEventSourceProjectBindingRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AddEventSourceProjectBindingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddEventSourceProjectBindingRequest) GetAssociationToken() string {
	if x != nil {
		return x.AssociationToken
	}
	return ""
}

func (x *AddEventSourceProjectBindingRequest) GetSettings() *eventsrc.EventSourceProjectBindingSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *AddEventSourceProjectBindingRequest) GetSourceConfig() string {
	if x != nil {
		return x.SourceConfig
	}
	return ""
}

func (x *AddEventSourceProjectBindingRequest) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

type AddEventSourceProjectBindingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddEventSourceProjectBindingResponse) Reset() {
	*x = AddEventSourceProjectBindingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEventSourceProjectBindingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEventSourceProjectBindingResponse) ProtoMessage() {}

func (x *AddEventSourceProjectBindingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEventSourceProjectBindingResponse.ProtoReflect.Descriptor instead.
func (*AddEventSourceProjectBindingResponse) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{11}
}

type UpdateEventSourceProjectBindingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcId     string                                      `protobuf:"bytes,1,opt,name=src_id,json=srcId,proto3" json:"src_id,omitempty"`
	ProjectId string                                      `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name      string                                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Approved  bool                                        `protobuf:"varint,4,opt,name=approved,proto3" json:"approved,omitempty"`
	Settings  *eventsrc.EventSourceProjectBindingSettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UpdateEventSourceProjectBindingRequest) Reset() {
	*x = UpdateEventSourceProjectBindingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventSourceProjectBindingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventSourceProjectBindingRequest) ProtoMessage() {}

func (x *UpdateEventSourceProjectBindingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventSourceProjectBindingRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventSourceProjectBindingRequest) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateEventSourceProjectBindingRequest) GetSrcId() string {
	if x != nil {
		return x.SrcId
	}
	return ""
}

func (x *UpdateEventSourceProjectBindingRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateEventSourceProjectBindingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateEventSourceProjectBindingRequest) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *UpdateEventSourceProjectBindingRequest) GetSettings() *eventsrc.EventSourceProjectBindingSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdateEventSourceProjectBindingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEventSourceProjectBindingResponse) Reset() {
	*x = UpdateEventSourceProjectBindingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventsrcsvc_svc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventSourceProjectBindingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventSourceProjectBindingResponse) ProtoMessage() {}

func (x *UpdateEventSourceProjectBindingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventsrcsvc_svc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventSourceProjectBindingResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventSourceProjectBindingResponse) Descriptor() ([]byte, []int) {
	return file_eventsrcsvc_svc_proto_rawDescGZIP(), []int{13}
}

var File_eventsrcsvc_svc_proto protoreflect.FileDescriptor

var file_eventsrcsvc_svc_proto_rawDesc = []byte{
	0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2f, 0x73, 0x76,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74,
	0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x72, 0x63, 0x2f, 0x73, 0x72, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x01, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0xfa, 0x42, 0x34, 0x72, 0x32, 0x32, 0x30, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d,
	0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb3, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xfa, 0x42, 0x34, 0x72, 0x32, 0x32,
	0x30, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x60, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xfa, 0x42, 0x34, 0x72, 0x32, 0x32, 0x30,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x24,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72,
	0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0x60, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xfa,
	0x42, 0x1f, 0x72, 0x1d, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0xd0, 0x01,
	0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3c, 0xfa, 0x42, 0x39, 0x92, 0x01, 0x36, 0x22,
	0x34, 0x72, 0x32, 0x32, 0x30, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3a, 0xfa, 0x42, 0x37, 0x72, 0x35, 0x32, 0x30, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x5c,
	0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x51, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0x42, 0x2f, 0x72, 0x2d, 0x32, 0x28, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f,
	0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x2d, 0x5d, 0x2b, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a,
	0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x75, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xbf, 0x03, 0x0a, 0x23,
	0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0xfa, 0x42, 0x34, 0x72, 0x32, 0x32, 0x30, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f,
	0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x73, 0x72,
	0x63, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xfa, 0x42, 0x2c, 0x72, 0x2a, 0x32, 0x28,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x72, 0x1d, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d,
	0x2a, 0x24, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x52, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x26, 0x0a,
	0x24, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x37, 0xfa, 0x42, 0x34, 0x72, 0x32, 0x32, 0x30, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b,
	0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xfa, 0x42, 0x2c, 0x72, 0x2a, 0x32, 0x28, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5f, 0x2d, 0x5d, 0x2b, 0x5c, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f,
	0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x52, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x29, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xc1, 0x07, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x6f, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73,
	0x76, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01,
	0x0a, 0x1c, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72,
	0x63, 0x73, 0x76, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x3c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x2f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b,
	0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x69, 0x64, 0x6c, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x72, 0x63, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_eventsrcsvc_svc_proto_rawDescOnce sync.Once
	file_eventsrcsvc_svc_proto_rawDescData = file_eventsrcsvc_svc_proto_rawDesc
)

func file_eventsrcsvc_svc_proto_rawDescGZIP() []byte {
	file_eventsrcsvc_svc_proto_rawDescOnce.Do(func() {
		file_eventsrcsvc_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventsrcsvc_svc_proto_rawDescData)
	})
	return file_eventsrcsvc_svc_proto_rawDescData
}

var file_eventsrcsvc_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_eventsrcsvc_svc_proto_goTypes = []interface{}{
	(*AddEventSourceRequest)(nil),                      // 0: autokitteh.eventsrcsvc.AddEventSourceRequest
	(*AddEventSourceResponse)(nil),                     // 1: autokitteh.eventsrcsvc.AddEventSourceResponse
	(*UpdateEventSourceRequest)(nil),                   // 2: autokitteh.eventsrcsvc.UpdateEventSourceRequest
	(*UpdateEventSourceResponse)(nil),                  // 3: autokitteh.eventsrcsvc.UpdateEventSourceResponse
	(*GetEventSourceRequest)(nil),                      // 4: autokitteh.eventsrcsvc.GetEventSourceRequest
	(*GetEventSourceResponse)(nil),                     // 5: autokitteh.eventsrcsvc.GetEventSourceResponse
	(*ListEventSourcesRequest)(nil),                    // 6: autokitteh.eventsrcsvc.ListEventSourcesRequest
	(*ListEventSourcesResponse)(nil),                   // 7: autokitteh.eventsrcsvc.ListEventSourcesResponse
	(*GetEventSourceProjectBindingsRequest)(nil),       // 8: autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest
	(*GetEventSourceProjectBindingsResponse)(nil),      // 9: autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse
	(*AddEventSourceProjectBindingRequest)(nil),        // 10: autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest
	(*AddEventSourceProjectBindingResponse)(nil),       // 11: autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse
	(*UpdateEventSourceProjectBindingRequest)(nil),     // 12: autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest
	(*UpdateEventSourceProjectBindingResponse)(nil),    // 13: autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse
	(*eventsrc.EventSourceSettings)(nil),               // 14: autokitteh.eventsrc.EventSourceSettings
	(*eventsrc.EventSource)(nil),                       // 15: autokitteh.eventsrc.EventSource
	(*eventsrc.EventSourceProjectBinding)(nil),         // 16: autokitteh.eventsrc.EventSourceProjectBinding
	(*eventsrc.EventSourceProjectBindingSettings)(nil), // 17: autokitteh.eventsrc.EventSourceProjectBindingSettings
}
var file_eventsrcsvc_svc_proto_depIdxs = []int32{
	14, // 0: autokitteh.eventsrcsvc.AddEventSourceRequest.settings:type_name -> autokitteh.eventsrc.EventSourceSettings
	14, // 1: autokitteh.eventsrcsvc.UpdateEventSourceRequest.settings:type_name -> autokitteh.eventsrc.EventSourceSettings
	15, // 2: autokitteh.eventsrcsvc.GetEventSourceResponse.src:type_name -> autokitteh.eventsrc.EventSource
	16, // 3: autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse.bindings:type_name -> autokitteh.eventsrc.EventSourceProjectBinding
	17, // 4: autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest.settings:type_name -> autokitteh.eventsrc.EventSourceProjectBindingSettings
	17, // 5: autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest.settings:type_name -> autokitteh.eventsrc.EventSourceProjectBindingSettings
	0,  // 6: autokitteh.eventsrcsvc.EventSources.AddEventSource:input_type -> autokitteh.eventsrcsvc.AddEventSourceRequest
	2,  // 7: autokitteh.eventsrcsvc.EventSources.UpdateEventSource:input_type -> autokitteh.eventsrcsvc.UpdateEventSourceRequest
	4,  // 8: autokitteh.eventsrcsvc.EventSources.GetEventSource:input_type -> autokitteh.eventsrcsvc.GetEventSourceRequest
	10, // 9: autokitteh.eventsrcsvc.EventSources.AddEventSourceProjectBinding:input_type -> autokitteh.eventsrcsvc.AddEventSourceProjectBindingRequest
	12, // 10: autokitteh.eventsrcsvc.EventSources.UpdateEventSourceProjectBinding:input_type -> autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingRequest
	8,  // 11: autokitteh.eventsrcsvc.EventSources.GetEventSourceProjectBindings:input_type -> autokitteh.eventsrcsvc.GetEventSourceProjectBindingsRequest
	6,  // 12: autokitteh.eventsrcsvc.EventSources.ListEventSources:input_type -> autokitteh.eventsrcsvc.ListEventSourcesRequest
	1,  // 13: autokitteh.eventsrcsvc.EventSources.AddEventSource:output_type -> autokitteh.eventsrcsvc.AddEventSourceResponse
	3,  // 14: autokitteh.eventsrcsvc.EventSources.UpdateEventSource:output_type -> autokitteh.eventsrcsvc.UpdateEventSourceResponse
	5,  // 15: autokitteh.eventsrcsvc.EventSources.GetEventSource:output_type -> autokitteh.eventsrcsvc.GetEventSourceResponse
	11, // 16: autokitteh.eventsrcsvc.EventSources.AddEventSourceProjectBinding:output_type -> autokitteh.eventsrcsvc.AddEventSourceProjectBindingResponse
	13, // 17: autokitteh.eventsrcsvc.EventSources.UpdateEventSourceProjectBinding:output_type -> autokitteh.eventsrcsvc.UpdateEventSourceProjectBindingResponse
	9,  // 18: autokitteh.eventsrcsvc.EventSources.GetEventSourceProjectBindings:output_type -> autokitteh.eventsrcsvc.GetEventSourceProjectBindingsResponse
	7,  // 19: autokitteh.eventsrcsvc.EventSources.ListEventSources:output_type -> autokitteh.eventsrcsvc.ListEventSourcesResponse
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_eventsrcsvc_svc_proto_init() }
func file_eventsrcsvc_svc_proto_init() {
	if File_eventsrcsvc_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eventsrcsvc_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventSourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventSourceProjectBindingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventSourceProjectBindingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventSourceProjectBindingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEventSourceProjectBindingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventSourceProjectBindingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventsrcsvc_svc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventSourceProjectBindingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventsrcsvc_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eventsrcsvc_svc_proto_goTypes,
		DependencyIndexes: file_eventsrcsvc_svc_proto_depIdxs,
		MessageInfos:      file_eventsrcsvc_svc_proto_msgTypes,
	}.Build()
	File_eventsrcsvc_svc_proto = out.File
	file_eventsrcsvc_svc_proto_rawDesc = nil
	file_eventsrcsvc_svc_proto_goTypes = nil
	file_eventsrcsvc_svc_proto_depIdxs = nil
}
