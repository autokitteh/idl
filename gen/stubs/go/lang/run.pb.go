// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: lang/run.proto

package lang

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	program "go.autokitteh.dev/idl/program"
	values "go.autokitteh.dev/idl/values"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunStateLogRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	State  *RunState              `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Source *program.Path          `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"` // set only by akd for ui use.
}

func (x *RunStateLogRecord) Reset() {
	*x = RunStateLogRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunStateLogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunStateLogRecord) ProtoMessage() {}

func (x *RunStateLogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunStateLogRecord.ProtoReflect.Descriptor instead.
func (*RunStateLogRecord) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{0}
}

func (x *RunStateLogRecord) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *RunStateLogRecord) GetState() *RunState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *RunStateLogRecord) GetSource() *program.Path {
	if x != nil {
		return x.Source
	}
	return nil
}

type RunSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log    []*RunStateLogRecord `protobuf:"bytes,1,rep,name=log,proto3" json:"log,omitempty"`
	Prints []string             `protobuf:"bytes,2,rep,name=prints,proto3" json:"prints,omitempty"`
}

func (x *RunSummary) Reset() {
	*x = RunSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSummary) ProtoMessage() {}

func (x *RunSummary) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSummary.ProtoReflect.Descriptor instead.
func (*RunSummary) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{1}
}

func (x *RunSummary) GetLog() []*RunStateLogRecord {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *RunSummary) GetPrints() []string {
	if x != nil {
		return x.Prints
	}
	return nil
}

type RunState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*RunState_Running
	//	*RunState_Call
	//	*RunState_Load
	//	*RunState_Completed
	//	*RunState_Canceled
	//	*RunState_Error
	//	*RunState_Print
	//	*RunState_Callret
	//	*RunState_Loadret
	//	*RunState_ClientError
	Type isRunState_Type `protobuf_oneof:"type"`
}

func (x *RunState) Reset() {
	*x = RunState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunState) ProtoMessage() {}

func (x *RunState) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunState.ProtoReflect.Descriptor instead.
func (*RunState) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{2}
}

func (m *RunState) GetType() isRunState_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RunState) GetRunning() *RunningRunState {
	if x, ok := x.GetType().(*RunState_Running); ok {
		return x.Running
	}
	return nil
}

func (x *RunState) GetCall() *CallWaitRunState {
	if x, ok := x.GetType().(*RunState_Call); ok {
		return x.Call
	}
	return nil
}

func (x *RunState) GetLoad() *LoadWaitRunState {
	if x, ok := x.GetType().(*RunState_Load); ok {
		return x.Load
	}
	return nil
}

func (x *RunState) GetCompleted() *CompletedRunState {
	if x, ok := x.GetType().(*RunState_Completed); ok {
		return x.Completed
	}
	return nil
}

func (x *RunState) GetCanceled() *CanceledRunState {
	if x, ok := x.GetType().(*RunState_Canceled); ok {
		return x.Canceled
	}
	return nil
}

func (x *RunState) GetError() *ErrorRunState {
	if x, ok := x.GetType().(*RunState_Error); ok {
		return x.Error
	}
	return nil
}

func (x *RunState) GetPrint() *PrintRunUpdate {
	if x, ok := x.GetType().(*RunState_Print); ok {
		return x.Print
	}
	return nil
}

func (x *RunState) GetCallret() *CallReturnedRunUpdate {
	if x, ok := x.GetType().(*RunState_Callret); ok {
		return x.Callret
	}
	return nil
}

func (x *RunState) GetLoadret() *LoadReturnedRunUpdate {
	if x, ok := x.GetType().(*RunState_Loadret); ok {
		return x.Loadret
	}
	return nil
}

func (x *RunState) GetClientError() *ClientErrorRunState {
	if x, ok := x.GetType().(*RunState_ClientError); ok {
		return x.ClientError
	}
	return nil
}

type isRunState_Type interface {
	isRunState_Type()
}

type RunState_Running struct {
	Running *RunningRunState `protobuf:"bytes,1,opt,name=running,proto3,oneof"`
}

type RunState_Call struct {
	Call *CallWaitRunState `protobuf:"bytes,2,opt,name=call,proto3,oneof"` // waiting for callback response.
}

type RunState_Load struct {
	Load *LoadWaitRunState `protobuf:"bytes,3,opt,name=load,proto3,oneof"` // waiting for load response.
}

type RunState_Completed struct {
	Completed *CompletedRunState `protobuf:"bytes,4,opt,name=completed,proto3,oneof"` // successfuly, otherwise error.
}

type RunState_Canceled struct {
	Canceled *CanceledRunState `protobuf:"bytes,5,opt,name=canceled,proto3,oneof"`
}

type RunState_Error struct {
	Error *ErrorRunState `protobuf:"bytes,6,opt,name=error,proto3,oneof"`
}

type RunState_Print struct {
	// These are not a states, just logs of events that happened for the record.
	Print *PrintRunUpdate `protobuf:"bytes,20,opt,name=print,proto3,oneof"` // sent to client.
}

type RunState_Callret struct {
	Callret *CallReturnedRunUpdate `protobuf:"bytes,21,opt,name=callret,proto3,oneof"` // not sent to client.
}

type RunState_Loadret struct {
	Loadret *LoadReturnedRunUpdate `protobuf:"bytes,22,opt,name=loadret,proto3,oneof"` // not sent to client.
}

type RunState_ClientError struct {
	// Generated only in a client.
	ClientError *ClientErrorRunState `protobuf:"bytes,30,opt,name=client_error,json=clientError,proto3,oneof"`
}

func (*RunState_Running) isRunState_Type() {}

func (*RunState_Call) isRunState_Type() {}

func (*RunState_Load) isRunState_Type() {}

func (*RunState_Completed) isRunState_Type() {}

func (*RunState_Canceled) isRunState_Type() {}

func (*RunState_Error) isRunState_Type() {}

func (*RunState_Print) isRunState_Type() {}

func (*RunState_Callret) isRunState_Type() {}

func (*RunState_Loadret) isRunState_Type() {}

func (*RunState_ClientError) isRunState_Type() {}

type RunningRunState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunningRunState) Reset() {
	*x = RunningRunState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunningRunState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunningRunState) ProtoMessage() {}

func (x *RunningRunState) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunningRunState.ProtoReflect.Descriptor instead.
func (*RunningRunState) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{3}
}

type CallWaitRunState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Call       *values.Value            `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	Args       []*values.Value          `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Kws        map[string]*values.Value `protobuf:"bytes,3,rep,name=kws,proto3" json:"kws,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RunSummary *RunSummary              `protobuf:"bytes,4,opt,name=run_summary,json=runSummary,proto3" json:"run_summary,omitempty"`
}

func (x *CallWaitRunState) Reset() {
	*x = CallWaitRunState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallWaitRunState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallWaitRunState) ProtoMessage() {}

func (x *CallWaitRunState) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallWaitRunState.ProtoReflect.Descriptor instead.
func (*CallWaitRunState) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{4}
}

func (x *CallWaitRunState) GetCall() *values.Value {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *CallWaitRunState) GetArgs() []*values.Value {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CallWaitRunState) GetKws() map[string]*values.Value {
	if x != nil {
		return x.Kws
	}
	return nil
}

func (x *CallWaitRunState) GetRunSummary() *RunSummary {
	if x != nil {
		return x.RunSummary
	}
	return nil
}

type LoadWaitRunState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path *program.Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *LoadWaitRunState) Reset() {
	*x = LoadWaitRunState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadWaitRunState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadWaitRunState) ProtoMessage() {}

func (x *LoadWaitRunState) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadWaitRunState.ProtoReflect.Descriptor instead.
func (*LoadWaitRunState) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{5}
}

func (x *LoadWaitRunState) GetPath() *program.Path {
	if x != nil {
		return x.Path
	}
	return nil
}

type CompletedRunState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals map[string]*values.Value `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CompletedRunState) Reset() {
	*x = CompletedRunState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletedRunState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletedRunState) ProtoMessage() {}

func (x *CompletedRunState) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletedRunState.ProtoReflect.Descriptor instead.
func (*CompletedRunState) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{6}
}

func (x *CompletedRunState) GetVals() map[string]*values.Value {
	if x != nil {
		return x.Vals
	}
	return nil
}

type CanceledRunState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason    string               `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Callstack []*program.CallFrame `protobuf:"bytes,2,rep,name=callstack,proto3" json:"callstack,omitempty"`
}

func (x *CanceledRunState) Reset() {
	*x = CanceledRunState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanceledRunState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanceledRunState) ProtoMessage() {}

func (x *CanceledRunState) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanceledRunState.ProtoReflect.Descriptor instead.
func (*CanceledRunState) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{7}
}

func (x *CanceledRunState) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CanceledRunState) GetCallstack() []*program.CallFrame {
	if x != nil {
		return x.Callstack
	}
	return nil
}

type ErrorRunState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *program.Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErrorRunState) Reset() {
	*x = ErrorRunState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorRunState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorRunState) ProtoMessage() {}

func (x *ErrorRunState) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorRunState.ProtoReflect.Descriptor instead.
func (*ErrorRunState) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{8}
}

func (x *ErrorRunState) GetError() *program.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type PrintRunUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PrintRunUpdate) Reset() {
	*x = PrintRunUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintRunUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintRunUpdate) ProtoMessage() {}

func (x *PrintRunUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintRunUpdate.ProtoReflect.Descriptor instead.
func (*PrintRunUpdate) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{9}
}

func (x *PrintRunUpdate) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CallReturnedRunUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *program.Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Retval *values.Value  `protobuf:"bytes,2,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (x *CallReturnedRunUpdate) Reset() {
	*x = CallReturnedRunUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallReturnedRunUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallReturnedRunUpdate) ProtoMessage() {}

func (x *CallReturnedRunUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallReturnedRunUpdate.ProtoReflect.Descriptor instead.
func (*CallReturnedRunUpdate) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{10}
}

func (x *CallReturnedRunUpdate) GetError() *program.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CallReturnedRunUpdate) GetRetval() *values.Value {
	if x != nil {
		return x.Retval
	}
	return nil
}

type LoadReturnedRunUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      *program.Error           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	RunSummary *RunSummary              `protobuf:"bytes,2,opt,name=run_summary,json=runSummary,proto3" json:"run_summary,omitempty"`
	Vals       map[string]*values.Value `protobuf:"bytes,3,rep,name=vals,proto3" json:"vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoadReturnedRunUpdate) Reset() {
	*x = LoadReturnedRunUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadReturnedRunUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadReturnedRunUpdate) ProtoMessage() {}

func (x *LoadReturnedRunUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadReturnedRunUpdate.ProtoReflect.Descriptor instead.
func (*LoadReturnedRunUpdate) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{11}
}

func (x *LoadReturnedRunUpdate) GetError() *program.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *LoadReturnedRunUpdate) GetRunSummary() *RunSummary {
	if x != nil {
		return x.RunSummary
	}
	return nil
}

func (x *LoadReturnedRunUpdate) GetVals() map[string]*values.Value {
	if x != nil {
		return x.Vals
	}
	return nil
}

type ClientErrorRunState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ClientErrorRunState) Reset() {
	*x = ClientErrorRunState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_run_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientErrorRunState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientErrorRunState) ProtoMessage() {}

func (x *ClientErrorRunState) ProtoReflect() protoreflect.Message {
	mi := &file_lang_run_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientErrorRunState.ProtoReflect.Descriptor instead.
func (*ClientErrorRunState) Descriptor() ([]byte, []int) {
	return file_lang_run_proto_rawDescGZIP(), []int{12}
}

func (x *ClientErrorRunState) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_lang_run_proto protoreflect.FileDescriptor

var file_lang_run_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x01, 0x0a,
	0x11, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x28, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x12, 0x39, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x69, 0x0a, 0x0a, 0x52, 0x75, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65,
	0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07,
	0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x90, 0x05, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x37, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74,
	0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x69,
	0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65,
	0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x75, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x72,
	0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b,
	0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x6c,
	0x6f, 0x61, 0x64, 0x72, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x72, 0x65, 0x74, 0x12,
	0x49, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x10, 0x43,
	0x61, 0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x03, 0x6b, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4b, 0x77, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x26, 0xfa,
	0x42, 0x23, 0x9a, 0x01, 0x20, 0x18, 0x01, 0x22, 0x1c, 0x72, 0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03, 0x6b, 0x77, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x75,
	0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x75,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x50, 0x0a, 0x08, 0x4b, 0x77, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x10, 0x4c, 0x6f,
	0x61, 0x64, 0x57, 0x61, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x04,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x9a, 0x01, 0x20,
	0x18, 0x01, 0x22, 0x1c, 0x72, 0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24,
	0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x1a, 0x51, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65,
	0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x10, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b,
	0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x22, 0x40, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x24, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x7a, 0x0a, 0x15, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65,
	0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x22, 0xc7, 0x02, 0x0a, 0x15, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74,
	0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x6c, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x26, 0xfa, 0x42, 0x23, 0x9a, 0x01, 0x20, 0x18, 0x01, 0x22, 0x1c, 0x72, 0x1a, 0x32, 0x18, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x1a, 0x51, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x2b, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x1c, 0x5a,
	0x1a, 0x67, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x64,
	0x65, 0x76, 0x2f, 0x69, 0x64, 0x6c, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_lang_run_proto_rawDescOnce sync.Once
	file_lang_run_proto_rawDescData = file_lang_run_proto_rawDesc
)

func file_lang_run_proto_rawDescGZIP() []byte {
	file_lang_run_proto_rawDescOnce.Do(func() {
		file_lang_run_proto_rawDescData = protoimpl.X.CompressGZIP(file_lang_run_proto_rawDescData)
	})
	return file_lang_run_proto_rawDescData
}

var file_lang_run_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_lang_run_proto_goTypes = []interface{}{
	(*RunStateLogRecord)(nil),     // 0: autokitteh.lang.RunStateLogRecord
	(*RunSummary)(nil),            // 1: autokitteh.lang.RunSummary
	(*RunState)(nil),              // 2: autokitteh.lang.RunState
	(*RunningRunState)(nil),       // 3: autokitteh.lang.RunningRunState
	(*CallWaitRunState)(nil),      // 4: autokitteh.lang.CallWaitRunState
	(*LoadWaitRunState)(nil),      // 5: autokitteh.lang.LoadWaitRunState
	(*CompletedRunState)(nil),     // 6: autokitteh.lang.CompletedRunState
	(*CanceledRunState)(nil),      // 7: autokitteh.lang.CanceledRunState
	(*ErrorRunState)(nil),         // 8: autokitteh.lang.ErrorRunState
	(*PrintRunUpdate)(nil),        // 9: autokitteh.lang.PrintRunUpdate
	(*CallReturnedRunUpdate)(nil), // 10: autokitteh.lang.CallReturnedRunUpdate
	(*LoadReturnedRunUpdate)(nil), // 11: autokitteh.lang.LoadReturnedRunUpdate
	(*ClientErrorRunState)(nil),   // 12: autokitteh.lang.ClientErrorRunState
	nil,                           // 13: autokitteh.lang.CallWaitRunState.KwsEntry
	nil,                           // 14: autokitteh.lang.CompletedRunState.ValsEntry
	nil,                           // 15: autokitteh.lang.LoadReturnedRunUpdate.ValsEntry
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(*program.Path)(nil),          // 17: autokitteh.program.Path
	(*values.Value)(nil),          // 18: autokitteh.values.Value
	(*program.CallFrame)(nil),     // 19: autokitteh.program.CallFrame
	(*program.Error)(nil),         // 20: autokitteh.program.Error
}
var file_lang_run_proto_depIdxs = []int32{
	16, // 0: autokitteh.lang.RunStateLogRecord.t:type_name -> google.protobuf.Timestamp
	2,  // 1: autokitteh.lang.RunStateLogRecord.state:type_name -> autokitteh.lang.RunState
	17, // 2: autokitteh.lang.RunStateLogRecord.source:type_name -> autokitteh.program.Path
	0,  // 3: autokitteh.lang.RunSummary.log:type_name -> autokitteh.lang.RunStateLogRecord
	3,  // 4: autokitteh.lang.RunState.running:type_name -> autokitteh.lang.RunningRunState
	4,  // 5: autokitteh.lang.RunState.call:type_name -> autokitteh.lang.CallWaitRunState
	5,  // 6: autokitteh.lang.RunState.load:type_name -> autokitteh.lang.LoadWaitRunState
	6,  // 7: autokitteh.lang.RunState.completed:type_name -> autokitteh.lang.CompletedRunState
	7,  // 8: autokitteh.lang.RunState.canceled:type_name -> autokitteh.lang.CanceledRunState
	8,  // 9: autokitteh.lang.RunState.error:type_name -> autokitteh.lang.ErrorRunState
	9,  // 10: autokitteh.lang.RunState.print:type_name -> autokitteh.lang.PrintRunUpdate
	10, // 11: autokitteh.lang.RunState.callret:type_name -> autokitteh.lang.CallReturnedRunUpdate
	11, // 12: autokitteh.lang.RunState.loadret:type_name -> autokitteh.lang.LoadReturnedRunUpdate
	12, // 13: autokitteh.lang.RunState.client_error:type_name -> autokitteh.lang.ClientErrorRunState
	18, // 14: autokitteh.lang.CallWaitRunState.call:type_name -> autokitteh.values.Value
	18, // 15: autokitteh.lang.CallWaitRunState.args:type_name -> autokitteh.values.Value
	13, // 16: autokitteh.lang.CallWaitRunState.kws:type_name -> autokitteh.lang.CallWaitRunState.KwsEntry
	1,  // 17: autokitteh.lang.CallWaitRunState.run_summary:type_name -> autokitteh.lang.RunSummary
	17, // 18: autokitteh.lang.LoadWaitRunState.path:type_name -> autokitteh.program.Path
	14, // 19: autokitteh.lang.CompletedRunState.vals:type_name -> autokitteh.lang.CompletedRunState.ValsEntry
	19, // 20: autokitteh.lang.CanceledRunState.callstack:type_name -> autokitteh.program.CallFrame
	20, // 21: autokitteh.lang.ErrorRunState.error:type_name -> autokitteh.program.Error
	20, // 22: autokitteh.lang.CallReturnedRunUpdate.error:type_name -> autokitteh.program.Error
	18, // 23: autokitteh.lang.CallReturnedRunUpdate.retval:type_name -> autokitteh.values.Value
	20, // 24: autokitteh.lang.LoadReturnedRunUpdate.error:type_name -> autokitteh.program.Error
	1,  // 25: autokitteh.lang.LoadReturnedRunUpdate.run_summary:type_name -> autokitteh.lang.RunSummary
	15, // 26: autokitteh.lang.LoadReturnedRunUpdate.vals:type_name -> autokitteh.lang.LoadReturnedRunUpdate.ValsEntry
	18, // 27: autokitteh.lang.CallWaitRunState.KwsEntry.value:type_name -> autokitteh.values.Value
	18, // 28: autokitteh.lang.CompletedRunState.ValsEntry.value:type_name -> autokitteh.values.Value
	18, // 29: autokitteh.lang.LoadReturnedRunUpdate.ValsEntry.value:type_name -> autokitteh.values.Value
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_lang_run_proto_init() }
func file_lang_run_proto_init() {
	if File_lang_run_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lang_run_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunStateLogRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunningRunState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallWaitRunState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadWaitRunState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletedRunState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanceledRunState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorRunState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintRunUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallReturnedRunUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadReturnedRunUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_run_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientErrorRunState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lang_run_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RunState_Running)(nil),
		(*RunState_Call)(nil),
		(*RunState_Load)(nil),
		(*RunState_Completed)(nil),
		(*RunState_Canceled)(nil),
		(*RunState_Error)(nil),
		(*RunState_Print)(nil),
		(*RunState_Callret)(nil),
		(*RunState_Loadret)(nil),
		(*RunState_ClientError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lang_run_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lang_run_proto_goTypes,
		DependencyIndexes: file_lang_run_proto_depIdxs,
		MessageInfos:      file_lang_run_proto_msgTypes,
	}.Build()
	File_lang_run_proto = out.File
	file_lang_run_proto_rawDesc = nil
	file_lang_run_proto_goTypes = nil
	file_lang_run_proto_depIdxs = nil
}
