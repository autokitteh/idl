// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lang/run.proto

package lang

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on RunStateLogRecord with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RunStateLogRecord) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetT()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunStateLogRecordValidationError{
				field:  "T",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetState() == nil {
		return RunStateLogRecordValidationError{
			field:  "State",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunStateLogRecordValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunStateLogRecordValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RunStateLogRecordValidationError is the validation error returned by
// RunStateLogRecord.Validate if the designated constraints aren't met.
type RunStateLogRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunStateLogRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunStateLogRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunStateLogRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunStateLogRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunStateLogRecordValidationError) ErrorName() string {
	return "RunStateLogRecordValidationError"
}

// Error satisfies the builtin error interface
func (e RunStateLogRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunStateLogRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunStateLogRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunStateLogRecordValidationError{}

// Validate checks the field values on RunSummary with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RunSummary) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLog() {
		_, _ = idx, item

		if item == nil {
			return RunSummaryValidationError{
				field:  fmt.Sprintf("Log[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunSummaryValidationError{
					field:  fmt.Sprintf("Log[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RunSummaryValidationError is the validation error returned by
// RunSummary.Validate if the designated constraints aren't met.
type RunSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunSummaryValidationError) ErrorName() string { return "RunSummaryValidationError" }

// Error satisfies the builtin error interface
func (e RunSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunSummaryValidationError{}

// Validate checks the field values on RunState with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RunState) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *RunState_Running:

		if v, ok := interface{}(m.GetRunning()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "Running",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunState_Call:

		if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunState_Load:

		if v, ok := interface{}(m.GetLoad()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "Load",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunState_Completed:

		if v, ok := interface{}(m.GetCompleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "Completed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunState_Canceled:

		if v, ok := interface{}(m.GetCanceled()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "Canceled",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunState_Error:

		if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunState_Print:

		if v, ok := interface{}(m.GetPrint()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "Print",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunState_Callret:

		if v, ok := interface{}(m.GetCallret()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "Callret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunState_Loadret:

		if v, ok := interface{}(m.GetLoadret()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "Loadret",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RunState_ClientError:

		if v, ok := interface{}(m.GetClientError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunStateValidationError{
					field:  "ClientError",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return RunStateValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// RunStateValidationError is the validation error returned by
// RunState.Validate if the designated constraints aren't met.
type RunStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunStateValidationError) ErrorName() string { return "RunStateValidationError" }

// Error satisfies the builtin error interface
func (e RunStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunStateValidationError{}

// Validate checks the field values on RunningRunState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RunningRunState) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RunningRunStateValidationError is the validation error returned by
// RunningRunState.Validate if the designated constraints aren't met.
type RunningRunStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunningRunStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunningRunStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunningRunStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunningRunStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunningRunStateValidationError) ErrorName() string { return "RunningRunStateValidationError" }

// Error satisfies the builtin error interface
func (e RunningRunStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunningRunState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunningRunStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunningRunStateValidationError{}

// Validate checks the field values on CallWaitRunState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CallWaitRunState) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCall() == nil {
		return CallWaitRunStateValidationError{
			field:  "Call",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallWaitRunStateValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArgs() {
		_, _ = idx, item

		if item == nil {
			return CallWaitRunStateValidationError{
				field:  fmt.Sprintf("Args[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallWaitRunStateValidationError{
					field:  fmt.Sprintf("Args[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetKws() {
		_ = val

		if val == nil {
			return CallWaitRunStateValidationError{
				field:  fmt.Sprintf("Kws[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_CallWaitRunState_Kws_Pattern.MatchString(key) {
			return CallWaitRunStateValidationError{
				field:  fmt.Sprintf("Kws[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallWaitRunStateValidationError{
					field:  fmt.Sprintf("Kws[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetRunSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallWaitRunStateValidationError{
				field:  "RunSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CallWaitRunStateValidationError is the validation error returned by
// CallWaitRunState.Validate if the designated constraints aren't met.
type CallWaitRunStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallWaitRunStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallWaitRunStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallWaitRunStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallWaitRunStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallWaitRunStateValidationError) ErrorName() string { return "CallWaitRunStateValidationError" }

// Error satisfies the builtin error interface
func (e CallWaitRunStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallWaitRunState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallWaitRunStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallWaitRunStateValidationError{}

var _CallWaitRunState_Kws_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on LoadWaitRunState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LoadWaitRunState) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPath() == nil {
		return LoadWaitRunStateValidationError{
			field:  "Path",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPath()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadWaitRunStateValidationError{
				field:  "Path",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LoadWaitRunStateValidationError is the validation error returned by
// LoadWaitRunState.Validate if the designated constraints aren't met.
type LoadWaitRunStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadWaitRunStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadWaitRunStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadWaitRunStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadWaitRunStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadWaitRunStateValidationError) ErrorName() string { return "LoadWaitRunStateValidationError" }

// Error satisfies the builtin error interface
func (e LoadWaitRunStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadWaitRunState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadWaitRunStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadWaitRunStateValidationError{}

// Validate checks the field values on CompletedRunState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CompletedRunState) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetVals() {
		_ = val

		if val == nil {
			return CompletedRunStateValidationError{
				field:  fmt.Sprintf("Vals[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_CompletedRunState_Vals_Pattern.MatchString(key) {
			return CompletedRunStateValidationError{
				field:  fmt.Sprintf("Vals[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompletedRunStateValidationError{
					field:  fmt.Sprintf("Vals[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CompletedRunStateValidationError is the validation error returned by
// CompletedRunState.Validate if the designated constraints aren't met.
type CompletedRunStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletedRunStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletedRunStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletedRunStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletedRunStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletedRunStateValidationError) ErrorName() string {
	return "CompletedRunStateValidationError"
}

// Error satisfies the builtin error interface
func (e CompletedRunStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletedRunState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletedRunStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletedRunStateValidationError{}

var _CompletedRunState_Vals_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on CanceledRunState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CanceledRunState) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Reason

	for idx, item := range m.GetCallstack() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CanceledRunStateValidationError{
					field:  fmt.Sprintf("Callstack[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CanceledRunStateValidationError is the validation error returned by
// CanceledRunState.Validate if the designated constraints aren't met.
type CanceledRunStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CanceledRunStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CanceledRunStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CanceledRunStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CanceledRunStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CanceledRunStateValidationError) ErrorName() string { return "CanceledRunStateValidationError" }

// Error satisfies the builtin error interface
func (e CanceledRunStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCanceledRunState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CanceledRunStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CanceledRunStateValidationError{}

// Validate checks the field values on ErrorRunState with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ErrorRunState) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorRunStateValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ErrorRunStateValidationError is the validation error returned by
// ErrorRunState.Validate if the designated constraints aren't met.
type ErrorRunStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorRunStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorRunStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorRunStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorRunStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorRunStateValidationError) ErrorName() string { return "ErrorRunStateValidationError" }

// Error satisfies the builtin error interface
func (e ErrorRunStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorRunState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorRunStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorRunStateValidationError{}

// Validate checks the field values on PrintRunUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PrintRunUpdate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Text

	return nil
}

// PrintRunUpdateValidationError is the validation error returned by
// PrintRunUpdate.Validate if the designated constraints aren't met.
type PrintRunUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrintRunUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrintRunUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrintRunUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrintRunUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrintRunUpdateValidationError) ErrorName() string { return "PrintRunUpdateValidationError" }

// Error satisfies the builtin error interface
func (e PrintRunUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrintRunUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrintRunUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrintRunUpdateValidationError{}

// Validate checks the field values on CallReturnedRunUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CallReturnedRunUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallReturnedRunUpdateValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRetval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallReturnedRunUpdateValidationError{
				field:  "Retval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CallReturnedRunUpdateValidationError is the validation error returned by
// CallReturnedRunUpdate.Validate if the designated constraints aren't met.
type CallReturnedRunUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallReturnedRunUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallReturnedRunUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallReturnedRunUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallReturnedRunUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallReturnedRunUpdateValidationError) ErrorName() string {
	return "CallReturnedRunUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e CallReturnedRunUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallReturnedRunUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallReturnedRunUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallReturnedRunUpdateValidationError{}

// Validate checks the field values on LoadReturnedRunUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoadReturnedRunUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadReturnedRunUpdateValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRunSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadReturnedRunUpdateValidationError{
				field:  "RunSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetVals() {
		_ = val

		if val == nil {
			return LoadReturnedRunUpdateValidationError{
				field:  fmt.Sprintf("Vals[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_LoadReturnedRunUpdate_Vals_Pattern.MatchString(key) {
			return LoadReturnedRunUpdateValidationError{
				field:  fmt.Sprintf("Vals[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadReturnedRunUpdateValidationError{
					field:  fmt.Sprintf("Vals[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LoadReturnedRunUpdateValidationError is the validation error returned by
// LoadReturnedRunUpdate.Validate if the designated constraints aren't met.
type LoadReturnedRunUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadReturnedRunUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadReturnedRunUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadReturnedRunUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadReturnedRunUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadReturnedRunUpdateValidationError) ErrorName() string {
	return "LoadReturnedRunUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadReturnedRunUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadReturnedRunUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadReturnedRunUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadReturnedRunUpdateValidationError{}

var _LoadReturnedRunUpdate_Vals_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on ClientErrorRunState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClientErrorRunState) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Error

	return nil
}

// ClientErrorRunStateValidationError is the validation error returned by
// ClientErrorRunState.Validate if the designated constraints aren't met.
type ClientErrorRunStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientErrorRunStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientErrorRunStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientErrorRunStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientErrorRunStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientErrorRunStateValidationError) ErrorName() string {
	return "ClientErrorRunStateValidationError"
}

// Error satisfies the builtin error interface
func (e ClientErrorRunStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientErrorRunState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientErrorRunStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientErrorRunStateValidationError{}
