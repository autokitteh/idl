// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: langsvc/langsvc.proto

package langsvc

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	program "go.autokitteh.dev/idl/program"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*program.Path `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Cycle) Reset() {
	*x = Cycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cycle) ProtoMessage() {}

func (x *Cycle) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cycle.ProtoReflect.Descriptor instead.
func (*Cycle) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{0}
}

func (x *Cycle) GetPaths() []*program.Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Dependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready   []*program.Path `protobuf:"bytes,1,rep,name=ready,proto3" json:"ready,omitempty"`
	Missing []*program.Path `protobuf:"bytes,2,rep,name=missing,proto3" json:"missing,omitempty"`
	Cycles  []*Cycle        `protobuf:"bytes,3,rep,name=cycles,proto3" json:"cycles,omitempty"`
}

func (x *Dependencies) Reset() {
	*x = Dependencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependencies) ProtoMessage() {}

func (x *Dependencies) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependencies.ProtoReflect.Descriptor instead.
func (*Dependencies) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{1}
}

func (x *Dependencies) GetReady() []*program.Path {
	if x != nil {
		return x.Ready
	}
	return nil
}

func (x *Dependencies) GetMissing() []*program.Path {
	if x != nil {
		return x.Missing
	}
	return nil
}

func (x *Dependencies) GetCycles() []*Cycle {
	if x != nil {
		return x.Cycles
	}
	return nil
}

type GetModuleDependenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module *program.Module `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *GetModuleDependenciesRequest) Reset() {
	*x = GetModuleDependenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModuleDependenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleDependenciesRequest) ProtoMessage() {}

func (x *GetModuleDependenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleDependenciesRequest.ProtoReflect.Descriptor instead.
func (*GetModuleDependenciesRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{2}
}

func (x *GetModuleDependenciesRequest) GetModule() *program.Module {
	if x != nil {
		return x.Module
	}
	return nil
}

type GetModuleDependenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deps *Dependencies `protobuf:"bytes,1,opt,name=deps,proto3" json:"deps,omitempty"`
}

func (x *GetModuleDependenciesResponse) Reset() {
	*x = GetModuleDependenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModuleDependenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleDependenciesResponse) ProtoMessage() {}

func (x *GetModuleDependenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleDependenciesResponse.ProtoReflect.Descriptor instead.
func (*GetModuleDependenciesResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{3}
}

func (x *GetModuleDependenciesResponse) GetDeps() *Dependencies {
	if x != nil {
		return x.Deps
	}
	return nil
}

type IsCompilerVersionSupportedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Ver  string `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`
}

func (x *IsCompilerVersionSupportedRequest) Reset() {
	*x = IsCompilerVersionSupportedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCompilerVersionSupportedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCompilerVersionSupportedRequest) ProtoMessage() {}

func (x *IsCompilerVersionSupportedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCompilerVersionSupportedRequest.ProtoReflect.Descriptor instead.
func (*IsCompilerVersionSupportedRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{4}
}

func (x *IsCompilerVersionSupportedRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *IsCompilerVersionSupportedRequest) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

type IsCompilerVersionSupportedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Supported bool `protobuf:"varint,1,opt,name=supported,proto3" json:"supported,omitempty"`
}

func (x *IsCompilerVersionSupportedResponse) Reset() {
	*x = IsCompilerVersionSupportedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCompilerVersionSupportedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCompilerVersionSupportedResponse) ProtoMessage() {}

func (x *IsCompilerVersionSupportedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCompilerVersionSupportedResponse.ProtoReflect.Descriptor instead.
func (*IsCompilerVersionSupportedResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{5}
}

func (x *IsCompilerVersionSupportedResponse) GetSupported() bool {
	if x != nil {
		return x.Supported
	}
	return false
}

type CompileModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang     string        `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Predecls []string      `protobuf:"bytes,2,rep,name=predecls,proto3" json:"predecls,omitempty"`
	Path     *program.Path `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Src      []byte        `protobuf:"bytes,4,opt,name=src,proto3" json:"src,omitempty"`
	GetDeps  bool          `protobuf:"varint,6,opt,name=get_deps,json=getDeps,proto3" json:"get_deps,omitempty"`
}

func (x *CompileModuleRequest) Reset() {
	*x = CompileModuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileModuleRequest) ProtoMessage() {}

func (x *CompileModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileModuleRequest.ProtoReflect.Descriptor instead.
func (*CompileModuleRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{6}
}

func (x *CompileModuleRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *CompileModuleRequest) GetPredecls() []string {
	if x != nil {
		return x.Predecls
	}
	return nil
}

func (x *CompileModuleRequest) GetPath() *program.Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CompileModuleRequest) GetSrc() []byte {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *CompileModuleRequest) GetGetDeps() bool {
	if x != nil {
		return x.GetDeps
	}
	return false
}

type CompileModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module *program.Module `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Deps   *Dependencies   `protobuf:"bytes,2,opt,name=deps,proto3" json:"deps,omitempty"` // if req.get_deps. only the ready field is populated for now.
}

func (x *CompileModuleResponse) Reset() {
	*x = CompileModuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileModuleResponse) ProtoMessage() {}

func (x *CompileModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileModuleResponse.ProtoReflect.Descriptor instead.
func (*CompileModuleResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{7}
}

func (x *CompileModuleResponse) GetModule() *program.Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *CompileModuleResponse) GetDeps() *Dependencies {
	if x != nil {
		return x.Deps
	}
	return nil
}

type ListLangsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLangsRequest) Reset() {
	*x = ListLangsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLangsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLangsRequest) ProtoMessage() {}

func (x *ListLangsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLangsRequest.ProtoReflect.Descriptor instead.
func (*ListLangsRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{8}
}

type CatalogLang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exts []string `protobuf:"bytes,1,rep,name=exts,proto3" json:"exts,omitempty"`
}

func (x *CatalogLang) Reset() {
	*x = CatalogLang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalogLang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogLang) ProtoMessage() {}

func (x *CatalogLang) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalogLang.ProtoReflect.Descriptor instead.
func (*CatalogLang) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{9}
}

func (x *CatalogLang) GetExts() []string {
	if x != nil {
		return x.Exts
	}
	return nil
}

type ListLangsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Langs map[string]*CatalogLang `protobuf:"bytes,1,rep,name=langs,proto3" json:"langs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListLangsResponse) Reset() {
	*x = ListLangsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langsvc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLangsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLangsResponse) ProtoMessage() {}

func (x *ListLangsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langsvc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLangsResponse.ProtoReflect.Descriptor instead.
func (*ListLangsResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langsvc_proto_rawDescGZIP(), []int{10}
}

func (x *ListLangsResponse) GetLangs() map[string]*CatalogLang {
	if x != nil {
		return x.Langs
	}
	return nil
}

var File_langsvc_langsvc_proto protoreflect.FileDescriptor

var file_langsvc_langsvc_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74,
	0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x05, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x55, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x65, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x04, 0x64, 0x65, 0x70, 0x73, 0x22,
	0x62, 0x0a, 0x21, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x76, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x22, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x40, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x24, 0xfa, 0x42, 0x21, 0x92, 0x01, 0x1e, 0x22, 0x1c, 0x72, 0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x08, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x12,
	0x36, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x65, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x04,
	0x64, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x04, 0x64, 0x65,
	0x70, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78, 0x74, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x05, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x9a, 0x01, 0x08, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x1a, 0x59, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74,
	0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x32, 0xe4, 0x04, 0x0a, 0x04, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b,
	0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0xb7, 0x01, 0x0a, 0x1a, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x35, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x49, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x7d, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x7d, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
	0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x86, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x6f, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x69,
	0x64, 0x6c, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_langsvc_langsvc_proto_rawDescOnce sync.Once
	file_langsvc_langsvc_proto_rawDescData = file_langsvc_langsvc_proto_rawDesc
)

func file_langsvc_langsvc_proto_rawDescGZIP() []byte {
	file_langsvc_langsvc_proto_rawDescOnce.Do(func() {
		file_langsvc_langsvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_langsvc_langsvc_proto_rawDescData)
	})
	return file_langsvc_langsvc_proto_rawDescData
}

var file_langsvc_langsvc_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_langsvc_langsvc_proto_goTypes = []interface{}{
	(*Cycle)(nil),                              // 0: autokitteh.langsvc.Cycle
	(*Dependencies)(nil),                       // 1: autokitteh.langsvc.Dependencies
	(*GetModuleDependenciesRequest)(nil),       // 2: autokitteh.langsvc.GetModuleDependenciesRequest
	(*GetModuleDependenciesResponse)(nil),      // 3: autokitteh.langsvc.GetModuleDependenciesResponse
	(*IsCompilerVersionSupportedRequest)(nil),  // 4: autokitteh.langsvc.IsCompilerVersionSupportedRequest
	(*IsCompilerVersionSupportedResponse)(nil), // 5: autokitteh.langsvc.IsCompilerVersionSupportedResponse
	(*CompileModuleRequest)(nil),               // 6: autokitteh.langsvc.CompileModuleRequest
	(*CompileModuleResponse)(nil),              // 7: autokitteh.langsvc.CompileModuleResponse
	(*ListLangsRequest)(nil),                   // 8: autokitteh.langsvc.ListLangsRequest
	(*CatalogLang)(nil),                        // 9: autokitteh.langsvc.CatalogLang
	(*ListLangsResponse)(nil),                  // 10: autokitteh.langsvc.ListLangsResponse
	nil,                                        // 11: autokitteh.langsvc.ListLangsResponse.LangsEntry
	(*program.Path)(nil),                       // 12: autokitteh.program.Path
	(*program.Module)(nil),                     // 13: autokitteh.program.Module
}
var file_langsvc_langsvc_proto_depIdxs = []int32{
	12, // 0: autokitteh.langsvc.Cycle.paths:type_name -> autokitteh.program.Path
	12, // 1: autokitteh.langsvc.Dependencies.ready:type_name -> autokitteh.program.Path
	12, // 2: autokitteh.langsvc.Dependencies.missing:type_name -> autokitteh.program.Path
	0,  // 3: autokitteh.langsvc.Dependencies.cycles:type_name -> autokitteh.langsvc.Cycle
	13, // 4: autokitteh.langsvc.GetModuleDependenciesRequest.module:type_name -> autokitteh.program.Module
	1,  // 5: autokitteh.langsvc.GetModuleDependenciesResponse.deps:type_name -> autokitteh.langsvc.Dependencies
	12, // 6: autokitteh.langsvc.CompileModuleRequest.path:type_name -> autokitteh.program.Path
	13, // 7: autokitteh.langsvc.CompileModuleResponse.module:type_name -> autokitteh.program.Module
	1,  // 8: autokitteh.langsvc.CompileModuleResponse.deps:type_name -> autokitteh.langsvc.Dependencies
	11, // 9: autokitteh.langsvc.ListLangsResponse.langs:type_name -> autokitteh.langsvc.ListLangsResponse.LangsEntry
	9,  // 10: autokitteh.langsvc.ListLangsResponse.LangsEntry.value:type_name -> autokitteh.langsvc.CatalogLang
	8,  // 11: autokitteh.langsvc.Lang.ListLangs:input_type -> autokitteh.langsvc.ListLangsRequest
	4,  // 12: autokitteh.langsvc.Lang.IsCompilerVersionSupported:input_type -> autokitteh.langsvc.IsCompilerVersionSupportedRequest
	2,  // 13: autokitteh.langsvc.Lang.GetModuleDependencies:input_type -> autokitteh.langsvc.GetModuleDependenciesRequest
	6,  // 14: autokitteh.langsvc.Lang.CompileModule:input_type -> autokitteh.langsvc.CompileModuleRequest
	10, // 15: autokitteh.langsvc.Lang.ListLangs:output_type -> autokitteh.langsvc.ListLangsResponse
	5,  // 16: autokitteh.langsvc.Lang.IsCompilerVersionSupported:output_type -> autokitteh.langsvc.IsCompilerVersionSupportedResponse
	3,  // 17: autokitteh.langsvc.Lang.GetModuleDependencies:output_type -> autokitteh.langsvc.GetModuleDependenciesResponse
	7,  // 18: autokitteh.langsvc.Lang.CompileModule:output_type -> autokitteh.langsvc.CompileModuleResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_langsvc_langsvc_proto_init() }
func file_langsvc_langsvc_proto_init() {
	if File_langsvc_langsvc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_langsvc_langsvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dependencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModuleDependenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModuleDependenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCompilerVersionSupportedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCompilerVersionSupportedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileModuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileModuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLangsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatalogLang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langsvc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLangsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_langsvc_langsvc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_langsvc_langsvc_proto_goTypes,
		DependencyIndexes: file_langsvc_langsvc_proto_depIdxs,
		MessageInfos:      file_langsvc_langsvc_proto_msgTypes,
	}.Build()
	File_langsvc_langsvc_proto = out.File
	file_langsvc_langsvc_proto_rawDesc = nil
	file_langsvc_langsvc_proto_goTypes = nil
	file_langsvc_langsvc_proto_depIdxs = nil
}
