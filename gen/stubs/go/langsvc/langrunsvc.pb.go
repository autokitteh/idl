// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: langsvc/langrunsvc.proto

package langsvc

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	lang "go.autokitteh.dev/idl/lang"
	program "go.autokitteh.dev/idl/program"
	values "go.autokitteh.dev/idl/values"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope    string                   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Id       string                   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Module   *program.Module          `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	Predecls map[string]*values.Value `protobuf:"bytes,4,rep,name=predecls,proto3" json:"predecls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{0}
}

func (x *RunRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *RunRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunRequest) GetModule() *program.Module {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *RunRequest) GetPredecls() map[string]*values.Value {
	if x != nil {
		return x.Predecls
	}
	return nil
}

type CallFunctionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId  string                   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	F      *values.Value            `protobuf:"bytes,2,opt,name=f,proto3" json:"f,omitempty"`
	Args   []*values.Value          `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Kwargs map[string]*values.Value `protobuf:"bytes,4,rep,name=kwargs,proto3" json:"kwargs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CallFunctionRequest) Reset() {
	*x = CallFunctionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallFunctionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallFunctionRequest) ProtoMessage() {}

func (x *CallFunctionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallFunctionRequest.ProtoReflect.Descriptor instead.
func (*CallFunctionRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{1}
}

func (x *CallFunctionRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *CallFunctionRequest) GetF() *values.Value {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *CallFunctionRequest) GetArgs() []*values.Value {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CallFunctionRequest) GetKwargs() map[string]*values.Value {
	if x != nil {
		return x.Kwargs
	}
	return nil
}

type RunGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId      string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	GetSummary bool   `protobuf:"varint,2,opt,name=get_summary,json=getSummary,proto3" json:"get_summary,omitempty"`
}

func (x *RunGetRequest) Reset() {
	*x = RunGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunGetRequest) ProtoMessage() {}

func (x *RunGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunGetRequest.ProtoReflect.Descriptor instead.
func (*RunGetRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{2}
}

func (x *RunGetRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunGetRequest) GetGetSummary() bool {
	if x != nil {
		return x.GetSummary
	}
	return false
}

type RunDiscardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RunDiscardRequest) Reset() {
	*x = RunDiscardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDiscardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDiscardRequest) ProtoMessage() {}

func (x *RunDiscardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDiscardRequest.ProtoReflect.Descriptor instead.
func (*RunDiscardRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{3}
}

func (x *RunDiscardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RunDiscardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunDiscardResponse) Reset() {
	*x = RunDiscardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDiscardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDiscardResponse) ProtoMessage() {}

func (x *RunDiscardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDiscardResponse.ProtoReflect.Descriptor instead.
func (*RunDiscardResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{4}
}

type RunGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *lang.RunSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *RunGetResponse) Reset() {
	*x = RunGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunGetResponse) ProtoMessage() {}

func (x *RunGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunGetResponse.ProtoReflect.Descriptor instead.
func (*RunGetResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{5}
}

func (x *RunGetResponse) GetSummary() *lang.RunSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type RunUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	T     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=t,proto3" json:"t,omitempty"`
	Prev  *lang.RunState         `protobuf:"bytes,3,opt,name=prev,proto3" json:"prev,omitempty"` // will be nil on first update.
	Next  *lang.RunState         `protobuf:"bytes,4,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *RunUpdate) Reset() {
	*x = RunUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunUpdate) ProtoMessage() {}

func (x *RunUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunUpdate.ProtoReflect.Descriptor instead.
func (*RunUpdate) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{6}
}

func (x *RunUpdate) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunUpdate) GetT() *timestamppb.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *RunUpdate) GetPrev() *lang.RunState {
	if x != nil {
		return x.Prev
	}
	return nil
}

func (x *RunUpdate) GetNext() *lang.RunState {
	if x != nil {
		return x.Next
	}
	return nil
}

type RunCallReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId  string         `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Error  *program.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Retval *values.Value  `protobuf:"bytes,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (x *RunCallReturnRequest) Reset() {
	*x = RunCallReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCallReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCallReturnRequest) ProtoMessage() {}

func (x *RunCallReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCallReturnRequest.ProtoReflect.Descriptor instead.
func (*RunCallReturnRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{7}
}

func (x *RunCallReturnRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunCallReturnRequest) GetError() *program.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RunCallReturnRequest) GetRetval() *values.Value {
	if x != nil {
		return x.Retval
	}
	return nil
}

type RunCallReturnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCallReturnResponse) Reset() {
	*x = RunCallReturnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCallReturnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCallReturnResponse) ProtoMessage() {}

func (x *RunCallReturnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCallReturnResponse.ProtoReflect.Descriptor instead.
func (*RunCallReturnResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{8}
}

type RunLoadReturnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId      string                   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Error      *program.Error           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	RunSummary *lang.RunSummary         `protobuf:"bytes,3,opt,name=run_summary,json=runSummary,proto3" json:"run_summary,omitempty"`
	Values     map[string]*values.Value `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RunLoadReturnRequest) Reset() {
	*x = RunLoadReturnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunLoadReturnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLoadReturnRequest) ProtoMessage() {}

func (x *RunLoadReturnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLoadReturnRequest.ProtoReflect.Descriptor instead.
func (*RunLoadReturnRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{9}
}

func (x *RunLoadReturnRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunLoadReturnRequest) GetError() *program.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RunLoadReturnRequest) GetRunSummary() *lang.RunSummary {
	if x != nil {
		return x.RunSummary
	}
	return nil
}

func (x *RunLoadReturnRequest) GetValues() map[string]*values.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type RunLoadReturnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunLoadReturnResponse) Reset() {
	*x = RunLoadReturnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunLoadReturnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLoadReturnResponse) ProtoMessage() {}

func (x *RunLoadReturnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLoadReturnResponse.ProtoReflect.Descriptor instead.
func (*RunLoadReturnResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{10}
}

type RunCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId  string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RunCancelRequest) Reset() {
	*x = RunCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCancelRequest) ProtoMessage() {}

func (x *RunCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCancelRequest.ProtoReflect.Descriptor instead.
func (*RunCancelRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{11}
}

func (x *RunCancelRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunCancelRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RunCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunCancelResponse) Reset() {
	*x = RunCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCancelResponse) ProtoMessage() {}

func (x *RunCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCancelResponse.ProtoReflect.Descriptor instead.
func (*RunCancelResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{12}
}

type ListRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRunsRequest) Reset() {
	*x = ListRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsRequest) ProtoMessage() {}

func (x *ListRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsRequest.ProtoReflect.Descriptor instead.
func (*ListRunsRequest) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{13}
}

type ListRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListRun) Reset() {
	*x = ListRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRun) ProtoMessage() {}

func (x *ListRun) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRun.ProtoReflect.Descriptor instead.
func (*ListRun) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{14}
}

func (x *ListRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListRuns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runs []*ListRun `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *ListRuns) Reset() {
	*x = ListRuns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuns) ProtoMessage() {}

func (x *ListRuns) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuns.ProtoReflect.Descriptor instead.
func (*ListRuns) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{15}
}

func (x *ListRuns) GetRuns() []*ListRun {
	if x != nil {
		return x.Runs
	}
	return nil
}

type ListRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States map[string]*ListRuns `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListRunsResponse) Reset() {
	*x = ListRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_langsvc_langrunsvc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsResponse) ProtoMessage() {}

func (x *ListRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_langsvc_langrunsvc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsResponse.ProtoReflect.Descriptor instead.
func (*ListRunsResponse) Descriptor() ([]byte, []int) {
	return file_langsvc_langrunsvc_proto_rawDescGZIP(), []int{16}
}

func (x *ListRunsResponse) GetStates() map[string]*ListRuns {
	if x != nil {
		return x.States
	}
	return nil
}

var File_langsvc_langrunsvc_proto protoreflect.FileDescriptor

var file_langsvc_langrunsvc_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x72, 0x75,
	0x6e, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x72, 0x75, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x02, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32,
	0x0d, 0x5e, 0x52, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x70, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x26, 0xfa, 0x42, 0x23, 0x9a, 0x01, 0x20, 0x18, 0x01, 0x22, 0x1c, 0x72, 0x1a, 0x32, 0x18,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x08, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63,
	0x6c, 0x73, 0x1a, 0x55, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65,
	0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x02, 0x0a, 0x13, 0x43, 0x61,
	0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x52, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x01, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x01, 0x66,
	0x12, 0x2c, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x73,
	0x0a, 0x06, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x73, 0x76, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x9a, 0x01, 0x20, 0x18, 0x01, 0x22, 0x1c, 0x72,
	0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x6b, 0x77, 0x61,
	0x72, 0x67, 0x73, 0x1a, 0x53, 0x0a, 0x0b, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f,
	0x32, 0x0d, 0x5e, 0x52, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x2e, 0x5d, 0x2b, 0x24, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x65, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x39, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32,
	0x0d, 0x5e, 0x52, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x52, 0x75,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x22, 0xd4, 0x01, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x52, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x01,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x01, 0x74,
	0x12, 0x2d, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12,
	0x37, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x52, 0x75, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x52, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x74, 0x76, 0x61,
	0x6c, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x14, 0x52,
	0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x52, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74,
	0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x74, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x9a, 0x01, 0x20, 0x18, 0x01, 0x22,
	0x1c, 0x72, 0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x75,
	0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0d,
	0x5e, 0x52, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x2e, 0x5d, 0x2b, 0x24, 0x52, 0x05, 0x72,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11,
	0x52, 0x75, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12,
	0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11,
	0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x52, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x2e, 0x5d, 0x2b,
	0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x73, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75,
	0x6e, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x9a, 0x01,
	0x08, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x1a, 0x57, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa3, 0x08, 0x0a, 0x07, 0x4c,
	0x61, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x12, 0x65, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x1e, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73,
	0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73,
	0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61,
	0x6e, 0x67, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x8e, 0x01,
	0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x73, 0x76, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x2f, 0x72, 0x75,
	0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x2d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x74,
	0x0a, 0x06, 0x52, 0x75, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b,
	0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x75,
	0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63,
	0x2e, 0x52, 0x75, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74,
	0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e,
	0x67, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0x98, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63,
	0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x2f, 0x72, 0x75,
	0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x61, 0x64,
	0x2d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x52,
	0x75, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b,
	0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x75,
	0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x73, 0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x2f, 0x72, 0x75, 0x6e,
	0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73,
	0x12, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e,
	0x67, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74,
	0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76,
	0x63, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x73,
	0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65,
	0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x69, 0x64, 0x6c, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x76,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_langsvc_langrunsvc_proto_rawDescOnce sync.Once
	file_langsvc_langrunsvc_proto_rawDescData = file_langsvc_langrunsvc_proto_rawDesc
)

func file_langsvc_langrunsvc_proto_rawDescGZIP() []byte {
	file_langsvc_langrunsvc_proto_rawDescOnce.Do(func() {
		file_langsvc_langrunsvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_langsvc_langrunsvc_proto_rawDescData)
	})
	return file_langsvc_langrunsvc_proto_rawDescData
}

var file_langsvc_langrunsvc_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_langsvc_langrunsvc_proto_goTypes = []interface{}{
	(*RunRequest)(nil),            // 0: autokitteh.langsvc.RunRequest
	(*CallFunctionRequest)(nil),   // 1: autokitteh.langsvc.CallFunctionRequest
	(*RunGetRequest)(nil),         // 2: autokitteh.langsvc.RunGetRequest
	(*RunDiscardRequest)(nil),     // 3: autokitteh.langsvc.RunDiscardRequest
	(*RunDiscardResponse)(nil),    // 4: autokitteh.langsvc.RunDiscardResponse
	(*RunGetResponse)(nil),        // 5: autokitteh.langsvc.RunGetResponse
	(*RunUpdate)(nil),             // 6: autokitteh.langsvc.RunUpdate
	(*RunCallReturnRequest)(nil),  // 7: autokitteh.langsvc.RunCallReturnRequest
	(*RunCallReturnResponse)(nil), // 8: autokitteh.langsvc.RunCallReturnResponse
	(*RunLoadReturnRequest)(nil),  // 9: autokitteh.langsvc.RunLoadReturnRequest
	(*RunLoadReturnResponse)(nil), // 10: autokitteh.langsvc.RunLoadReturnResponse
	(*RunCancelRequest)(nil),      // 11: autokitteh.langsvc.RunCancelRequest
	(*RunCancelResponse)(nil),     // 12: autokitteh.langsvc.RunCancelResponse
	(*ListRunsRequest)(nil),       // 13: autokitteh.langsvc.ListRunsRequest
	(*ListRun)(nil),               // 14: autokitteh.langsvc.ListRun
	(*ListRuns)(nil),              // 15: autokitteh.langsvc.ListRuns
	(*ListRunsResponse)(nil),      // 16: autokitteh.langsvc.ListRunsResponse
	nil,                           // 17: autokitteh.langsvc.RunRequest.PredeclsEntry
	nil,                           // 18: autokitteh.langsvc.CallFunctionRequest.KwargsEntry
	nil,                           // 19: autokitteh.langsvc.RunLoadReturnRequest.ValuesEntry
	nil,                           // 20: autokitteh.langsvc.ListRunsResponse.StatesEntry
	(*program.Module)(nil),        // 21: autokitteh.program.Module
	(*values.Value)(nil),          // 22: autokitteh.values.Value
	(*lang.RunSummary)(nil),       // 23: autokitteh.lang.RunSummary
	(*timestamppb.Timestamp)(nil), // 24: google.protobuf.Timestamp
	(*lang.RunState)(nil),         // 25: autokitteh.lang.RunState
	(*program.Error)(nil),         // 26: autokitteh.program.Error
}
var file_langsvc_langrunsvc_proto_depIdxs = []int32{
	21, // 0: autokitteh.langsvc.RunRequest.module:type_name -> autokitteh.program.Module
	17, // 1: autokitteh.langsvc.RunRequest.predecls:type_name -> autokitteh.langsvc.RunRequest.PredeclsEntry
	22, // 2: autokitteh.langsvc.CallFunctionRequest.f:type_name -> autokitteh.values.Value
	22, // 3: autokitteh.langsvc.CallFunctionRequest.args:type_name -> autokitteh.values.Value
	18, // 4: autokitteh.langsvc.CallFunctionRequest.kwargs:type_name -> autokitteh.langsvc.CallFunctionRequest.KwargsEntry
	23, // 5: autokitteh.langsvc.RunGetResponse.summary:type_name -> autokitteh.lang.RunSummary
	24, // 6: autokitteh.langsvc.RunUpdate.t:type_name -> google.protobuf.Timestamp
	25, // 7: autokitteh.langsvc.RunUpdate.prev:type_name -> autokitteh.lang.RunState
	25, // 8: autokitteh.langsvc.RunUpdate.next:type_name -> autokitteh.lang.RunState
	26, // 9: autokitteh.langsvc.RunCallReturnRequest.error:type_name -> autokitteh.program.Error
	22, // 10: autokitteh.langsvc.RunCallReturnRequest.retval:type_name -> autokitteh.values.Value
	26, // 11: autokitteh.langsvc.RunLoadReturnRequest.error:type_name -> autokitteh.program.Error
	23, // 12: autokitteh.langsvc.RunLoadReturnRequest.run_summary:type_name -> autokitteh.lang.RunSummary
	19, // 13: autokitteh.langsvc.RunLoadReturnRequest.values:type_name -> autokitteh.langsvc.RunLoadReturnRequest.ValuesEntry
	14, // 14: autokitteh.langsvc.ListRuns.runs:type_name -> autokitteh.langsvc.ListRun
	20, // 15: autokitteh.langsvc.ListRunsResponse.states:type_name -> autokitteh.langsvc.ListRunsResponse.StatesEntry
	22, // 16: autokitteh.langsvc.RunRequest.PredeclsEntry.value:type_name -> autokitteh.values.Value
	22, // 17: autokitteh.langsvc.CallFunctionRequest.KwargsEntry.value:type_name -> autokitteh.values.Value
	22, // 18: autokitteh.langsvc.RunLoadReturnRequest.ValuesEntry.value:type_name -> autokitteh.values.Value
	15, // 19: autokitteh.langsvc.ListRunsResponse.StatesEntry.value:type_name -> autokitteh.langsvc.ListRuns
	0,  // 20: autokitteh.langsvc.LangRun.Run:input_type -> autokitteh.langsvc.RunRequest
	1,  // 21: autokitteh.langsvc.LangRun.CallFunction:input_type -> autokitteh.langsvc.CallFunctionRequest
	2,  // 22: autokitteh.langsvc.LangRun.RunGet:input_type -> autokitteh.langsvc.RunGetRequest
	7,  // 23: autokitteh.langsvc.LangRun.RunCallReturn:input_type -> autokitteh.langsvc.RunCallReturnRequest
	9,  // 24: autokitteh.langsvc.LangRun.RunLoadReturn:input_type -> autokitteh.langsvc.RunLoadReturnRequest
	11, // 25: autokitteh.langsvc.LangRun.RunCancel:input_type -> autokitteh.langsvc.RunCancelRequest
	13, // 26: autokitteh.langsvc.LangRun.ListRuns:input_type -> autokitteh.langsvc.ListRunsRequest
	3,  // 27: autokitteh.langsvc.LangRun.RunDiscard:input_type -> autokitteh.langsvc.RunDiscardRequest
	6,  // 28: autokitteh.langsvc.LangRun.Run:output_type -> autokitteh.langsvc.RunUpdate
	6,  // 29: autokitteh.langsvc.LangRun.CallFunction:output_type -> autokitteh.langsvc.RunUpdate
	5,  // 30: autokitteh.langsvc.LangRun.RunGet:output_type -> autokitteh.langsvc.RunGetResponse
	8,  // 31: autokitteh.langsvc.LangRun.RunCallReturn:output_type -> autokitteh.langsvc.RunCallReturnResponse
	10, // 32: autokitteh.langsvc.LangRun.RunLoadReturn:output_type -> autokitteh.langsvc.RunLoadReturnResponse
	12, // 33: autokitteh.langsvc.LangRun.RunCancel:output_type -> autokitteh.langsvc.RunCancelResponse
	16, // 34: autokitteh.langsvc.LangRun.ListRuns:output_type -> autokitteh.langsvc.ListRunsResponse
	4,  // 35: autokitteh.langsvc.LangRun.RunDiscard:output_type -> autokitteh.langsvc.RunDiscardResponse
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_langsvc_langrunsvc_proto_init() }
func file_langsvc_langrunsvc_proto_init() {
	if File_langsvc_langrunsvc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_langsvc_langrunsvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallFunctionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDiscardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDiscardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCallReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCallReturnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunLoadReturnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunLoadReturnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_langsvc_langrunsvc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_langsvc_langrunsvc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_langsvc_langrunsvc_proto_goTypes,
		DependencyIndexes: file_langsvc_langrunsvc_proto_depIdxs,
		MessageInfos:      file_langsvc_langrunsvc_proto_msgTypes,
	}.Build()
	File_langsvc_langrunsvc_proto = out.File
	file_langsvc_langrunsvc_proto_rawDesc = nil
	file_langsvc_langrunsvc_proto_goTypes = nil
	file_langsvc_langrunsvc_proto_depIdxs = nil
}
