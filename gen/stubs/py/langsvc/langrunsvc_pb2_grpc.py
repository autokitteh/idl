# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from langsvc import langrunsvc_pb2 as langsvc_dot_langrunsvc__pb2


class LangRunStub(object):
    """
    IMPORTANT: All functions are running on the same server RunModule
    was called from.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Run = channel.unary_stream(
                '/autokitteh.langsvc.LangRun/Run',
                request_serializer=langsvc_dot_langrunsvc__pb2.RunRequest.SerializeToString,
                response_deserializer=langsvc_dot_langrunsvc__pb2.RunUpdate.FromString,
                )
        self.CallFunction = channel.unary_stream(
                '/autokitteh.langsvc.LangRun/CallFunction',
                request_serializer=langsvc_dot_langrunsvc__pb2.CallFunctionRequest.SerializeToString,
                response_deserializer=langsvc_dot_langrunsvc__pb2.RunUpdate.FromString,
                )
        self.RunGet = channel.unary_unary(
                '/autokitteh.langsvc.LangRun/RunGet',
                request_serializer=langsvc_dot_langrunsvc__pb2.RunGetRequest.SerializeToString,
                response_deserializer=langsvc_dot_langrunsvc__pb2.RunGetResponse.FromString,
                )
        self.RunCallReturn = channel.unary_unary(
                '/autokitteh.langsvc.LangRun/RunCallReturn',
                request_serializer=langsvc_dot_langrunsvc__pb2.RunCallReturnRequest.SerializeToString,
                response_deserializer=langsvc_dot_langrunsvc__pb2.RunCallReturnResponse.FromString,
                )
        self.RunLoadReturn = channel.unary_unary(
                '/autokitteh.langsvc.LangRun/RunLoadReturn',
                request_serializer=langsvc_dot_langrunsvc__pb2.RunLoadReturnRequest.SerializeToString,
                response_deserializer=langsvc_dot_langrunsvc__pb2.RunLoadReturnResponse.FromString,
                )
        self.RunCancel = channel.unary_unary(
                '/autokitteh.langsvc.LangRun/RunCancel',
                request_serializer=langsvc_dot_langrunsvc__pb2.RunCancelRequest.SerializeToString,
                response_deserializer=langsvc_dot_langrunsvc__pb2.RunCancelResponse.FromString,
                )
        self.ListRuns = channel.unary_unary(
                '/autokitteh.langsvc.LangRun/ListRuns',
                request_serializer=langsvc_dot_langrunsvc__pb2.ListRunsRequest.SerializeToString,
                response_deserializer=langsvc_dot_langrunsvc__pb2.ListRunsResponse.FromString,
                )
        self.RunDiscard = channel.unary_unary(
                '/autokitteh.langsvc.LangRun/RunDiscard',
                request_serializer=langsvc_dot_langrunsvc__pb2.RunDiscardRequest.SerializeToString,
                response_deserializer=langsvc_dot_langrunsvc__pb2.RunDiscardResponse.FromString,
                )


class LangRunServicer(object):
    """
    IMPORTANT: All functions are running on the same server RunModule
    was called from.

    """

    def Run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCallReturn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunLoadReturn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunCancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRuns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunDiscard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LangRunServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Run': grpc.unary_stream_rpc_method_handler(
                    servicer.Run,
                    request_deserializer=langsvc_dot_langrunsvc__pb2.RunRequest.FromString,
                    response_serializer=langsvc_dot_langrunsvc__pb2.RunUpdate.SerializeToString,
            ),
            'CallFunction': grpc.unary_stream_rpc_method_handler(
                    servicer.CallFunction,
                    request_deserializer=langsvc_dot_langrunsvc__pb2.CallFunctionRequest.FromString,
                    response_serializer=langsvc_dot_langrunsvc__pb2.RunUpdate.SerializeToString,
            ),
            'RunGet': grpc.unary_unary_rpc_method_handler(
                    servicer.RunGet,
                    request_deserializer=langsvc_dot_langrunsvc__pb2.RunGetRequest.FromString,
                    response_serializer=langsvc_dot_langrunsvc__pb2.RunGetResponse.SerializeToString,
            ),
            'RunCallReturn': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCallReturn,
                    request_deserializer=langsvc_dot_langrunsvc__pb2.RunCallReturnRequest.FromString,
                    response_serializer=langsvc_dot_langrunsvc__pb2.RunCallReturnResponse.SerializeToString,
            ),
            'RunLoadReturn': grpc.unary_unary_rpc_method_handler(
                    servicer.RunLoadReturn,
                    request_deserializer=langsvc_dot_langrunsvc__pb2.RunLoadReturnRequest.FromString,
                    response_serializer=langsvc_dot_langrunsvc__pb2.RunLoadReturnResponse.SerializeToString,
            ),
            'RunCancel': grpc.unary_unary_rpc_method_handler(
                    servicer.RunCancel,
                    request_deserializer=langsvc_dot_langrunsvc__pb2.RunCancelRequest.FromString,
                    response_serializer=langsvc_dot_langrunsvc__pb2.RunCancelResponse.SerializeToString,
            ),
            'ListRuns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRuns,
                    request_deserializer=langsvc_dot_langrunsvc__pb2.ListRunsRequest.FromString,
                    response_serializer=langsvc_dot_langrunsvc__pb2.ListRunsResponse.SerializeToString,
            ),
            'RunDiscard': grpc.unary_unary_rpc_method_handler(
                    servicer.RunDiscard,
                    request_deserializer=langsvc_dot_langrunsvc__pb2.RunDiscardRequest.FromString,
                    response_serializer=langsvc_dot_langrunsvc__pb2.RunDiscardResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'autokitteh.langsvc.LangRun', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LangRun(object):
    """
    IMPORTANT: All functions are running on the same server RunModule
    was called from.

    """

    @staticmethod
    def Run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/autokitteh.langsvc.LangRun/Run',
            langsvc_dot_langrunsvc__pb2.RunRequest.SerializeToString,
            langsvc_dot_langrunsvc__pb2.RunUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CallFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/autokitteh.langsvc.LangRun/CallFunction',
            langsvc_dot_langrunsvc__pb2.CallFunctionRequest.SerializeToString,
            langsvc_dot_langrunsvc__pb2.RunUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.langsvc.LangRun/RunGet',
            langsvc_dot_langrunsvc__pb2.RunGetRequest.SerializeToString,
            langsvc_dot_langrunsvc__pb2.RunGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunCallReturn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.langsvc.LangRun/RunCallReturn',
            langsvc_dot_langrunsvc__pb2.RunCallReturnRequest.SerializeToString,
            langsvc_dot_langrunsvc__pb2.RunCallReturnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunLoadReturn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.langsvc.LangRun/RunLoadReturn',
            langsvc_dot_langrunsvc__pb2.RunLoadReturnRequest.SerializeToString,
            langsvc_dot_langrunsvc__pb2.RunLoadReturnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunCancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.langsvc.LangRun/RunCancel',
            langsvc_dot_langrunsvc__pb2.RunCancelRequest.SerializeToString,
            langsvc_dot_langrunsvc__pb2.RunCancelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.langsvc.LangRun/ListRuns',
            langsvc_dot_langrunsvc__pb2.ListRunsRequest.SerializeToString,
            langsvc_dot_langrunsvc__pb2.ListRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunDiscard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.langsvc.LangRun/RunDiscard',
            langsvc_dot_langrunsvc__pb2.RunDiscardRequest.SerializeToString,
            langsvc_dot_langrunsvc__pb2.RunDiscardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
