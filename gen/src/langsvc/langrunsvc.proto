syntax = "proto3";

package autokitteh.langsvc;

option go_package = "go.autokitteh.dev/idl/langsvc";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

import "lang/run.proto";
import "program/error.proto";
import "program/program.proto";
import "values/values.proto";


message RunRequest {
  string                    scope    = 1 ;
  string                    id       = 2 [(validate.rules).string.pattern = "^R[0-9a-f.]+$"];
  program.Module            module   = 3 [(validate.rules).message.required = true];
  map<string, values.Value> predecls = 4 [(validate.rules).map={no_sparse: true, keys:{string:{pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$"}}}];
}

message CallFunctionRequest {
  string                    run_id = 1 [(validate.rules).string.pattern = "^R[0-9a-f.]+$"];
  values.Value              f      = 2 [(validate.rules).message.required = true];
  repeated values.Value     args   = 3;
  map<string, values.Value> kwargs = 4 [(validate.rules).map={no_sparse: true, keys:{string:{pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$"}}}];
}

message RunGetRequest {
  string run_id      = 1 [(validate.rules).string.pattern = "^R[0-9a-f.]+$"];
  bool   get_summary = 2;
}

message RunDiscardRequest {
  string id = 1 [(validate.rules).string.pattern = "^R[0-9a-f.]+$"];
}

message RunDiscardResponse {}

message RunGetResponse {
  lang.RunSummary summary = 1;
}

message RunUpdate {
  string                    run_id = 1 [(validate.rules).string.pattern = "^R[0-9a-f.]+$"];
  google.protobuf.Timestamp t      = 2 [(validate.rules).timestamp.required = true];
  lang.RunState             prev   = 3; // will be nil on first update.
  lang.RunState             next   = 4 [(validate.rules).message.required = true];
}

message RunCallReturnRequest {
  string                run_id = 1 [(validate.rules).string.pattern = "^R[0-9a-f.]+$"];
  program.Error         error  = 2;
  values.Value          retval = 3;
}

message RunCallReturnResponse {}

message RunLoadReturnRequest {
  string                    run_id      = 1 [(validate.rules).string.pattern = "^R[0-9a-f.]+$"];
  program.Error             error       = 2;
  lang.RunSummary           run_summary = 3;
  map<string, values.Value> values      = 4 [(validate.rules).map={no_sparse: true, keys:{string:{pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$"}}}];
}

message RunLoadReturnResponse {}

message RunCancelRequest {
  string run_id = 1 [(validate.rules).string.pattern = "^R[0-9a-f.]+$"];
  string reason = 2;
}

message RunCancelResponse {}

message ListRunsRequest {}

message ListRun {
  string id = 1 [(validate.rules).string.pattern = "^R[0-9a-f.]+$"];
}

message ListRuns {
  repeated ListRun runs = 1;
}

message ListRunsResponse {
  map<string, ListRuns> states = 1 [(validate.rules).map={no_sparse: true, keys:{string:{min_len: 1}}}];
}

service LangRun {
  //
  // IMPORTANT: All functions are running on the same server RunModule
  // was called from.
  //

  rpc Run(RunRequest) returns (stream RunUpdate) {
    option (google.api.http) = {
      post: "/api/v1/langs/runs",
      body: "*"
    };
  }

  rpc CallFunction(CallFunctionRequest) returns (stream RunUpdate) {
    option (google.api.http) = {
      post: "/api/v1/langs/runs/{run_id}/call-function",
      body: "*"
    };
  }

  rpc RunGet(RunGetRequest) returns (RunGetResponse) {
    option (google.api.http) = {
      get: "/api/v1/langs/runs/{run_id}",
    };
  }

  rpc RunCallReturn(RunCallReturnRequest) returns (RunCallReturnResponse) {
    option (google.api.http) = {
      post: "/api/v1/langs/runs/{run_id}/call-return",
      body: "*"
    };
  }

  rpc RunLoadReturn(RunLoadReturnRequest) returns (RunLoadReturnResponse) {
    option (google.api.http) = {
      post: "/api/v1/langs/runs/{run_id}/load-return",
      body: "*"
    };
  }

  rpc RunCancel(RunCancelRequest) returns (RunCancelResponse) {
    option (google.api.http) = {
      post: "/api/v1/langs/runs/{run_id}/cancel",
      body: "*"
    };
  }

  rpc ListRuns(ListRunsRequest) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/api/v1/langs/runs",
    };
  }

  rpc RunDiscard(RunDiscardRequest) returns (RunDiscardResponse) {
    option (google.api.http) = {
      delete: "/api/v1/langs/runs",
    };
  }
}
