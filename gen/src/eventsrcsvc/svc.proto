syntax = "proto3";

package autokitteh.eventsrcsvc;

option go_package = "go.autokitteh.dev/idl/eventsrcsvc";

import "validate/validate.proto";

import "eventsrc/src.proto";


message AddEventSourceRequest {
  string                       id       = 1 [(validate.rules).string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$"];
  eventsrc.EventSourceSettings settings = 2;
}

message AddEventSourceResponse {}

message UpdateEventSourceRequest {
  string                       id       = 1 [(validate.rules).string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$"];
  eventsrc.EventSourceSettings settings = 2 [(validate.rules).message.required = true];
}

message UpdateEventSourceResponse {}

message GetEventSourceRequest {
  string id = 1 [(validate.rules).string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$"];
}

message GetEventSourceResponse {
  eventsrc.EventSource src = 1 [(validate.rules).message.required = true];
}

message ListEventSourcesRequest {
  string account_name = 1 [(validate.rules).string = {ignore_empty:true, pattern: "^[a-zA-Z][0-9a-zA-Z_-]+$" }];
}

message ListEventSourcesResponse {
  repeated string ids = 1 [(validate.rules).repeated.items.string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$"];
}

message GetEventSourceProjectBindingsRequest {
  string id                 = 1 [(validate.rules).string = {ignore_empty:true, pattern: "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$" }]; // optional filter.
  string project_id         = 3 [(validate.rules).string = {ignore_empty:true, pattern: "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$" }]; // optional filter
  string name               = 4 [(validate.rules).string = {ignore_empty:true, pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$" }]; // optional filter
  string association_token  = 5; // optional filter
  bool   include_unapproved = 6; // if true, include also unapproved.
}

message GetEventSourceProjectBindingsResponse {
  repeated eventsrc.EventSourceProjectBinding bindings = 1 [(validate.rules).repeated.items.message.required = true];
}

message AddEventSourceProjectBindingRequest {
  string                                     src_id            = 1 [(validate.rules).string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$"];
  string                                     project_id        = 3 [(validate.rules).string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$"];
  string                                     name              = 4 [(validate.rules).string = {ignore_empty:true, pattern: "^[a-zA-Z_][a-zA-Z0-9_]*$" }];
  string                                     association_token = 5;
  eventsrc.EventSourceProjectBindingSettings settings          = 6;
  string                                     source_config     = 7;
  bool                                       approved          = 8;
}

message AddEventSourceProjectBindingResponse {}

message UpdateEventSourceProjectBindingRequest {
  string                                     src_id     = 1 [(validate.rules).string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$"];
  string                                     project_id = 2 [(validate.rules).string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$"];
  string                                     name       = 3 [(validate.rules).string.pattern = "^[a-zA-Z_][a-zA-Z0-9_]*$"];
  bool                                       approved   = 4;
  eventsrc.EventSourceProjectBindingSettings settings   = 5;
}

message UpdateEventSourceProjectBindingResponse {}

service EventSources {
  rpc AddEventSource(AddEventSourceRequest) returns (AddEventSourceResponse);

  rpc UpdateEventSource(UpdateEventSourceRequest) returns (UpdateEventSourceResponse);

  rpc GetEventSource(GetEventSourceRequest) returns (GetEventSourceResponse);

  rpc AddEventSourceProjectBinding(AddEventSourceProjectBindingRequest) returns (AddEventSourceProjectBindingResponse);

  rpc UpdateEventSourceProjectBinding(UpdateEventSourceProjectBindingRequest) returns (UpdateEventSourceProjectBindingResponse);

  rpc GetEventSourceProjectBindings(GetEventSourceProjectBindingsRequest) returns (GetEventSourceProjectBindingsResponse);

  rpc ListEventSources(ListEventSourcesRequest) returns (ListEventSourcesResponse);
}
