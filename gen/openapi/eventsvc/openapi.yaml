# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: Events API
    version: 0.0.1
paths:
    /api/v1/events:
        get:
            tags:
                - Events
            operationId: Events_ListEvents
            parameters:
                - name: projectId
                  in: query
                  schema:
                    type: string
                - name: ofs
                  in: query
                  schema:
                    type: integer
                    format: uint32
                - name: len
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListEventsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - Events
            operationId: Events_IngestEvent
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IngestEventRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IngestEventResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/events/{id}:
        get:
            tags:
                - Events
            operationId: Events_GetEvent
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetEventResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/events/{id}/projects/{projectId}/state:
        get:
            tags:
                - Events
            operationId: Events_GetEventStateForProject
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                - name: projectId
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetEventStateForProjectResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - Events
            operationId: Events_UpdateEventStateForProject
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                - name: projectId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: state.error.runSummary.prints
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: state.error.error
                  in: query
                  schema:
                    type: string
                - name: state.ignored.reason
                  in: query
                  schema:
                    type: string
                - name: state.waiting.names
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: state.waiting.runSummary.prints
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateEventStateForProjectResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/events/{id}/state:
        get:
            tags:
                - Events
            operationId: Events_GetEventState
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetEventStateResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - Events
            operationId: Events_UpdateEventState
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                - name: state.ignored.reason
                  in: query
                  schema:
                    type: string
                - name: state.error.error
                  in: query
                  schema:
                    type: string
                - name: state.processing.projectIds
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: state.processing.ignoredProjectIds
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: state.processed.projectIds
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: state.processed.attnProjectIds
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateEventStateResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /api/v1/projects/{projectId}/waiting:
        get:
            tags:
                - Events
            operationId: Events_GetProjectWaitingEvents
            parameters:
                - name: projectId
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetProjectWaitingEventsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        Boolean:
            type: object
            properties:
                v:
                    type: boolean
        Bytes:
            type: object
            properties:
                v:
                    type: string
                    format: bytes
        Call:
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                issuer:
                    type: string
                flags:
                    type: object
                    additionalProperties:
                        type: boolean
        CallFrame:
            type: object
            properties:
                name:
                    type: string
                loc:
                    $ref: '#/components/schemas/Location'
        CallReturnedRunUpdate:
            type: object
            properties:
                error:
                    $ref: '#/components/schemas/Error'
                retval:
                    $ref: '#/components/schemas/Value'
        CallWaitRunState:
            type: object
            properties:
                call:
                    $ref: '#/components/schemas/Value'
                args:
                    type: array
                    items:
                        $ref: '#/components/schemas/Value'
                kws:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/Value'
                runSummary:
                    $ref: '#/components/schemas/RunSummary'
        CanceledRunState:
            type: object
            properties:
                reason:
                    type: string
                callstack:
                    type: array
                    items:
                        $ref: '#/components/schemas/CallFrame'
        ClientErrorRunState:
            type: object
            properties:
                error:
                    type: string
        CompletedRunState:
            type: object
            properties:
                vals:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/Value'
        Dict:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/DictItem'
        DictItem:
            type: object
            properties:
                k:
                    $ref: '#/components/schemas/Value'
                v:
                    $ref: '#/components/schemas/Value'
        Duration:
            type: object
            properties:
                seconds:
                    type: integer
                    description: 'Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years'
                    format: int64
                nanos:
                    type: integer
                    description: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
                    format: int32
            description: 'A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years. # Examples Example 1: Compute Duration from two Timestamps in pseudo code.     Timestamp start = ...;     Timestamp end = ...;     Duration duration = ...;     duration.seconds = end.seconds - start.seconds;     duration.nanos = end.nanos - start.nanos;     if (duration.seconds < 0 && duration.nanos > 0) {       duration.seconds += 1;       duration.nanos -= 1000000000;     } else if (duration.seconds > 0 && duration.nanos < 0) {       duration.seconds -= 1;       duration.nanos += 1000000000;     } Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.     Timestamp start = ...;     Duration duration = ...;     Timestamp end = ...;     end.seconds = start.seconds + duration.seconds;     end.nanos = start.nanos + duration.nanos;     if (end.nanos < 0) {       end.seconds -= 1;       end.nanos += 1000000000;     } else if (end.nanos >= 1000000000) {       end.seconds += 1;       end.nanos -= 1000000000;     } Example 3: Compute Duration from datetime.timedelta in Python.     td = datetime.timedelta(days=3, minutes=10)     duration = Duration()     duration.FromTimedelta(td) # JSON Mapping In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix "s" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should be expressed in JSON format as "3.000000001s", and 3 seconds and 1 microsecond should be expressed in JSON format as "3.000001s".'
        Error:
            type: object
            properties:
                msg:
                    type: string
                type:
                    type: string
                callstack:
                    type: array
                    items:
                        $ref: '#/components/schemas/CallFrame'
                next:
                    $ref: '#/components/schemas/Error'
        ErrorEventState:
            type: object
            properties:
                error:
                    type: string
        ErrorProjectEventState:
            type: object
            properties:
                runSummary:
                    $ref: '#/components/schemas/RunSummary'
                error:
                    type: string
        ErrorRunState:
            type: object
            properties:
                error:
                    $ref: '#/components/schemas/Error'
        Event:
            type: object
            properties:
                t:
                    type: string
                    format: date-time
                id:
                    type: string
                srcId:
                    type: string
                associationToken:
                    type: string
                originalId:
                    type: string
                type:
                    type: string
                data:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/Value'
                memo:
                    type: object
                    additionalProperties:
                        type: string
        EventState:
            type: object
            properties:
                ignored:
                    $ref: '#/components/schemas/IgnoredEventState'
                error:
                    $ref: '#/components/schemas/ErrorEventState'
                pending:
                    $ref: '#/components/schemas/PendingEventState'
                processing:
                    $ref: '#/components/schemas/ProcessingEventState'
                processed:
                    $ref: '#/components/schemas/ProcessedEventState'
        EventStateRecord:
            type: object
            properties:
                t:
                    type: string
                    format: date-time
                state:
                    $ref: '#/components/schemas/EventState'
        Float:
            type: object
            properties:
                v:
                    type: number
                    format: float
        Function:
            type: object
            properties:
                funcId:
                    type: string
                lang:
                    type: string
                scope:
                    type: string
                sig:
                    $ref: '#/components/schemas/FunctionSignature'
        FunctionSignature:
            type: object
            properties:
                name:
                    type: string
                doc:
                    type: string
                nArgs:
                    type: integer
                    format: uint32
                nKwonlyargs:
                    type: integer
                    format: uint32
                argsNames:
                    type: array
                    items:
                        type: string
                hasVarargs:
                    type: boolean
                hasKwargs:
                    type: boolean
        GetEventResponse:
            type: object
            properties:
                event:
                    $ref: '#/components/schemas/Event'
        GetEventStateForProjectResponse:
            type: object
            properties:
                log:
                    type: array
                    items:
                        $ref: '#/components/schemas/ProjectEventStateRecord'
        GetEventStateResponse:
            type: object
            properties:
                log:
                    type: array
                    items:
                        $ref: '#/components/schemas/EventStateRecord'
        GetProjectWaitingEventsResponse:
            type: object
            properties:
                eventIds:
                    type: array
                    items:
                        type: string
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        IgnoredEventState:
            type: object
            properties:
                reason:
                    type: string
        IgnoredProjectEventState:
            type: object
            properties:
                reason:
                    type: string
        IngestEventRequest:
            type: object
            properties:
                srcId:
                    type: string
                associationToken:
                    type: string
                type:
                    type: string
                data:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/Value'
                originalId:
                    type: string
                memo:
                    type: object
                    additionalProperties:
                        type: string
                    description: for caller use only - not used in event processing.
        IngestEventResponse:
            type: object
            properties:
                id:
                    type: string
        Integer:
            type: object
            properties:
                v:
                    type: integer
                    format: int64
        List:
            type: object
            properties:
                vs:
                    type: array
                    items:
                        $ref: '#/components/schemas/Value'
            description: For Starlark, will be used for Tuple in return values.
        ListEventRecord:
            type: object
            properties:
                event:
                    $ref: '#/components/schemas/Event'
                states:
                    type: array
                    items:
                        $ref: '#/components/schemas/EventStateRecord'
        ListEventsResponse:
            type: object
            properties:
                records:
                    type: array
                    items:
                        $ref: '#/components/schemas/ListEventRecord'
        LoadReturnedRunUpdate:
            type: object
            properties:
                error:
                    $ref: '#/components/schemas/Error'
                runSummary:
                    $ref: '#/components/schemas/RunSummary'
                vals:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/Value'
        LoadWaitRunState:
            type: object
            properties:
                path:
                    $ref: '#/components/schemas/Path'
        Location:
            type: object
            properties:
                path:
                    $ref: '#/components/schemas/Path'
                line:
                    type: integer
                    format: int32
                column:
                    type: integer
                    format: int32
        Module:
            type: object
            properties:
                lang:
                    type: string
                predecls:
                    type: array
                    items:
                        type: string
                compilerVersion:
                    type: string
                sourcePath:
                    $ref: '#/components/schemas/Path'
                compiledCode:
                    type: string
                    format: bytes
        None:
            type: object
            properties: {}
        Path:
            type: object
            properties:
                scheme:
                    type: string
                path:
                    type: string
                version:
                    type: string
        PendingEventState:
            type: object
            properties: {}
        PendingProjectEventState:
            type: object
            properties: {}
        PrintRunUpdate:
            type: object
            properties:
                text:
                    type: string
        ProcessedEventState:
            type: object
            properties:
                projectIds:
                    type: array
                    items:
                        type: string
                attnProjectIds:
                    type: array
                    items:
                        type: string
        ProcessedProjectEventState:
            type: object
            properties:
                runSummary:
                    $ref: '#/components/schemas/RunSummary'
        ProcessingEventState:
            type: object
            properties:
                projectIds:
                    type: array
                    items:
                        type: string
                ignoredProjectIds:
                    type: array
                    items:
                        type: string
        ProcessingProjectEventState:
            type: object
            properties: {}
        ProjectEventState:
            type: object
            properties:
                error:
                    $ref: '#/components/schemas/ErrorProjectEventState'
                ignored:
                    $ref: '#/components/schemas/IgnoredProjectEventState'
                pending:
                    $ref: '#/components/schemas/PendingProjectEventState'
                processing:
                    $ref: '#/components/schemas/ProcessingProjectEventState'
                waiting:
                    $ref: '#/components/schemas/WaitingProjectEventState'
                processed:
                    $ref: '#/components/schemas/ProcessedProjectEventState'
        ProjectEventStateRecord:
            type: object
            properties:
                t:
                    type: string
                    format: date-time
                state:
                    $ref: '#/components/schemas/ProjectEventState'
        RunState:
            type: object
            properties:
                running:
                    $ref: '#/components/schemas/RunningRunState'
                call:
                    $ref: '#/components/schemas/CallWaitRunState'
                load:
                    $ref: '#/components/schemas/LoadWaitRunState'
                completed:
                    $ref: '#/components/schemas/CompletedRunState'
                canceled:
                    $ref: '#/components/schemas/CanceledRunState'
                error:
                    $ref: '#/components/schemas/ErrorRunState'
                print:
                    $ref: '#/components/schemas/PrintRunUpdate'
                callret:
                    $ref: '#/components/schemas/CallReturnedRunUpdate'
                loadret:
                    $ref: '#/components/schemas/LoadReturnedRunUpdate'
                clientError:
                    $ref: '#/components/schemas/ClientErrorRunState'
        RunStateLogRecord:
            type: object
            properties:
                t:
                    type: string
                    format: date-time
                state:
                    $ref: '#/components/schemas/RunState'
                source:
                    $ref: '#/components/schemas/Path'
        RunSummary:
            type: object
            properties:
                log:
                    type: array
                    items:
                        $ref: '#/components/schemas/RunStateLogRecord'
                prints:
                    type: array
                    items:
                        type: string
        RunningRunState:
            type: object
            properties: {}
        Set:
            type: object
            properties:
                vs:
                    type: array
                    items:
                        $ref: '#/components/schemas/Value'
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        String:
            type: object
            properties:
                v:
                    type: string
        Struct:
            type: object
            properties:
                ctor:
                    $ref: '#/components/schemas/Value'
                fields:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/Value'
        Symbol:
            type: object
            properties:
                name:
                    type: string
        Time:
            type: object
            properties:
                t:
                    type: string
                    format: date-time
        UpdateEventStateForProjectResponse:
            type: object
            properties: {}
        UpdateEventStateResponse:
            type: object
            properties: {}
        Value:
            type: object
            properties:
                none:
                    $ref: '#/components/schemas/None'
                string:
                    $ref: '#/components/schemas/String'
                integer:
                    $ref: '#/components/schemas/Integer'
                boolean:
                    $ref: '#/components/schemas/Boolean'
                list:
                    $ref: '#/components/schemas/List'
                dict:
                    $ref: '#/components/schemas/Dict'
                float:
                    $ref: '#/components/schemas/Float'
                set:
                    $ref: '#/components/schemas/Set'
                bytes:
                    $ref: '#/components/schemas/Bytes'
                time:
                    $ref: '#/components/schemas/Time'
                duration:
                    $ref: '#/components/schemas/Duration'
                symbol:
                    $ref: '#/components/schemas/Symbol'
                struct:
                    $ref: '#/components/schemas/Struct'
                module:
                    $ref: '#/components/schemas/Module'
                function:
                    $ref: '#/components/schemas/Function'
                call:
                    $ref: '#/components/schemas/Call'
        WaitingProjectEventState:
            type: object
            properties:
                names:
                    type: array
                    items:
                        type: string
                runSummary:
                    $ref: '#/components/schemas/RunSummary'
tags:
    - name: Events
