syntax = "proto3";

package autokitteh.litterbox;

option go_package = "go.autokitteh.dev/idl/go/litterboxsvc";

import "google/api/annotations.proto";
import "validate/validate.proto";

import "event/project_state.proto";
import "event/track.proto";
import "values/values.proto";


message SetupRequest {
  string             id             = 1 {{ MaybeLitterBoxID }};
  map<string, bytes> files_map      = 2; // name -> file.
  string             main_file_name = 3;
  bytes              files_txtar    = 4; // in txtar format (see https://pkg.go.dev/golang.org/x/tools/txtar).
}

message SetupResponse {
  string id = 1 {{ LitterBoxID }};
}

message ScoopRequest {
  string id = 1 {{ LitterBoxID }};
}

message ScoopResponse {}

message LitterBoxEvent {
  string                    src         = 1 {{ VarName }};
  string                    type        = 2;
  map<string, values.Value> data        = 3 {{ VarMap }};
  string                    original_id = 4;
}

message EventRequest {
  string         id     = 1 {{ LitterBoxID }};
  LitterBoxEvent event  = 2 [(validate.rules).message.required = true];
}

message RunRequest {
  string id     = 1 {{ LitterBoxID }};
}

service LitterBox {
  rpc Setup(SetupRequest) returns (SetupResponse) {
    option (google.api.http) = {
      post: "/api/v1/litterboxes",
      body: "files_txtar"
      additional_bindings: [
        {
          post: "/api/v1/litterboxes/{id}"
          body: "files_txtar"
        }
      ]
    };
  }

  rpc Event(EventRequest) returns (stream event.TrackIngestEventUpdate) {
    option (google.api.http) = {
      post: "/api/v1/litterboxes/{id}/events",
      body: "event"
    };
  }

  // Enable live sources and track all incoming events.
  rpc Run(RunRequest) returns (stream event.TrackIngestEventUpdate) {
    option (google.api.http) = {
      post: "/api/v1/litterboxes/{id}/run"
    };
  }

  rpc Scoop(ScoopRequest) returns (ScoopResponse) {
    option (google.api.http) = {
      post: "/api/v1/litterboxes/{id}/scoop"
    };
  }
}
