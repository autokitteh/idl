syntax = "proto3";

package autokitteh.litterbox;

option go_package = "go.autokitteh.dev/idl/go/litterboxsvc";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

import "lang/run.proto";
import "values/values.proto";


message SetupRequest {}

message SetupResponse {
  string id = 1 {{ LitterBoxID }};
}

message ScoopRequest {
  string id = 1 {{ LitterBoxID }};
}

message ScoopResponse {}

message SyntheticEvent {
  string                    src_binding = 1 {{ VarName }};
  string                    type        = 2;
  map<string, values.Value> data        = 3 {{ VarMap }};
  string                    original_id = 4;
}

message RunRequest {
  // If id is empty, run will setup, use and scoop the litterbox by itself.
  string         id     = 1 {{ MaybeLitterBoxID }};
  string         source = 2;
  SyntheticEvent event  = 3 [(validate.rules).message.required = true];
}

message RunUpdate {
  google.protobuf.Timestamp t     = 1 [(validate.rules).timestamp.required = true];
  string                    id    = 2 {{ LitterBoxID }};
  lang.RunState             state = 3 [(validate.rules).message.required = true];
}

service LitterBox {
  rpc Setup(SetupRequest) returns (SetupResponse) {
    option (google.api.http) = {
      post: "/api/v1/litterboxes",
      body: "*"
    };
  }

  rpc Run(RunRequest) returns (stream RunUpdate) {
    option (google.api.http) = {
      post: "/api/v1/litterboxes/{id}/run",
      body: "*"
    };
  }

  rpc Scoop(ScoopRequest) returns (ScoopResponse) {
    option (google.api.http) = {
      post: "/api/v1/litterboxes/{id}/scoop",
      body: "*"
    };
  }
}
