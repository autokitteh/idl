syntax = "proto3";

package autokitteh.programsvc;

option go_package = "go.autokitteh.dev/idl/go/programsvc";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

import "program/program.proto";


message File {
  program.Path              path       = 1;
  bytes                     content    = 2;
  google.protobuf.Timestamp fetched_at = 3;
}

// Update the program store.
// Will first try `files`. If `only_files` if false, will try to
// find the files itself.
message UpdateRequest {
  string             project_id = 1 [(validate.rules).string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$"];
  program.Path       main_path  = 2;
  repeated File      files      = 3 [(validate.rules).repeated.items.message.required = true];
  bool               only_files = 4; // do not try to fetch files that are not in `files`.
}

message UpdateResponse {
}

message GetRequest {
  string                project_id = 1 [(validate.rules).string.pattern = "^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$"];
  repeated program.Path paths      = 2 [(validate.rules).repeated.items.message.required = true];
}

message GetResponse {
  repeated File files      = 1 [(validate.rules).repeated.items.message.required = true];
  bool          no_content = 2; // just list, don't fetch actual content.
}

service Projects {
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      post: "/api/v1/programs/{project_id}",
      body: "*"
    };
  }

  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      post: "/api/v1/programs/{project_id}",
    };
  }
}
