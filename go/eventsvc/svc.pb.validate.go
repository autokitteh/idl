// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventsvc/svc.proto

package eventsvc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on IngestEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IngestEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventId

	if !_IngestEventRequest_SrcId_Pattern.MatchString(m.GetSrcId()) {
		return IngestEventRequestValidationError{
			field:  "SrcId",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	// no validation rules for AssociationToken

	// no validation rules for Type

	for key, val := range m.GetData() {
		_ = val

		if val == nil {
			return IngestEventRequestValidationError{
				field:  fmt.Sprintf("Data[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_IngestEventRequest_Data_Pattern.MatchString(key) {
			return IngestEventRequestValidationError{
				field:  fmt.Sprintf("Data[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IngestEventRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OriginalId

	for key, val := range m.GetMemo() {
		_ = val

		if utf8.RuneCountInString(key) < 1 {
			return IngestEventRequestValidationError{
				field:  fmt.Sprintf("Memo[%v]", key),
				reason: "value length must be at least 1 runes",
			}
		}

		// no validation rules for Memo[key]
	}

	return nil
}

// IngestEventRequestValidationError is the validation error returned by
// IngestEventRequest.Validate if the designated constraints aren't met.
type IngestEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngestEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngestEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngestEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngestEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngestEventRequestValidationError) ErrorName() string {
	return "IngestEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IngestEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngestEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngestEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngestEventRequestValidationError{}

var _IngestEventRequest_SrcId_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")

var _IngestEventRequest_Data_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on IngestEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IngestEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	if !_IngestEventResponse_Id_Pattern.MatchString(m.GetId()) {
		return IngestEventResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^E[0-9a-f]+$\"",
		}
	}

	return nil
}

// IngestEventResponseValidationError is the validation error returned by
// IngestEventResponse.Validate if the designated constraints aren't met.
type IngestEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngestEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngestEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngestEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngestEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngestEventResponseValidationError) ErrorName() string {
	return "IngestEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IngestEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngestEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngestEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngestEventResponseValidationError{}

var _IngestEventResponse_Id_Pattern = regexp.MustCompile("^E[0-9a-f]+$")

// Validate checks the field values on GetEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetEventRequest_Id_Pattern.MatchString(m.GetId()) {
		return GetEventRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^E[0-9a-f]+$\"",
		}
	}

	return nil
}

// GetEventRequestValidationError is the validation error returned by
// GetEventRequest.Validate if the designated constraints aren't met.
type GetEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventRequestValidationError) ErrorName() string { return "GetEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventRequestValidationError{}

var _GetEventRequest_Id_Pattern = regexp.MustCompile("^E[0-9a-f]+$")

// Validate checks the field values on GetEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEvent() == nil {
		return GetEventResponseValidationError{
			field:  "Event",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetEventResponseValidationError is the validation error returned by
// GetEventResponse.Validate if the designated constraints aren't met.
type GetEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventResponseValidationError) ErrorName() string { return "GetEventResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventResponseValidationError{}

// Validate checks the field values on GetEventStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventStateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetEventStateRequest_Id_Pattern.MatchString(m.GetId()) {
		return GetEventStateRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^E[0-9a-f]+$\"",
		}
	}

	return nil
}

// GetEventStateRequestValidationError is the validation error returned by
// GetEventStateRequest.Validate if the designated constraints aren't met.
type GetEventStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventStateRequestValidationError) ErrorName() string {
	return "GetEventStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventStateRequestValidationError{}

var _GetEventStateRequest_Id_Pattern = regexp.MustCompile("^E[0-9a-f]+$")

// Validate checks the field values on GetEventStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventStateResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLog() {
		_, _ = idx, item

		if item == nil {
			return GetEventStateResponseValidationError{
				field:  fmt.Sprintf("Log[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventStateResponseValidationError{
					field:  fmt.Sprintf("Log[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEventStateResponseValidationError is the validation error returned by
// GetEventStateResponse.Validate if the designated constraints aren't met.
type GetEventStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventStateResponseValidationError) ErrorName() string {
	return "GetEventStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventStateResponseValidationError{}

// Validate checks the field values on GetEventStateForProjectRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventStateForProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetEventStateForProjectRequest_Id_Pattern.MatchString(m.GetId()) {
		return GetEventStateForProjectRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^E[0-9a-f]+$\"",
		}
	}

	if !_GetEventStateForProjectRequest_ProjectId_Pattern.MatchString(m.GetProjectId()) {
		return GetEventStateForProjectRequestValidationError{
			field:  "ProjectId",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
		}
	}

	return nil
}

// GetEventStateForProjectRequestValidationError is the validation error
// returned by GetEventStateForProjectRequest.Validate if the designated
// constraints aren't met.
type GetEventStateForProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventStateForProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventStateForProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventStateForProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventStateForProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventStateForProjectRequestValidationError) ErrorName() string {
	return "GetEventStateForProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventStateForProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventStateForProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventStateForProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventStateForProjectRequestValidationError{}

var _GetEventStateForProjectRequest_Id_Pattern = regexp.MustCompile("^E[0-9a-f]+$")

var _GetEventStateForProjectRequest_ProjectId_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")

// Validate checks the field values on GetEventStateForProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventStateForProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLog() {
		_, _ = idx, item

		if item == nil {
			return GetEventStateForProjectResponseValidationError{
				field:  fmt.Sprintf("Log[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventStateForProjectResponseValidationError{
					field:  fmt.Sprintf("Log[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEventStateForProjectResponseValidationError is the validation error
// returned by GetEventStateForProjectResponse.Validate if the designated
// constraints aren't met.
type GetEventStateForProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventStateForProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventStateForProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventStateForProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventStateForProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventStateForProjectResponseValidationError) ErrorName() string {
	return "GetEventStateForProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventStateForProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventStateForProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventStateForProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventStateForProjectResponseValidationError{}

// Validate checks the field values on UpdateEventStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEventStateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateEventStateRequest_Id_Pattern.MatchString(m.GetId()) {
		return UpdateEventStateRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^E[0-9a-f]+$\"",
		}
	}

	if m.GetState() == nil {
		return UpdateEventStateRequestValidationError{
			field:  "State",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEventStateRequestValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateEventStateRequestValidationError is the validation error returned by
// UpdateEventStateRequest.Validate if the designated constraints aren't met.
type UpdateEventStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventStateRequestValidationError) ErrorName() string {
	return "UpdateEventStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventStateRequestValidationError{}

var _UpdateEventStateRequest_Id_Pattern = regexp.MustCompile("^E[0-9a-f]+$")

// Validate checks the field values on UpdateEventStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEventStateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateEventStateResponseValidationError is the validation error returned by
// UpdateEventStateResponse.Validate if the designated constraints aren't met.
type UpdateEventStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventStateResponseValidationError) ErrorName() string {
	return "UpdateEventStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventStateResponseValidationError{}

// Validate checks the field values on UpdateEventStateForProjectRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateEventStateForProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_UpdateEventStateForProjectRequest_Id_Pattern.MatchString(m.GetId()) {
		return UpdateEventStateForProjectRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^E[0-9a-f]+$\"",
		}
	}

	if !_UpdateEventStateForProjectRequest_ProjectId_Pattern.MatchString(m.GetProjectId()) {
		return UpdateEventStateForProjectRequestValidationError{
			field:  "ProjectId",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
		}
	}

	if m.GetState() == nil {
		return UpdateEventStateForProjectRequestValidationError{
			field:  "State",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEventStateForProjectRequestValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateEventStateForProjectRequestValidationError is the validation error
// returned by UpdateEventStateForProjectRequest.Validate if the designated
// constraints aren't met.
type UpdateEventStateForProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventStateForProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventStateForProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventStateForProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventStateForProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventStateForProjectRequestValidationError) ErrorName() string {
	return "UpdateEventStateForProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventStateForProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventStateForProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventStateForProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventStateForProjectRequestValidationError{}

var _UpdateEventStateForProjectRequest_Id_Pattern = regexp.MustCompile("^E[0-9a-f]+$")

var _UpdateEventStateForProjectRequest_ProjectId_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")

// Validate checks the field values on UpdateEventStateForProjectResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateEventStateForProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateEventStateForProjectResponseValidationError is the validation error
// returned by UpdateEventStateForProjectResponse.Validate if the designated
// constraints aren't met.
type UpdateEventStateForProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventStateForProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventStateForProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventStateForProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventStateForProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventStateForProjectResponseValidationError) ErrorName() string {
	return "UpdateEventStateForProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventStateForProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventStateForProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventStateForProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventStateForProjectResponseValidationError{}

// Validate checks the field values on ListEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for Ofs

	// no validation rules for Len

	return nil
}

// ListEventsRequestValidationError is the validation error returned by
// ListEventsRequest.Validate if the designated constraints aren't met.
type ListEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsRequestValidationError) ErrorName() string {
	return "ListEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsRequestValidationError{}

// Validate checks the field values on ListEventRecord with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListEventRecord) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEvent() == nil {
		return ListEventRecordValidationError{
			field:  "Event",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventRecordValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStates() {
		_, _ = idx, item

		if item == nil {
			return ListEventRecordValidationError{
				field:  fmt.Sprintf("States[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventRecordValidationError{
					field:  fmt.Sprintf("States[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEventRecordValidationError is the validation error returned by
// ListEventRecord.Validate if the designated constraints aren't met.
type ListEventRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventRecordValidationError) ErrorName() string { return "ListEventRecordValidationError" }

// Error satisfies the builtin error interface
func (e ListEventRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventRecordValidationError{}

// Validate checks the field values on ListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEventsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if item == nil {
			return ListEventsResponseValidationError{
				field:  fmt.Sprintf("Records[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventsResponseValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEventsResponseValidationError is the validation error returned by
// ListEventsResponse.Validate if the designated constraints aren't met.
type ListEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsResponseValidationError) ErrorName() string {
	return "ListEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsResponseValidationError{}

// Validate checks the field values on GetProjectWaitingEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectWaitingEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() != "" {

		if !_GetProjectWaitingEventsRequest_ProjectId_Pattern.MatchString(m.GetProjectId()) {
			return GetProjectWaitingEventsRequestValidationError{
				field:  "ProjectId",
				reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
			}
		}

	}

	return nil
}

// GetProjectWaitingEventsRequestValidationError is the validation error
// returned by GetProjectWaitingEventsRequest.Validate if the designated
// constraints aren't met.
type GetProjectWaitingEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectWaitingEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectWaitingEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectWaitingEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectWaitingEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectWaitingEventsRequestValidationError) ErrorName() string {
	return "GetProjectWaitingEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectWaitingEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectWaitingEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectWaitingEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectWaitingEventsRequestValidationError{}

var _GetProjectWaitingEventsRequest_ProjectId_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")

// Validate checks the field values on GetProjectWaitingEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectWaitingEventsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEventIds() {
		_, _ = idx, item

		if !_GetProjectWaitingEventsResponse_EventIds_Pattern.MatchString(item) {
			return GetProjectWaitingEventsResponseValidationError{
				field:  fmt.Sprintf("EventIds[%v]", idx),
				reason: "value does not match regex pattern \"^E[0-9a-f]+$\"",
			}
		}

	}

	return nil
}

// GetProjectWaitingEventsResponseValidationError is the validation error
// returned by GetProjectWaitingEventsResponse.Validate if the designated
// constraints aren't met.
type GetProjectWaitingEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectWaitingEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectWaitingEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectWaitingEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectWaitingEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectWaitingEventsResponseValidationError) ErrorName() string {
	return "GetProjectWaitingEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectWaitingEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectWaitingEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectWaitingEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectWaitingEventsResponseValidationError{}

var _GetProjectWaitingEventsResponse_EventIds_Pattern = regexp.MustCompile("^E[0-9a-f]+$")

// Validate checks the field values on MonitorProjectEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MonitorProjectEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_MonitorProjectEventsRequest_ProjectId_Pattern.MatchString(m.GetProjectId()) {
		return MonitorProjectEventsRequestValidationError{
			field:  "ProjectId",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
		}
	}

	return nil
}

// MonitorProjectEventsRequestValidationError is the validation error returned
// by MonitorProjectEventsRequest.Validate if the designated constraints
// aren't met.
type MonitorProjectEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorProjectEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorProjectEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorProjectEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorProjectEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorProjectEventsRequestValidationError) ErrorName() string {
	return "MonitorProjectEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MonitorProjectEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitorProjectEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorProjectEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorProjectEventsRequestValidationError{}

var _MonitorProjectEventsRequest_ProjectId_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")
