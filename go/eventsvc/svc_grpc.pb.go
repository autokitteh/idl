// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package eventsvc

import (
	context "context"
	event "go.autokitteh.dev/idl/go/event"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error)
	TrackIngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (Events_TrackIngestEventClient, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	GetEventState(ctx context.Context, in *GetEventStateRequest, opts ...grpc.CallOption) (*GetEventStateResponse, error)
	UpdateEventState(ctx context.Context, in *UpdateEventStateRequest, opts ...grpc.CallOption) (*UpdateEventStateResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	GetEventStateForProject(ctx context.Context, in *GetEventStateForProjectRequest, opts ...grpc.CallOption) (*GetEventStateForProjectResponse, error)
	UpdateEventStateForProject(ctx context.Context, in *UpdateEventStateForProjectRequest, opts ...grpc.CallOption) (*UpdateEventStateForProjectResponse, error)
	GetProjectWaitingEvents(ctx context.Context, in *GetProjectWaitingEventsRequest, opts ...grpc.CallOption) (*GetProjectWaitingEventsResponse, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error) {
	out := new(IngestEventResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.eventsvc.Events/IngestEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) TrackIngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (Events_TrackIngestEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Events_ServiceDesc.Streams[0], "/autokitteh.eventsvc.Events/TrackIngestEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsTrackIngestEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Events_TrackIngestEventClient interface {
	Recv() (*event.TrackIngestEventUpdate, error)
	grpc.ClientStream
}

type eventsTrackIngestEventClient struct {
	grpc.ClientStream
}

func (x *eventsTrackIngestEventClient) Recv() (*event.TrackIngestEventUpdate, error) {
	m := new(event.TrackIngestEventUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventsClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.eventsvc.Events/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetEventState(ctx context.Context, in *GetEventStateRequest, opts ...grpc.CallOption) (*GetEventStateResponse, error) {
	out := new(GetEventStateResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.eventsvc.Events/GetEventState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) UpdateEventState(ctx context.Context, in *UpdateEventStateRequest, opts ...grpc.CallOption) (*UpdateEventStateResponse, error) {
	out := new(UpdateEventStateResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.eventsvc.Events/UpdateEventState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.eventsvc.Events/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetEventStateForProject(ctx context.Context, in *GetEventStateForProjectRequest, opts ...grpc.CallOption) (*GetEventStateForProjectResponse, error) {
	out := new(GetEventStateForProjectResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.eventsvc.Events/GetEventStateForProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) UpdateEventStateForProject(ctx context.Context, in *UpdateEventStateForProjectRequest, opts ...grpc.CallOption) (*UpdateEventStateForProjectResponse, error) {
	out := new(UpdateEventStateForProjectResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.eventsvc.Events/UpdateEventStateForProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetProjectWaitingEvents(ctx context.Context, in *GetProjectWaitingEventsRequest, opts ...grpc.CallOption) (*GetProjectWaitingEventsResponse, error) {
	out := new(GetProjectWaitingEventsResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.eventsvc.Events/GetProjectWaitingEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility
type EventsServer interface {
	IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error)
	TrackIngestEvent(*IngestEventRequest, Events_TrackIngestEventServer) error
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	GetEventState(context.Context, *GetEventStateRequest) (*GetEventStateResponse, error)
	UpdateEventState(context.Context, *UpdateEventStateRequest) (*UpdateEventStateResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	GetEventStateForProject(context.Context, *GetEventStateForProjectRequest) (*GetEventStateForProjectResponse, error)
	UpdateEventStateForProject(context.Context, *UpdateEventStateForProjectRequest) (*UpdateEventStateForProjectResponse, error)
	GetProjectWaitingEvents(context.Context, *GetProjectWaitingEventsRequest) (*GetProjectWaitingEventsResponse, error)
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (UnimplementedEventsServer) IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestEvent not implemented")
}
func (UnimplementedEventsServer) TrackIngestEvent(*IngestEventRequest, Events_TrackIngestEventServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackIngestEvent not implemented")
}
func (UnimplementedEventsServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventsServer) GetEventState(context.Context, *GetEventStateRequest) (*GetEventStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventState not implemented")
}
func (UnimplementedEventsServer) UpdateEventState(context.Context, *UpdateEventStateRequest) (*UpdateEventStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventState not implemented")
}
func (UnimplementedEventsServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedEventsServer) GetEventStateForProject(context.Context, *GetEventStateForProjectRequest) (*GetEventStateForProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventStateForProject not implemented")
}
func (UnimplementedEventsServer) UpdateEventStateForProject(context.Context, *UpdateEventStateForProjectRequest) (*UpdateEventStateForProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventStateForProject not implemented")
}
func (UnimplementedEventsServer) GetProjectWaitingEvents(context.Context, *GetProjectWaitingEventsRequest) (*GetProjectWaitingEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectWaitingEvents not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_IngestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).IngestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.eventsvc.Events/IngestEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).IngestEvent(ctx, req.(*IngestEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_TrackIngestEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IngestEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServer).TrackIngestEvent(m, &eventsTrackIngestEventServer{stream})
}

type Events_TrackIngestEventServer interface {
	Send(*event.TrackIngestEventUpdate) error
	grpc.ServerStream
}

type eventsTrackIngestEventServer struct {
	grpc.ServerStream
}

func (x *eventsTrackIngestEventServer) Send(m *event.TrackIngestEventUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Events_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.eventsvc.Events/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetEventState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetEventState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.eventsvc.Events/GetEventState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetEventState(ctx, req.(*GetEventStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_UpdateEventState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).UpdateEventState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.eventsvc.Events/UpdateEventState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).UpdateEventState(ctx, req.(*UpdateEventStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.eventsvc.Events/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetEventStateForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventStateForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetEventStateForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.eventsvc.Events/GetEventStateForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetEventStateForProject(ctx, req.(*GetEventStateForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_UpdateEventStateForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventStateForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).UpdateEventStateForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.eventsvc.Events/UpdateEventStateForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).UpdateEventStateForProject(ctx, req.(*UpdateEventStateForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetProjectWaitingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWaitingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetProjectWaitingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.eventsvc.Events/GetProjectWaitingEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetProjectWaitingEvents(ctx, req.(*GetProjectWaitingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.eventsvc.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestEvent",
			Handler:    _Events_IngestEvent_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Events_GetEvent_Handler,
		},
		{
			MethodName: "GetEventState",
			Handler:    _Events_GetEventState_Handler,
		},
		{
			MethodName: "UpdateEventState",
			Handler:    _Events_UpdateEventState_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _Events_ListEvents_Handler,
		},
		{
			MethodName: "GetEventStateForProject",
			Handler:    _Events_GetEventStateForProject_Handler,
		},
		{
			MethodName: "UpdateEventStateForProject",
			Handler:    _Events_UpdateEventStateForProject_Handler,
		},
		{
			MethodName: "GetProjectWaitingEvents",
			Handler:    _Events_GetProjectWaitingEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TrackIngestEvent",
			Handler:       _Events_TrackIngestEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventsvc/svc.proto",
}
