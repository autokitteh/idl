// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: eventsrc/src.proto

package eventsrc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on EventSourceSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSourceSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enabled

	return nil
}

// EventSourceSettingsValidationError is the validation error returned by
// EventSourceSettings.Validate if the designated constraints aren't met.
type EventSourceSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSourceSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSourceSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSourceSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSourceSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSourceSettingsValidationError) ErrorName() string {
	return "EventSourceSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e EventSourceSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSourceSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSourceSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSourceSettingsValidationError{}

// Validate checks the field values on EventSource with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventSource) Validate() error {
	if m == nil {
		return nil
	}

	if !_EventSource_Id_Pattern.MatchString(m.GetId()) {
		return EventSourceValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSourceValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSourceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSourceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventSourceValidationError is the validation error returned by
// EventSource.Validate if the designated constraints aren't met.
type EventSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSourceValidationError) ErrorName() string { return "EventSourceValidationError" }

// Error satisfies the builtin error interface
func (e EventSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSourceValidationError{}

var _EventSource_Id_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")

// Validate checks the field values on EventSourceProjectBindingSettings with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *EventSourceProjectBindingSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enabled

	return nil
}

// EventSourceProjectBindingSettingsValidationError is the validation error
// returned by EventSourceProjectBindingSettings.Validate if the designated
// constraints aren't met.
type EventSourceProjectBindingSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSourceProjectBindingSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSourceProjectBindingSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSourceProjectBindingSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSourceProjectBindingSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSourceProjectBindingSettingsValidationError) ErrorName() string {
	return "EventSourceProjectBindingSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e EventSourceProjectBindingSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSourceProjectBindingSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSourceProjectBindingSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSourceProjectBindingSettingsValidationError{}

// Validate checks the field values on EventSourceProjectBinding with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EventSourceProjectBinding) Validate() error {
	if m == nil {
		return nil
	}

	if !_EventSourceProjectBinding_SrcId_Pattern.MatchString(m.GetSrcId()) {
		return EventSourceProjectBindingValidationError{
			field:  "SrcId",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	if !_EventSourceProjectBinding_ProjectId_Pattern.MatchString(m.GetProjectId()) {
		return EventSourceProjectBindingValidationError{
			field:  "ProjectId",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
		}
	}

	if m.GetName() != "" {

		if !_EventSourceProjectBinding_Name_Pattern.MatchString(m.GetName()) {
			return EventSourceProjectBindingValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

	}

	// no validation rules for AssociationToken

	// no validation rules for SourceConfig

	// no validation rules for Approved

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSourceProjectBindingValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSourceProjectBindingValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventSourceProjectBindingValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventSourceProjectBindingValidationError is the validation error returned by
// EventSourceProjectBinding.Validate if the designated constraints aren't met.
type EventSourceProjectBindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSourceProjectBindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSourceProjectBindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSourceProjectBindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSourceProjectBindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSourceProjectBindingValidationError) ErrorName() string {
	return "EventSourceProjectBindingValidationError"
}

// Error satisfies the builtin error interface
func (e EventSourceProjectBindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSourceProjectBinding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSourceProjectBindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSourceProjectBindingValidationError{}

var _EventSourceProjectBinding_SrcId_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")

var _EventSourceProjectBinding_ProjectId_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")

var _EventSourceProjectBinding_Name_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")
