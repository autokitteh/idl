// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package httpeventsrc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HTTPEventSourceClient is the client API for HTTPEventSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPEventSourceClient interface {
	Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindResponse, error)
	Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindResponse, error)
}

type hTTPEventSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPEventSourceClient(cc grpc.ClientConnInterface) HTTPEventSourceClient {
	return &hTTPEventSourceClient{cc}
}

func (c *hTTPEventSourceClient) Bind(ctx context.Context, in *BindRequest, opts ...grpc.CallOption) (*BindResponse, error) {
	out := new(BindResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.httpeventsrc.HTTPEventSource/Bind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPEventSourceClient) Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindResponse, error) {
	out := new(UnbindResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.httpeventsrc.HTTPEventSource/Unbind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPEventSourceServer is the server API for HTTPEventSource service.
// All implementations must embed UnimplementedHTTPEventSourceServer
// for forward compatibility
type HTTPEventSourceServer interface {
	Bind(context.Context, *BindRequest) (*BindResponse, error)
	Unbind(context.Context, *UnbindRequest) (*UnbindResponse, error)
	mustEmbedUnimplementedHTTPEventSourceServer()
}

// UnimplementedHTTPEventSourceServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPEventSourceServer struct {
}

func (UnimplementedHTTPEventSourceServer) Bind(context.Context, *BindRequest) (*BindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (UnimplementedHTTPEventSourceServer) Unbind(context.Context, *UnbindRequest) (*UnbindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (UnimplementedHTTPEventSourceServer) mustEmbedUnimplementedHTTPEventSourceServer() {}

// UnsafeHTTPEventSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPEventSourceServer will
// result in compilation errors.
type UnsafeHTTPEventSourceServer interface {
	mustEmbedUnimplementedHTTPEventSourceServer()
}

func RegisterHTTPEventSourceServer(s grpc.ServiceRegistrar, srv HTTPEventSourceServer) {
	s.RegisterService(&HTTPEventSource_ServiceDesc, srv)
}

func _HTTPEventSource_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPEventSourceServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.httpeventsrc.HTTPEventSource/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPEventSourceServer).Bind(ctx, req.(*BindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPEventSource_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPEventSourceServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.httpeventsrc.HTTPEventSource/Unbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPEventSourceServer).Unbind(ctx, req.(*UnbindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HTTPEventSource_ServiceDesc is the grpc.ServiceDesc for HTTPEventSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPEventSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.httpeventsrc.HTTPEventSource",
	HandlerType: (*HTTPEventSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bind",
			Handler:    _HTTPEventSource_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _HTTPEventSource_Unbind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "httpeventsrc/src.proto",
}
