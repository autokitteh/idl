// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package litterboxsvc

import (
	context "context"
	event "go.autokitteh.dev/idl/go/event"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LitterBoxClient is the client API for LitterBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LitterBoxClient interface {
	Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (LitterBox_EventClient, error)
	// Enable live sources and track all incoming events.
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (LitterBox_RunClient, error)
	Scoop(ctx context.Context, in *ScoopRequest, opts ...grpc.CallOption) (*ScoopResponse, error)
}

type litterBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewLitterBoxClient(cc grpc.ClientConnInterface) LitterBoxClient {
	return &litterBoxClient{cc}
}

func (c *litterBoxClient) Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error) {
	out := new(SetupResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.litterbox.LitterBox/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *litterBoxClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.litterbox.LitterBox/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *litterBoxClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (LitterBox_EventClient, error) {
	stream, err := c.cc.NewStream(ctx, &LitterBox_ServiceDesc.Streams[0], "/autokitteh.litterbox.LitterBox/Event", opts...)
	if err != nil {
		return nil, err
	}
	x := &litterBoxEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LitterBox_EventClient interface {
	Recv() (*event.TrackIngestEventUpdate, error)
	grpc.ClientStream
}

type litterBoxEventClient struct {
	grpc.ClientStream
}

func (x *litterBoxEventClient) Recv() (*event.TrackIngestEventUpdate, error) {
	m := new(event.TrackIngestEventUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *litterBoxClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (LitterBox_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &LitterBox_ServiceDesc.Streams[1], "/autokitteh.litterbox.LitterBox/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &litterBoxRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LitterBox_RunClient interface {
	Recv() (*event.TrackIngestEventUpdate, error)
	grpc.ClientStream
}

type litterBoxRunClient struct {
	grpc.ClientStream
}

func (x *litterBoxRunClient) Recv() (*event.TrackIngestEventUpdate, error) {
	m := new(event.TrackIngestEventUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *litterBoxClient) Scoop(ctx context.Context, in *ScoopRequest, opts ...grpc.CallOption) (*ScoopResponse, error) {
	out := new(ScoopResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.litterbox.LitterBox/Scoop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LitterBoxServer is the server API for LitterBox service.
// All implementations must embed UnimplementedLitterBoxServer
// for forward compatibility
type LitterBoxServer interface {
	Setup(context.Context, *SetupRequest) (*SetupResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Event(*EventRequest, LitterBox_EventServer) error
	// Enable live sources and track all incoming events.
	Run(*RunRequest, LitterBox_RunServer) error
	Scoop(context.Context, *ScoopRequest) (*ScoopResponse, error)
	mustEmbedUnimplementedLitterBoxServer()
}

// UnimplementedLitterBoxServer must be embedded to have forward compatible implementations.
type UnimplementedLitterBoxServer struct {
}

func (UnimplementedLitterBoxServer) Setup(context.Context, *SetupRequest) (*SetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedLitterBoxServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLitterBoxServer) Event(*EventRequest, LitterBox_EventServer) error {
	return status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedLitterBoxServer) Run(*RunRequest, LitterBox_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedLitterBoxServer) Scoop(context.Context, *ScoopRequest) (*ScoopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scoop not implemented")
}
func (UnimplementedLitterBoxServer) mustEmbedUnimplementedLitterBoxServer() {}

// UnsafeLitterBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LitterBoxServer will
// result in compilation errors.
type UnsafeLitterBoxServer interface {
	mustEmbedUnimplementedLitterBoxServer()
}

func RegisterLitterBoxServer(s grpc.ServiceRegistrar, srv LitterBoxServer) {
	s.RegisterService(&LitterBox_ServiceDesc, srv)
}

func _LitterBox_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LitterBoxServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.litterbox.LitterBox/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LitterBoxServer).Setup(ctx, req.(*SetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LitterBox_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LitterBoxServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.litterbox.LitterBox/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LitterBoxServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LitterBox_Event_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LitterBoxServer).Event(m, &litterBoxEventServer{stream})
}

type LitterBox_EventServer interface {
	Send(*event.TrackIngestEventUpdate) error
	grpc.ServerStream
}

type litterBoxEventServer struct {
	grpc.ServerStream
}

func (x *litterBoxEventServer) Send(m *event.TrackIngestEventUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _LitterBox_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LitterBoxServer).Run(m, &litterBoxRunServer{stream})
}

type LitterBox_RunServer interface {
	Send(*event.TrackIngestEventUpdate) error
	grpc.ServerStream
}

type litterBoxRunServer struct {
	grpc.ServerStream
}

func (x *litterBoxRunServer) Send(m *event.TrackIngestEventUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _LitterBox_Scoop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LitterBoxServer).Scoop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.litterbox.LitterBox/Scoop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LitterBoxServer).Scoop(ctx, req.(*ScoopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LitterBox_ServiceDesc is the grpc.ServiceDesc for LitterBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LitterBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.litterbox.LitterBox",
	HandlerType: (*LitterBoxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _LitterBox_Setup_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LitterBox_Get_Handler,
		},
		{
			MethodName: "Scoop",
			Handler:    _LitterBox_Scoop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Event",
			Handler:       _LitterBox_Event_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _LitterBox_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "litterboxsvc/svc.proto",
}
