// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package litterboxsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LitterBoxClient is the client API for LitterBox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LitterBoxClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (LitterBox_RunClient, error)
}

type litterBoxClient struct {
	cc grpc.ClientConnInterface
}

func NewLitterBoxClient(cc grpc.ClientConnInterface) LitterBoxClient {
	return &litterBoxClient{cc}
}

func (c *litterBoxClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (LitterBox_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &LitterBox_ServiceDesc.Streams[0], "/autokitteh.litterbox.LitterBox/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &litterBoxRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LitterBox_RunClient interface {
	Recv() (*RunUpdate, error)
	grpc.ClientStream
}

type litterBoxRunClient struct {
	grpc.ClientStream
}

func (x *litterBoxRunClient) Recv() (*RunUpdate, error) {
	m := new(RunUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LitterBoxServer is the server API for LitterBox service.
// All implementations must embed UnimplementedLitterBoxServer
// for forward compatibility
type LitterBoxServer interface {
	Run(*RunRequest, LitterBox_RunServer) error
	mustEmbedUnimplementedLitterBoxServer()
}

// UnimplementedLitterBoxServer must be embedded to have forward compatible implementations.
type UnimplementedLitterBoxServer struct {
}

func (UnimplementedLitterBoxServer) Run(*RunRequest, LitterBox_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedLitterBoxServer) mustEmbedUnimplementedLitterBoxServer() {}

// UnsafeLitterBoxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LitterBoxServer will
// result in compilation errors.
type UnsafeLitterBoxServer interface {
	mustEmbedUnimplementedLitterBoxServer()
}

func RegisterLitterBoxServer(s grpc.ServiceRegistrar, srv LitterBoxServer) {
	s.RegisterService(&LitterBox_ServiceDesc, srv)
}

func _LitterBox_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LitterBoxServer).Run(m, &litterBoxRunServer{stream})
}

type LitterBox_RunServer interface {
	Send(*RunUpdate) error
	grpc.ServerStream
}

type litterBoxRunServer struct {
	grpc.ServerStream
}

func (x *litterBoxRunServer) Send(m *RunUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// LitterBox_ServiceDesc is the grpc.ServiceDesc for LitterBox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LitterBox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.litterbox.LitterBox",
	HandlerType: (*LitterBoxServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _LitterBox_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "litterboxsvc/svc.proto",
}
