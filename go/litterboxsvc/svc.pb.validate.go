// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: litterboxsvc/svc.proto

package litterboxsvc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on SetupRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SetupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() != "" {

		if !_SetupRequest_Id_Pattern.MatchString(m.GetId()) {
			return SetupRequestValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
			}
		}

	}

	// no validation rules for FilesTxtar

	return nil
}

// SetupRequestValidationError is the validation error returned by
// SetupRequest.Validate if the designated constraints aren't met.
type SetupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetupRequestValidationError) ErrorName() string { return "SetupRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetupRequestValidationError{}

var _SetupRequest_Id_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on SetupResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SetupResponse) Validate() error {
	if m == nil {
		return nil
	}

	if !_SetupResponse_Id_Pattern.MatchString(m.GetId()) {
		return SetupResponseValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
	}

	return nil
}

// SetupResponseValidationError is the validation error returned by
// SetupResponse.Validate if the designated constraints aren't met.
type SetupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetupResponseValidationError) ErrorName() string { return "SetupResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetupResponseValidationError{}

var _SetupResponse_Id_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetRequest_Id_Pattern.MatchString(m.GetId()) {
		return GetRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
	}

	return nil
}

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

var _GetRequest_Id_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilesTxtar

	return nil
}

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on ScoopRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScoopRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_ScoopRequest_Id_Pattern.MatchString(m.GetId()) {
		return ScoopRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
	}

	return nil
}

// ScoopRequestValidationError is the validation error returned by
// ScoopRequest.Validate if the designated constraints aren't met.
type ScoopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScoopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScoopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScoopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScoopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScoopRequestValidationError) ErrorName() string { return "ScoopRequestValidationError" }

// Error satisfies the builtin error interface
func (e ScoopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScoopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScoopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScoopRequestValidationError{}

var _ScoopRequest_Id_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on ScoopResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScoopResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ScoopResponseValidationError is the validation error returned by
// ScoopResponse.Validate if the designated constraints aren't met.
type ScoopResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScoopResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScoopResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScoopResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScoopResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScoopResponseValidationError) ErrorName() string { return "ScoopResponseValidationError" }

// Error satisfies the builtin error interface
func (e ScoopResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScoopResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScoopResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScoopResponseValidationError{}

// Validate checks the field values on LitterBoxEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LitterBoxEvent) Validate() error {
	if m == nil {
		return nil
	}

	if !_LitterBoxEvent_Src_Pattern.MatchString(m.GetSrc()) {
		return LitterBoxEventValidationError{
			field:  "Src",
			reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
		}
	}

	// no validation rules for Type

	for key, val := range m.GetValues() {
		_ = val

		if val == nil {
			return LitterBoxEventValidationError{
				field:  fmt.Sprintf("Values[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_LitterBoxEvent_Values_Pattern.MatchString(key) {
			return LitterBoxEventValidationError{
				field:  fmt.Sprintf("Values[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LitterBoxEventValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Data

	// no validation rules for OriginalId

	return nil
}

// LitterBoxEventValidationError is the validation error returned by
// LitterBoxEvent.Validate if the designated constraints aren't met.
type LitterBoxEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LitterBoxEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LitterBoxEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LitterBoxEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LitterBoxEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LitterBoxEventValidationError) ErrorName() string { return "LitterBoxEventValidationError" }

// Error satisfies the builtin error interface
func (e LitterBoxEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLitterBoxEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LitterBoxEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LitterBoxEventValidationError{}

var _LitterBoxEvent_Src_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

var _LitterBoxEvent_Values_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on EventRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_EventRequest_Id_Pattern.MatchString(m.GetId()) {
		return EventRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
	}

	if m.GetEvent() == nil {
		return EventRequestValidationError{
			field:  "Event",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventRequestValidationError is the validation error returned by
// EventRequest.Validate if the designated constraints aren't met.
type EventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventRequestValidationError) ErrorName() string { return "EventRequestValidationError" }

// Error satisfies the builtin error interface
func (e EventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventRequestValidationError{}

var _EventRequest_Id_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on RunRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RunRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RunRequest_Id_Pattern.MatchString(m.GetId()) {
		return RunRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
	}

	return nil
}

// RunRequestValidationError is the validation error returned by
// RunRequest.Validate if the designated constraints aren't met.
type RunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunRequestValidationError) ErrorName() string { return "RunRequestValidationError" }

// Error satisfies the builtin error interface
func (e RunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunRequestValidationError{}

var _RunRequest_Id_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")
