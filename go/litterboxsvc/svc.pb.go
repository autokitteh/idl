// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: litterboxsvc/svc.proto

package litterboxsvc

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	event "go.autokitteh.dev/idl/go/event"
	values "go.autokitteh.dev/idl/go/values"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FilesMap     map[string][]byte `protobuf:"bytes,2,rep,name=files_map,json=filesMap,proto3" json:"files_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // name -> file.
	MainFileName string            `protobuf:"bytes,3,opt,name=main_file_name,json=mainFileName,proto3" json:"main_file_name,omitempty"`
	FilesTxtar   []byte            `protobuf:"bytes,4,opt,name=files_txtar,json=filesTxtar,proto3" json:"files_txtar,omitempty"` // in txtar format (see https://pkg.go.dev/golang.org/x/tools/txtar).
}

func (x *SetupRequest) Reset() {
	*x = SetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_litterboxsvc_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupRequest) ProtoMessage() {}

func (x *SetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_litterboxsvc_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupRequest.ProtoReflect.Descriptor instead.
func (*SetupRequest) Descriptor() ([]byte, []int) {
	return file_litterboxsvc_svc_proto_rawDescGZIP(), []int{0}
}

func (x *SetupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetupRequest) GetFilesMap() map[string][]byte {
	if x != nil {
		return x.FilesMap
	}
	return nil
}

func (x *SetupRequest) GetMainFileName() string {
	if x != nil {
		return x.MainFileName
	}
	return ""
}

func (x *SetupRequest) GetFilesTxtar() []byte {
	if x != nil {
		return x.FilesTxtar
	}
	return nil
}

type SetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SetupResponse) Reset() {
	*x = SetupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_litterboxsvc_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupResponse) ProtoMessage() {}

func (x *SetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_litterboxsvc_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupResponse.ProtoReflect.Descriptor instead.
func (*SetupResponse) Descriptor() ([]byte, []int) {
	return file_litterboxsvc_svc_proto_rawDescGZIP(), []int{1}
}

func (x *SetupResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ScoopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ScoopRequest) Reset() {
	*x = ScoopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_litterboxsvc_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoopRequest) ProtoMessage() {}

func (x *ScoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_litterboxsvc_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoopRequest.ProtoReflect.Descriptor instead.
func (*ScoopRequest) Descriptor() ([]byte, []int) {
	return file_litterboxsvc_svc_proto_rawDescGZIP(), []int{2}
}

func (x *ScoopRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ScoopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScoopResponse) Reset() {
	*x = ScoopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_litterboxsvc_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoopResponse) ProtoMessage() {}

func (x *ScoopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_litterboxsvc_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoopResponse.ProtoReflect.Descriptor instead.
func (*ScoopResponse) Descriptor() ([]byte, []int) {
	return file_litterboxsvc_svc_proto_rawDescGZIP(), []int{3}
}

type LitterBoxEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src        string                   `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Type       string                   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Data       map[string]*values.Value `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OriginalId string                   `protobuf:"bytes,4,opt,name=original_id,json=originalId,proto3" json:"original_id,omitempty"`
}

func (x *LitterBoxEvent) Reset() {
	*x = LitterBoxEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_litterboxsvc_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LitterBoxEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LitterBoxEvent) ProtoMessage() {}

func (x *LitterBoxEvent) ProtoReflect() protoreflect.Message {
	mi := &file_litterboxsvc_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LitterBoxEvent.ProtoReflect.Descriptor instead.
func (*LitterBoxEvent) Descriptor() ([]byte, []int) {
	return file_litterboxsvc_svc_proto_rawDescGZIP(), []int{4}
}

func (x *LitterBoxEvent) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *LitterBoxEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LitterBoxEvent) GetData() map[string]*values.Value {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LitterBoxEvent) GetOriginalId() string {
	if x != nil {
		return x.OriginalId
	}
	return ""
}

type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Event *LitterBoxEvent `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_litterboxsvc_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_litterboxsvc_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_litterboxsvc_svc_proto_rawDescGZIP(), []int{5}
}

func (x *EventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventRequest) GetEvent() *LitterBoxEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

var File_litterboxsvc_svc_proto protoreflect.FileDescriptor

var file_litterboxsvc_svc_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x6f, 0x78, 0x73, 0x76, 0x63, 0x2f, 0x73,
	0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x6f, 0x78, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x32, 0x10, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0xd0, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b,
	0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x6f, 0x78, 0x2e,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x78, 0x74, 0x61, 0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x37, 0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x53,
	0x63, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x02, 0x0a,
	0x0e, 0x4c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42,
	0x1c, 0x72, 0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x03, 0x73,
	0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65,
	0x68, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x6f, 0x78, 0x2e, 0x4c, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x42, 0x6f, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x26, 0xfa, 0x42, 0x23, 0x9a, 0x01, 0x20, 0x18, 0x01, 0x22, 0x1c,
	0x72, 0x1a, 0x32, 0x18, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x1a, 0x51, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x62, 0x6f, 0x78, 0x2e, 0x4c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x32, 0xb5, 0x03, 0x0a, 0x09, 0x4c, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x42, 0x6f, 0x78, 0x12, 0xa3, 0x01, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x22, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x22, 0x13,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x6f,
	0x78, 0x65, 0x73, 0x3a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x74, 0x61, 0x72,
	0x5a, 0x27, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x74, 0x61, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68,
	0x2e, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x6f, 0x78, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69,
	0x74, 0x74, 0x65, 0x68, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x6f, 0x70, 0x12, 0x22, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x62, 0x6f, 0x78, 0x2e, 0x53, 0x63, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x6c, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x63, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x6f, 0x78,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x63, 0x6f, 0x6f, 0x70, 0x42, 0x27, 0x5a,
	0x25, 0x67, 0x6f, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6b, 0x69, 0x74, 0x74, 0x65, 0x68, 0x2e, 0x64,
	0x65, 0x76, 0x2f, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x6f, 0x2f, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x62, 0x6f, 0x78, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_litterboxsvc_svc_proto_rawDescOnce sync.Once
	file_litterboxsvc_svc_proto_rawDescData = file_litterboxsvc_svc_proto_rawDesc
)

func file_litterboxsvc_svc_proto_rawDescGZIP() []byte {
	file_litterboxsvc_svc_proto_rawDescOnce.Do(func() {
		file_litterboxsvc_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_litterboxsvc_svc_proto_rawDescData)
	})
	return file_litterboxsvc_svc_proto_rawDescData
}

var file_litterboxsvc_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_litterboxsvc_svc_proto_goTypes = []interface{}{
	(*SetupRequest)(nil),                 // 0: autokitteh.litterbox.SetupRequest
	(*SetupResponse)(nil),                // 1: autokitteh.litterbox.SetupResponse
	(*ScoopRequest)(nil),                 // 2: autokitteh.litterbox.ScoopRequest
	(*ScoopResponse)(nil),                // 3: autokitteh.litterbox.ScoopResponse
	(*LitterBoxEvent)(nil),               // 4: autokitteh.litterbox.LitterBoxEvent
	(*EventRequest)(nil),                 // 5: autokitteh.litterbox.EventRequest
	nil,                                  // 6: autokitteh.litterbox.SetupRequest.FilesMapEntry
	nil,                                  // 7: autokitteh.litterbox.LitterBoxEvent.DataEntry
	(*values.Value)(nil),                 // 8: autokitteh.values.Value
	(*event.TrackIngestEventUpdate)(nil), // 9: autokitteh.event.TrackIngestEventUpdate
}
var file_litterboxsvc_svc_proto_depIdxs = []int32{
	6, // 0: autokitteh.litterbox.SetupRequest.files_map:type_name -> autokitteh.litterbox.SetupRequest.FilesMapEntry
	7, // 1: autokitteh.litterbox.LitterBoxEvent.data:type_name -> autokitteh.litterbox.LitterBoxEvent.DataEntry
	4, // 2: autokitteh.litterbox.EventRequest.event:type_name -> autokitteh.litterbox.LitterBoxEvent
	8, // 3: autokitteh.litterbox.LitterBoxEvent.DataEntry.value:type_name -> autokitteh.values.Value
	0, // 4: autokitteh.litterbox.LitterBox.Setup:input_type -> autokitteh.litterbox.SetupRequest
	5, // 5: autokitteh.litterbox.LitterBox.Event:input_type -> autokitteh.litterbox.EventRequest
	2, // 6: autokitteh.litterbox.LitterBox.Scoop:input_type -> autokitteh.litterbox.ScoopRequest
	1, // 7: autokitteh.litterbox.LitterBox.Setup:output_type -> autokitteh.litterbox.SetupResponse
	9, // 8: autokitteh.litterbox.LitterBox.Event:output_type -> autokitteh.event.TrackIngestEventUpdate
	3, // 9: autokitteh.litterbox.LitterBox.Scoop:output_type -> autokitteh.litterbox.ScoopResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_litterboxsvc_svc_proto_init() }
func file_litterboxsvc_svc_proto_init() {
	if File_litterboxsvc_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_litterboxsvc_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_litterboxsvc_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_litterboxsvc_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_litterboxsvc_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_litterboxsvc_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LitterBoxEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_litterboxsvc_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_litterboxsvc_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_litterboxsvc_svc_proto_goTypes,
		DependencyIndexes: file_litterboxsvc_svc_proto_depIdxs,
		MessageInfos:      file_litterboxsvc_svc_proto_msgTypes,
	}.Build()
	File_litterboxsvc_svc_proto = out.File
	file_litterboxsvc_svc_proto_rawDesc = nil
	file_litterboxsvc_svc_proto_goTypes = nil
	file_litterboxsvc_svc_proto_depIdxs = nil
}
