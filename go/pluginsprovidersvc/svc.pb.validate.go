// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pluginsprovidersvc/svc.proto

package pluginsprovidersvc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if !_ListResponse_Ids_Pattern.MatchString(item) {
			return ListResponseValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
			}
		}

	}

	return nil
}

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

var _ListResponse_Ids_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")

// Validate checks the field values on DescribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DescribeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_DescribeRequest_Id_Pattern.MatchString(m.GetId()) {
		return DescribeRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	return nil
}

// DescribeRequestValidationError is the validation error returned by
// DescribeRequest.Validate if the designated constraints aren't met.
type DescribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeRequestValidationError) ErrorName() string { return "DescribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e DescribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeRequestValidationError{}

var _DescribeRequest_Id_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")

// Validate checks the field values on DescribeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DescribeResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDesc() == nil {
		return DescribeResponseValidationError{
			field:  "Desc",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetDesc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeResponseValidationError{
				field:  "Desc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeResponseValidationError is the validation error returned by
// DescribeResponse.Validate if the designated constraints aren't met.
type DescribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeResponseValidationError) ErrorName() string { return "DescribeResponseValidationError" }

// Error satisfies the builtin error interface
func (e DescribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeResponseValidationError{}

// Validate checks the field values on GetValuesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetValuesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_GetValuesRequest_Id_Pattern.MatchString(m.GetId()) {
		return GetValuesRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	for idx, item := range m.GetNames() {
		_, _ = idx, item

		if !_GetValuesRequest_Names_Pattern.MatchString(item) {
			return GetValuesRequestValidationError{
				field:  fmt.Sprintf("Names[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

	}

	return nil
}

// GetValuesRequestValidationError is the validation error returned by
// GetValuesRequest.Validate if the designated constraints aren't met.
type GetValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetValuesRequestValidationError) ErrorName() string { return "GetValuesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetValuesRequestValidationError{}

var _GetValuesRequest_Id_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")

var _GetValuesRequest_Names_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on GetValuesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetValuesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetValues() {
		_ = val

		if val == nil {
			return GetValuesResponseValidationError{
				field:  fmt.Sprintf("Values[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_GetValuesResponse_Values_Pattern.MatchString(key) {
			return GetValuesResponseValidationError{
				field:  fmt.Sprintf("Values[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetValuesResponseValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetValuesResponseValidationError is the validation error returned by
// GetValuesResponse.Validate if the designated constraints aren't met.
type GetValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetValuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetValuesResponseValidationError) ErrorName() string {
	return "GetValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetValuesResponseValidationError{}

var _GetValuesResponse_Values_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on CallValueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CallValueRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CallValueRequest_Id_Pattern.MatchString(m.GetId()) {
		return CallValueRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	if m.GetValue() == nil {
		return CallValueRequestValidationError{
			field:  "Value",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallValueRequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArgs() {
		_, _ = idx, item

		if item == nil {
			return CallValueRequestValidationError{
				field:  fmt.Sprintf("Args[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallValueRequestValidationError{
					field:  fmt.Sprintf("Args[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetKwargs() {
		_ = val

		if val == nil {
			return CallValueRequestValidationError{
				field:  fmt.Sprintf("Kwargs[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_CallValueRequest_Kwargs_Pattern.MatchString(key) {
			return CallValueRequestValidationError{
				field:  fmt.Sprintf("Kwargs[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallValueRequestValidationError{
					field:  fmt.Sprintf("Kwargs[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CallValueRequestValidationError is the validation error returned by
// CallValueRequest.Validate if the designated constraints aren't met.
type CallValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallValueRequestValidationError) ErrorName() string { return "CallValueRequestValidationError" }

// Error satisfies the builtin error interface
func (e CallValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallValueRequestValidationError{}

var _CallValueRequest_Id_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")

var _CallValueRequest_Kwargs_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on CallValueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CallValueResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Ret.(type) {

	case *CallValueResponse_Retval:

		if v, ok := interface{}(m.GetRetval()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallValueResponseValidationError{
					field:  "Retval",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CallValueResponse_Error:

		if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallValueResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CallValueResponseValidationError is the validation error returned by
// CallValueResponse.Validate if the designated constraints aren't met.
type CallValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallValueResponseValidationError) ErrorName() string {
	return "CallValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CallValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallValueResponseValidationError{}
