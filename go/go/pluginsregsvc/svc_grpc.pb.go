// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pluginsregsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginsRegistryClient is the client API for PluginsRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginsRegistryClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type pluginsRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginsRegistryClient(cc grpc.ClientConnInterface) PluginsRegistryClient {
	return &pluginsRegistryClient{cc}
}

func (c *pluginsRegistryClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.pluginsregsvc.PluginsRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsRegistryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.pluginsregsvc.PluginsRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsRegistryClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.pluginsregsvc.PluginsRegistry/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginsRegistryServer is the server API for PluginsRegistry service.
// All implementations must embed UnimplementedPluginsRegistryServer
// for forward compatibility
type PluginsRegistryServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedPluginsRegistryServer()
}

// UnimplementedPluginsRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedPluginsRegistryServer struct {
}

func (UnimplementedPluginsRegistryServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPluginsRegistryServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPluginsRegistryServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPluginsRegistryServer) mustEmbedUnimplementedPluginsRegistryServer() {}

// UnsafePluginsRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginsRegistryServer will
// result in compilation errors.
type UnsafePluginsRegistryServer interface {
	mustEmbedUnimplementedPluginsRegistryServer()
}

func RegisterPluginsRegistryServer(s grpc.ServiceRegistrar, srv PluginsRegistryServer) {
	s.RegisterService(&PluginsRegistry_ServiceDesc, srv)
}

func _PluginsRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.pluginsregsvc.PluginsRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsRegistryServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.pluginsregsvc.PluginsRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsRegistryServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsRegistry_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsRegistryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.pluginsregsvc.PluginsRegistry/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsRegistryServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginsRegistry_ServiceDesc is the grpc.ServiceDesc for PluginsRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginsRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.pluginsregsvc.PluginsRegistry",
	HandlerType: (*PluginsRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PluginsRegistry_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PluginsRegistry_Get_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PluginsRegistry_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluginsregsvc/svc.proto",
}
