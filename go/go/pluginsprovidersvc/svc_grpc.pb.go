// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pluginsprovidersvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginsProviderClient is the client API for PluginsProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginsProviderClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	GetValues(ctx context.Context, in *GetValuesRequest, opts ...grpc.CallOption) (*GetValuesResponse, error)
	CallValue(ctx context.Context, in *CallValueRequest, opts ...grpc.CallOption) (*CallValueResponse, error)
}

type pluginsProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginsProviderClient(cc grpc.ClientConnInterface) PluginsProviderClient {
	return &pluginsProviderClient{cc}
}

func (c *pluginsProviderClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.pluginsprovidersvc.PluginsProvider/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsProviderClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.pluginsprovidersvc.PluginsProvider/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsProviderClient) GetValues(ctx context.Context, in *GetValuesRequest, opts ...grpc.CallOption) (*GetValuesResponse, error) {
	out := new(GetValuesResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.pluginsprovidersvc.PluginsProvider/GetValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginsProviderClient) CallValue(ctx context.Context, in *CallValueRequest, opts ...grpc.CallOption) (*CallValueResponse, error) {
	out := new(CallValueResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.pluginsprovidersvc.PluginsProvider/CallValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginsProviderServer is the server API for PluginsProvider service.
// All implementations must embed UnimplementedPluginsProviderServer
// for forward compatibility
type PluginsProviderServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	GetValues(context.Context, *GetValuesRequest) (*GetValuesResponse, error)
	CallValue(context.Context, *CallValueRequest) (*CallValueResponse, error)
	mustEmbedUnimplementedPluginsProviderServer()
}

// UnimplementedPluginsProviderServer must be embedded to have forward compatible implementations.
type UnimplementedPluginsProviderServer struct {
}

func (UnimplementedPluginsProviderServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPluginsProviderServer) Describe(context.Context, *DescribeRequest) (*DescribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedPluginsProviderServer) GetValues(context.Context, *GetValuesRequest) (*GetValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValues not implemented")
}
func (UnimplementedPluginsProviderServer) CallValue(context.Context, *CallValueRequest) (*CallValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallValue not implemented")
}
func (UnimplementedPluginsProviderServer) mustEmbedUnimplementedPluginsProviderServer() {}

// UnsafePluginsProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginsProviderServer will
// result in compilation errors.
type UnsafePluginsProviderServer interface {
	mustEmbedUnimplementedPluginsProviderServer()
}

func RegisterPluginsProviderServer(s grpc.ServiceRegistrar, srv PluginsProviderServer) {
	s.RegisterService(&PluginsProvider_ServiceDesc, srv)
}

func _PluginsProvider_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsProviderServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.pluginsprovidersvc.PluginsProvider/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsProviderServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsProvider_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsProviderServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.pluginsprovidersvc.PluginsProvider/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsProviderServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsProvider_GetValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsProviderServer).GetValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.pluginsprovidersvc.PluginsProvider/GetValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsProviderServer).GetValues(ctx, req.(*GetValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginsProvider_CallValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginsProviderServer).CallValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.pluginsprovidersvc.PluginsProvider/CallValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginsProviderServer).CallValue(ctx, req.(*CallValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginsProvider_ServiceDesc is the grpc.ServiceDesc for PluginsProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginsProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.pluginsprovidersvc.PluginsProvider",
	HandlerType: (*PluginsProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PluginsProvider_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _PluginsProvider_Describe_Handler,
		},
		{
			MethodName: "GetValues",
			Handler:    _PluginsProvider_GetValues_Handler,
		},
		{
			MethodName: "CallValue",
			Handler:    _PluginsProvider_CallValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluginsprovidersvc/svc.proto",
}
