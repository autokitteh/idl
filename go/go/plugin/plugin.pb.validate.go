// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugin/plugin.proto

package plugin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PluginExecutionSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PluginExecutionSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// PluginExecutionSettingsValidationError is the validation error returned by
// PluginExecutionSettings.Validate if the designated constraints aren't met.
type PluginExecutionSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginExecutionSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginExecutionSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginExecutionSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginExecutionSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginExecutionSettingsValidationError) ErrorName() string {
	return "PluginExecutionSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e PluginExecutionSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginExecutionSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginExecutionSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginExecutionSettingsValidationError{}

// Validate checks the field values on PluginSettings with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PluginSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enabled

	if m.GetAddress() != "" {

		if err := m._validateHostname(m.GetAddress()); err != nil {
			if ip := net.ParseIP(m.GetAddress()); ip == nil {
				return PluginSettingsValidationError{
					field:  "Address",
					reason: "value must be a valid hostname, or ip address",
				}
			}
		}

	}

	// no validation rules for Port

	if v, ok := interface{}(m.GetExec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginSettingsValidationError{
				field:  "Exec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *PluginSettings) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// PluginSettingsValidationError is the validation error returned by
// PluginSettings.Validate if the designated constraints aren't met.
type PluginSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginSettingsValidationError) ErrorName() string { return "PluginSettingsValidationError" }

// Error satisfies the builtin error interface
func (e PluginSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginSettingsValidationError{}

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Plugin) Validate() error {
	if m == nil {
		return nil
	}

	if !_Plugin_Id_Pattern.MatchString(m.GetId()) {
		return PluginValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	if m.GetSettings() == nil {
		return PluginValidationError{
			field:  "Settings",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

var _Plugin_Id_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")
