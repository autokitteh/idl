// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: project/project.proto

package project

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ProjectPlugin with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProjectPlugin) Validate() error {
	if m == nil {
		return nil
	}

	if !_ProjectPlugin_PluginId_Pattern.MatchString(m.GetPluginId()) {
		return ProjectPluginValidationError{
			field:  "PluginId",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	// no validation rules for Enabled

	return nil
}

// ProjectPluginValidationError is the validation error returned by
// ProjectPlugin.Validate if the designated constraints aren't met.
type ProjectPluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPluginValidationError) ErrorName() string { return "ProjectPluginValidationError" }

// Error satisfies the builtin error interface
func (e ProjectPluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPluginValidationError{}

var _ProjectPlugin_PluginId_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")

// Validate checks the field values on ProjectSettings with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProjectSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Enabled

	if v, ok := interface{}(m.GetMainPath()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectSettingsValidationError{
				field:  "MainPath",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetPredecls() {
		_ = val

		if val == nil {
			return ProjectSettingsValidationError{
				field:  fmt.Sprintf("Predecls[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_ProjectSettings_Predecls_Pattern.MatchString(key) {
			return ProjectSettingsValidationError{
				field:  fmt.Sprintf("Predecls[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectSettingsValidationError{
					field:  fmt.Sprintf("Predecls[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPlugins() {
		_, _ = idx, item

		if item == nil {
			return ProjectSettingsValidationError{
				field:  fmt.Sprintf("Plugins[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectSettingsValidationError{
					field:  fmt.Sprintf("Plugins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Memo

	return nil
}

// ProjectSettingsValidationError is the validation error returned by
// ProjectSettings.Validate if the designated constraints aren't met.
type ProjectSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectSettingsValidationError) ErrorName() string { return "ProjectSettingsValidationError" }

// Error satisfies the builtin error interface
func (e ProjectSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectSettingsValidationError{}

var _ProjectSettings_Predecls_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Project) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() != "" {

		if !_Project_Id_Pattern.MatchString(m.GetId()) {
			return ProjectValidationError{
				field:  "Id",
				reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
			}
		}

	}

	if !_Project_AccountName_Pattern.MatchString(m.GetAccountName()) {
		return ProjectValidationError{
			field:  "AccountName",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	if m.GetSettings() == nil {
		return ProjectValidationError{
			field:  "Settings",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

var _Project_Id_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")

var _Project_AccountName_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+$")
