// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package programssvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProgramsClient is the client API for Programs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgramsClient interface {
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type programsClient struct {
	cc grpc.ClientConnInterface
}

func NewProgramsClient(cc grpc.ClientConnInterface) ProgramsClient {
	return &programsClient{cc}
}

func (c *programsClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.programsvc.Programs/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/autokitteh.programsvc.Programs/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgramsServer is the server API for Programs service.
// All implementations must embed UnimplementedProgramsServer
// for forward compatibility
type ProgramsServer interface {
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedProgramsServer()
}

// UnimplementedProgramsServer must be embedded to have forward compatible implementations.
type UnimplementedProgramsServer struct {
}

func (UnimplementedProgramsServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProgramsServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProgramsServer) mustEmbedUnimplementedProgramsServer() {}

// UnsafeProgramsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgramsServer will
// result in compilation errors.
type UnsafeProgramsServer interface {
	mustEmbedUnimplementedProgramsServer()
}

func RegisterProgramsServer(s grpc.ServiceRegistrar, srv ProgramsServer) {
	s.RegisterService(&Programs_ServiceDesc, srv)
}

func _Programs_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.programsvc.Programs/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramsServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Programs_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/autokitteh.programsvc.Programs/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Programs_ServiceDesc is the grpc.ServiceDesc for Programs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Programs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autokitteh.programsvc.Programs",
	HandlerType: (*ProgramsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Programs_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Programs_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "programssvc/svc.proto",
}
