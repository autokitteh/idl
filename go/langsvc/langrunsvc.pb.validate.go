// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: langsvc/langrunsvc.proto

package langsvc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on RunRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RunRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	if !_RunRequest_Id_Pattern.MatchString(m.GetId()) {
		return RunRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^R[0-9a-f.]+$\"",
		}
	}

	if m.GetModule() == nil {
		return RunRequestValidationError{
			field:  "Module",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunRequestValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetPredecls() {
		_ = val

		if val == nil {
			return RunRequestValidationError{
				field:  fmt.Sprintf("Predecls[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_RunRequest_Predecls_Pattern.MatchString(key) {
			return RunRequestValidationError{
				field:  fmt.Sprintf("Predecls[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunRequestValidationError{
					field:  fmt.Sprintf("Predecls[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RunRequestValidationError is the validation error returned by
// RunRequest.Validate if the designated constraints aren't met.
type RunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunRequestValidationError) ErrorName() string { return "RunRequestValidationError" }

// Error satisfies the builtin error interface
func (e RunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunRequestValidationError{}

var _RunRequest_Id_Pattern = regexp.MustCompile("^R[0-9a-f.]+$")

var _RunRequest_Predecls_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on CallFunctionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CallFunctionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CallFunctionRequest_RunId_Pattern.MatchString(m.GetRunId()) {
		return CallFunctionRequestValidationError{
			field:  "RunId",
			reason: "value does not match regex pattern \"^R[0-9a-f.]+$\"",
		}
	}

	if m.GetF() == nil {
		return CallFunctionRequestValidationError{
			field:  "F",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetF()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallFunctionRequestValidationError{
				field:  "F",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArgs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallFunctionRequestValidationError{
					field:  fmt.Sprintf("Args[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetKwargs() {
		_ = val

		if val == nil {
			return CallFunctionRequestValidationError{
				field:  fmt.Sprintf("Kwargs[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_CallFunctionRequest_Kwargs_Pattern.MatchString(key) {
			return CallFunctionRequestValidationError{
				field:  fmt.Sprintf("Kwargs[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallFunctionRequestValidationError{
					field:  fmt.Sprintf("Kwargs[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CallFunctionRequestValidationError is the validation error returned by
// CallFunctionRequest.Validate if the designated constraints aren't met.
type CallFunctionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallFunctionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallFunctionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallFunctionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallFunctionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallFunctionRequestValidationError) ErrorName() string {
	return "CallFunctionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CallFunctionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallFunctionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallFunctionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallFunctionRequestValidationError{}

var _CallFunctionRequest_RunId_Pattern = regexp.MustCompile("^R[0-9a-f.]+$")

var _CallFunctionRequest_Kwargs_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on RunGetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RunGetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RunGetRequest_RunId_Pattern.MatchString(m.GetRunId()) {
		return RunGetRequestValidationError{
			field:  "RunId",
			reason: "value does not match regex pattern \"^R[0-9a-f.]+$\"",
		}
	}

	// no validation rules for GetSummary

	return nil
}

// RunGetRequestValidationError is the validation error returned by
// RunGetRequest.Validate if the designated constraints aren't met.
type RunGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunGetRequestValidationError) ErrorName() string { return "RunGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e RunGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunGetRequestValidationError{}

var _RunGetRequest_RunId_Pattern = regexp.MustCompile("^R[0-9a-f.]+$")

// Validate checks the field values on RunDiscardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RunDiscardRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RunDiscardRequest_Id_Pattern.MatchString(m.GetId()) {
		return RunDiscardRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^R[0-9a-f.]+$\"",
		}
	}

	return nil
}

// RunDiscardRequestValidationError is the validation error returned by
// RunDiscardRequest.Validate if the designated constraints aren't met.
type RunDiscardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunDiscardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunDiscardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunDiscardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunDiscardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunDiscardRequestValidationError) ErrorName() string {
	return "RunDiscardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunDiscardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunDiscardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunDiscardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunDiscardRequestValidationError{}

var _RunDiscardRequest_Id_Pattern = regexp.MustCompile("^R[0-9a-f.]+$")

// Validate checks the field values on RunDiscardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RunDiscardResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RunDiscardResponseValidationError is the validation error returned by
// RunDiscardResponse.Validate if the designated constraints aren't met.
type RunDiscardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunDiscardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunDiscardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunDiscardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunDiscardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunDiscardResponseValidationError) ErrorName() string {
	return "RunDiscardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunDiscardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunDiscardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunDiscardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunDiscardResponseValidationError{}

// Validate checks the field values on RunGetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RunGetResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunGetResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RunGetResponseValidationError is the validation error returned by
// RunGetResponse.Validate if the designated constraints aren't met.
type RunGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunGetResponseValidationError) ErrorName() string { return "RunGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e RunGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunGetResponseValidationError{}

// Validate checks the field values on RunUpdate with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RunUpdate) Validate() error {
	if m == nil {
		return nil
	}

	if !_RunUpdate_RunId_Pattern.MatchString(m.GetRunId()) {
		return RunUpdateValidationError{
			field:  "RunId",
			reason: "value does not match regex pattern \"^R[0-9a-f.]+$\"",
		}
	}

	if m.GetT() == nil {
		return RunUpdateValidationError{
			field:  "T",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPrev()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunUpdateValidationError{
				field:  "Prev",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetNext() == nil {
		return RunUpdateValidationError{
			field:  "Next",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetNext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunUpdateValidationError{
				field:  "Next",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RunUpdateValidationError is the validation error returned by
// RunUpdate.Validate if the designated constraints aren't met.
type RunUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunUpdateValidationError) ErrorName() string { return "RunUpdateValidationError" }

// Error satisfies the builtin error interface
func (e RunUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunUpdateValidationError{}

var _RunUpdate_RunId_Pattern = regexp.MustCompile("^R[0-9a-f.]+$")

// Validate checks the field values on RunCallReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RunCallReturnRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RunCallReturnRequest_RunId_Pattern.MatchString(m.GetRunId()) {
		return RunCallReturnRequestValidationError{
			field:  "RunId",
			reason: "value does not match regex pattern \"^R[0-9a-f.]+$\"",
		}
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunCallReturnRequestValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRetval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunCallReturnRequestValidationError{
				field:  "Retval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RunCallReturnRequestValidationError is the validation error returned by
// RunCallReturnRequest.Validate if the designated constraints aren't met.
type RunCallReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunCallReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunCallReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunCallReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunCallReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunCallReturnRequestValidationError) ErrorName() string {
	return "RunCallReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunCallReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunCallReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunCallReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunCallReturnRequestValidationError{}

var _RunCallReturnRequest_RunId_Pattern = regexp.MustCompile("^R[0-9a-f.]+$")

// Validate checks the field values on RunCallReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RunCallReturnResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RunCallReturnResponseValidationError is the validation error returned by
// RunCallReturnResponse.Validate if the designated constraints aren't met.
type RunCallReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunCallReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunCallReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunCallReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunCallReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunCallReturnResponseValidationError) ErrorName() string {
	return "RunCallReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunCallReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunCallReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunCallReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunCallReturnResponseValidationError{}

// Validate checks the field values on RunLoadReturnRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RunLoadReturnRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RunLoadReturnRequest_RunId_Pattern.MatchString(m.GetRunId()) {
		return RunLoadReturnRequestValidationError{
			field:  "RunId",
			reason: "value does not match regex pattern \"^R[0-9a-f.]+$\"",
		}
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunLoadReturnRequestValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRunSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunLoadReturnRequestValidationError{
				field:  "RunSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for key, val := range m.GetValues() {
		_ = val

		if val == nil {
			return RunLoadReturnRequestValidationError{
				field:  fmt.Sprintf("Values[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_RunLoadReturnRequest_Values_Pattern.MatchString(key) {
			return RunLoadReturnRequestValidationError{
				field:  fmt.Sprintf("Values[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunLoadReturnRequestValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RunLoadReturnRequestValidationError is the validation error returned by
// RunLoadReturnRequest.Validate if the designated constraints aren't met.
type RunLoadReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunLoadReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunLoadReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunLoadReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunLoadReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunLoadReturnRequestValidationError) ErrorName() string {
	return "RunLoadReturnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunLoadReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunLoadReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunLoadReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunLoadReturnRequestValidationError{}

var _RunLoadReturnRequest_RunId_Pattern = regexp.MustCompile("^R[0-9a-f.]+$")

var _RunLoadReturnRequest_Values_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on RunLoadReturnResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RunLoadReturnResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RunLoadReturnResponseValidationError is the validation error returned by
// RunLoadReturnResponse.Validate if the designated constraints aren't met.
type RunLoadReturnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunLoadReturnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunLoadReturnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunLoadReturnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunLoadReturnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunLoadReturnResponseValidationError) ErrorName() string {
	return "RunLoadReturnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunLoadReturnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunLoadReturnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunLoadReturnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunLoadReturnResponseValidationError{}

// Validate checks the field values on RunCancelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RunCancelRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_RunCancelRequest_RunId_Pattern.MatchString(m.GetRunId()) {
		return RunCancelRequestValidationError{
			field:  "RunId",
			reason: "value does not match regex pattern \"^R[0-9a-f.]+$\"",
		}
	}

	// no validation rules for Reason

	return nil
}

// RunCancelRequestValidationError is the validation error returned by
// RunCancelRequest.Validate if the designated constraints aren't met.
type RunCancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunCancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunCancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunCancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunCancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunCancelRequestValidationError) ErrorName() string { return "RunCancelRequestValidationError" }

// Error satisfies the builtin error interface
func (e RunCancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunCancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunCancelRequestValidationError{}

var _RunCancelRequest_RunId_Pattern = regexp.MustCompile("^R[0-9a-f.]+$")

// Validate checks the field values on RunCancelResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RunCancelResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RunCancelResponseValidationError is the validation error returned by
// RunCancelResponse.Validate if the designated constraints aren't met.
type RunCancelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunCancelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunCancelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunCancelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunCancelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunCancelResponseValidationError) ErrorName() string {
	return "RunCancelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunCancelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunCancelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunCancelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunCancelResponseValidationError{}

// Validate checks the field values on ListRunsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRunsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListRunsRequestValidationError is the validation error returned by
// ListRunsRequest.Validate if the designated constraints aren't met.
type ListRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunsRequestValidationError) ErrorName() string { return "ListRunsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunsRequestValidationError{}

// Validate checks the field values on ListRun with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListRun) Validate() error {
	if m == nil {
		return nil
	}

	if !_ListRun_Id_Pattern.MatchString(m.GetId()) {
		return ListRunValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^R[0-9a-f.]+$\"",
		}
	}

	return nil
}

// ListRunValidationError is the validation error returned by ListRun.Validate
// if the designated constraints aren't met.
type ListRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunValidationError) ErrorName() string { return "ListRunValidationError" }

// Error satisfies the builtin error interface
func (e ListRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunValidationError{}

var _ListRun_Id_Pattern = regexp.MustCompile("^R[0-9a-f.]+$")

// Validate checks the field values on ListRuns with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListRuns) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRuns() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRunsValidationError{
					field:  fmt.Sprintf("Runs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRunsValidationError is the validation error returned by
// ListRuns.Validate if the designated constraints aren't met.
type ListRunsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunsValidationError) ErrorName() string { return "ListRunsValidationError" }

// Error satisfies the builtin error interface
func (e ListRunsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRuns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunsValidationError{}

// Validate checks the field values on ListRunsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRunsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetStates() {
		_ = val

		if val == nil {
			return ListRunsResponseValidationError{
				field:  fmt.Sprintf("States[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if utf8.RuneCountInString(key) < 1 {
			return ListRunsResponseValidationError{
				field:  fmt.Sprintf("States[%v]", key),
				reason: "value length must be at least 1 runes",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRunsResponseValidationError{
					field:  fmt.Sprintf("States[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRunsResponseValidationError is the validation error returned by
// ListRunsResponse.Validate if the designated constraints aren't met.
type ListRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunsResponseValidationError) ErrorName() string { return "ListRunsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunsResponseValidationError{}
