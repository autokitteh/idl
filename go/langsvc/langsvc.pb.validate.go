// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: langsvc/langsvc.proto

package langsvc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Cycle with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cycle) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPaths() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CycleValidationError{
					field:  fmt.Sprintf("Paths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CycleValidationError is the validation error returned by Cycle.Validate if
// the designated constraints aren't met.
type CycleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CycleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CycleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CycleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CycleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CycleValidationError) ErrorName() string { return "CycleValidationError" }

// Error satisfies the builtin error interface
func (e CycleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCycle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CycleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CycleValidationError{}

// Validate checks the field values on Dependencies with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Dependencies) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetReady() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DependenciesValidationError{
					field:  fmt.Sprintf("Ready[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMissing() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DependenciesValidationError{
					field:  fmt.Sprintf("Missing[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCycles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DependenciesValidationError{
					field:  fmt.Sprintf("Cycles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DependenciesValidationError is the validation error returned by
// Dependencies.Validate if the designated constraints aren't met.
type DependenciesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependenciesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependenciesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependenciesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependenciesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependenciesValidationError) ErrorName() string { return "DependenciesValidationError" }

// Error satisfies the builtin error interface
func (e DependenciesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependencies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependenciesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependenciesValidationError{}

// Validate checks the field values on GetModuleDependenciesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetModuleDependenciesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetModule() == nil {
		return GetModuleDependenciesRequestValidationError{
			field:  "Module",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModuleDependenciesRequestValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetModuleDependenciesRequestValidationError is the validation error returned
// by GetModuleDependenciesRequest.Validate if the designated constraints
// aren't met.
type GetModuleDependenciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleDependenciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleDependenciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleDependenciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleDependenciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleDependenciesRequestValidationError) ErrorName() string {
	return "GetModuleDependenciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetModuleDependenciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleDependenciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleDependenciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleDependenciesRequestValidationError{}

// Validate checks the field values on GetModuleDependenciesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetModuleDependenciesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDeps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModuleDependenciesResponseValidationError{
				field:  "Deps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetModuleDependenciesResponseValidationError is the validation error
// returned by GetModuleDependenciesResponse.Validate if the designated
// constraints aren't met.
type GetModuleDependenciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleDependenciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleDependenciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleDependenciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleDependenciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleDependenciesResponseValidationError) ErrorName() string {
	return "GetModuleDependenciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModuleDependenciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleDependenciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleDependenciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleDependenciesResponseValidationError{}

// Validate checks the field values on IsCompilerVersionSupportedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IsCompilerVersionSupportedRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_IsCompilerVersionSupportedRequest_Lang_Pattern.MatchString(m.GetLang()) {
		return IsCompilerVersionSupportedRequestValidationError{
			field:  "Lang",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_-]+$\"",
		}
	}

	// no validation rules for Ver

	return nil
}

// IsCompilerVersionSupportedRequestValidationError is the validation error
// returned by IsCompilerVersionSupportedRequest.Validate if the designated
// constraints aren't met.
type IsCompilerVersionSupportedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCompilerVersionSupportedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCompilerVersionSupportedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCompilerVersionSupportedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCompilerVersionSupportedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCompilerVersionSupportedRequestValidationError) ErrorName() string {
	return "IsCompilerVersionSupportedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsCompilerVersionSupportedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCompilerVersionSupportedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCompilerVersionSupportedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCompilerVersionSupportedRequestValidationError{}

var _IsCompilerVersionSupportedRequest_Lang_Pattern = regexp.MustCompile("^[0-9a-zA-Z_-]+$")

// Validate checks the field values on IsCompilerVersionSupportedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *IsCompilerVersionSupportedResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Supported

	return nil
}

// IsCompilerVersionSupportedResponseValidationError is the validation error
// returned by IsCompilerVersionSupportedResponse.Validate if the designated
// constraints aren't met.
type IsCompilerVersionSupportedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCompilerVersionSupportedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCompilerVersionSupportedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCompilerVersionSupportedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCompilerVersionSupportedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCompilerVersionSupportedResponseValidationError) ErrorName() string {
	return "IsCompilerVersionSupportedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsCompilerVersionSupportedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCompilerVersionSupportedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCompilerVersionSupportedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCompilerVersionSupportedResponseValidationError{}

// Validate checks the field values on CompileModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompileModuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !_CompileModuleRequest_Lang_Pattern.MatchString(m.GetLang()) {
		return CompileModuleRequestValidationError{
			field:  "Lang",
			reason: "value does not match regex pattern \"^[0-9a-zA-Z_-]+$\"",
		}
	}

	for idx, item := range m.GetPredecls() {
		_, _ = idx, item

		if !_CompileModuleRequest_Predecls_Pattern.MatchString(item) {
			return CompileModuleRequestValidationError{
				field:  fmt.Sprintf("Predecls[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

	}

	if m.GetPath() == nil {
		return CompileModuleRequestValidationError{
			field:  "Path",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPath()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompileModuleRequestValidationError{
				field:  "Path",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Src

	// no validation rules for GetDeps

	return nil
}

// CompileModuleRequestValidationError is the validation error returned by
// CompileModuleRequest.Validate if the designated constraints aren't met.
type CompileModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompileModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompileModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompileModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompileModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompileModuleRequestValidationError) ErrorName() string {
	return "CompileModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompileModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompileModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompileModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompileModuleRequestValidationError{}

var _CompileModuleRequest_Lang_Pattern = regexp.MustCompile("^[0-9a-zA-Z_-]+$")

var _CompileModuleRequest_Predecls_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")

// Validate checks the field values on CompileModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompileModuleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetModule() == nil {
		return CompileModuleResponseValidationError{
			field:  "Module",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompileModuleResponseValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompileModuleResponseValidationError{
				field:  "Deps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CompileModuleResponseValidationError is the validation error returned by
// CompileModuleResponse.Validate if the designated constraints aren't met.
type CompileModuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompileModuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompileModuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompileModuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompileModuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompileModuleResponseValidationError) ErrorName() string {
	return "CompileModuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompileModuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompileModuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompileModuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompileModuleResponseValidationError{}

// Validate checks the field values on ListLangsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListLangsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListLangsRequestValidationError is the validation error returned by
// ListLangsRequest.Validate if the designated constraints aren't met.
type ListLangsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLangsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLangsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLangsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLangsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLangsRequestValidationError) ErrorName() string { return "ListLangsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListLangsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLangsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLangsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLangsRequestValidationError{}

// Validate checks the field values on CatalogLang with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CatalogLang) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CatalogLangValidationError is the validation error returned by
// CatalogLang.Validate if the designated constraints aren't met.
type CatalogLangValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatalogLangValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatalogLangValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatalogLangValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatalogLangValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatalogLangValidationError) ErrorName() string { return "CatalogLangValidationError" }

// Error satisfies the builtin error interface
func (e CatalogLangValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatalogLang.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatalogLangValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatalogLangValidationError{}

// Validate checks the field values on ListLangsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListLangsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetLangs() {
		_ = val

		if val == nil {
			return ListLangsResponseValidationError{
				field:  fmt.Sprintf("Langs[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if utf8.RuneCountInString(key) < 1 {
			return ListLangsResponseValidationError{
				field:  fmt.Sprintf("Langs[%v]", key),
				reason: "value length must be at least 1 runes",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLangsResponseValidationError{
					field:  fmt.Sprintf("Langs[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListLangsResponseValidationError is the validation error returned by
// ListLangsResponse.Validate if the designated constraints aren't met.
type ListLangsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLangsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLangsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLangsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLangsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLangsResponseValidationError) ErrorName() string {
	return "ListLangsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLangsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLangsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLangsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLangsResponseValidationError{}
