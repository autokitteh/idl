// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event/project_state.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ProjectEventStateRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProjectEventStateRecord) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetT() == nil {
		return ProjectEventStateRecordValidationError{
			field:  "T",
			reason: "value is required",
		}
	}

	if m.GetState() == nil {
		return ProjectEventStateRecordValidationError{
			field:  "State",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectEventStateRecordValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProjectEventStateRecordValidationError is the validation error returned by
// ProjectEventStateRecord.Validate if the designated constraints aren't met.
type ProjectEventStateRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectEventStateRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectEventStateRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectEventStateRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectEventStateRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectEventStateRecordValidationError) ErrorName() string {
	return "ProjectEventStateRecordValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectEventStateRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectEventStateRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectEventStateRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectEventStateRecordValidationError{}

// Validate checks the field values on ProjectEventState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProjectEventState) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *ProjectEventState_Error:

		if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectEventStateValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProjectEventState_Ignored:

		if v, ok := interface{}(m.GetIgnored()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectEventStateValidationError{
					field:  "Ignored",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProjectEventState_Pending:

		if v, ok := interface{}(m.GetPending()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectEventStateValidationError{
					field:  "Pending",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProjectEventState_Loading:

		if v, ok := interface{}(m.GetLoading()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectEventStateValidationError{
					field:  "Loading",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProjectEventState_Loaded:

		if v, ok := interface{}(m.GetLoaded()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectEventStateValidationError{
					field:  "Loaded",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProjectEventState_Running:

		if v, ok := interface{}(m.GetRunning()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectEventStateValidationError{
					field:  "Running",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProjectEventState_Waiting:

		if v, ok := interface{}(m.GetWaiting()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectEventStateValidationError{
					field:  "Waiting",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProjectEventState_Completed:

		if v, ok := interface{}(m.GetCompleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectEventStateValidationError{
					field:  "Completed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ProjectEventStateValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// ProjectEventStateValidationError is the validation error returned by
// ProjectEventState.Validate if the designated constraints aren't met.
type ProjectEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectEventStateValidationError) ErrorName() string {
	return "ProjectEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectEventStateValidationError{}

// Validate checks the field values on ErrorProjectEventState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ErrorProjectEventState) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRunSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorProjectEventStateValidationError{
				field:  "RunSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	return nil
}

// ErrorProjectEventStateValidationError is the validation error returned by
// ErrorProjectEventState.Validate if the designated constraints aren't met.
type ErrorProjectEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorProjectEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorProjectEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorProjectEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorProjectEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorProjectEventStateValidationError) ErrorName() string {
	return "ErrorProjectEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e ErrorProjectEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorProjectEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorProjectEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorProjectEventStateValidationError{}

// Validate checks the field values on IgnoredProjectEventState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IgnoredProjectEventState) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Reason

	return nil
}

// IgnoredProjectEventStateValidationError is the validation error returned by
// IgnoredProjectEventState.Validate if the designated constraints aren't met.
type IgnoredProjectEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IgnoredProjectEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IgnoredProjectEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IgnoredProjectEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IgnoredProjectEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IgnoredProjectEventStateValidationError) ErrorName() string {
	return "IgnoredProjectEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e IgnoredProjectEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIgnoredProjectEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IgnoredProjectEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IgnoredProjectEventStateValidationError{}

// Validate checks the field values on PendingProjectEventState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PendingProjectEventState) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PendingProjectEventStateValidationError is the validation error returned by
// PendingProjectEventState.Validate if the designated constraints aren't met.
type PendingProjectEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PendingProjectEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PendingProjectEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PendingProjectEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PendingProjectEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PendingProjectEventStateValidationError) ErrorName() string {
	return "PendingProjectEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e PendingProjectEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPendingProjectEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PendingProjectEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PendingProjectEventStateValidationError{}

// Validate checks the field values on LoadingProjectEventState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoadingProjectEventState) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMainPath() == nil {
		return LoadingProjectEventStateValidationError{
			field:  "MainPath",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetMainPath()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadingProjectEventStateValidationError{
				field:  "MainPath",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LoadingProjectEventStateValidationError is the validation error returned by
// LoadingProjectEventState.Validate if the designated constraints aren't met.
type LoadingProjectEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadingProjectEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadingProjectEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadingProjectEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadingProjectEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadingProjectEventStateValidationError) ErrorName() string {
	return "LoadingProjectEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadingProjectEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadingProjectEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadingProjectEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadingProjectEventStateValidationError{}

// Validate checks the field values on LoadedProjectEventState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoadedProjectEventState) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPaths() {
		_, _ = idx, item

		if item == nil {
			return LoadedProjectEventStateValidationError{
				field:  fmt.Sprintf("Paths[%v]", idx),
				reason: "value is required",
			}
		}

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadedProjectEventStateValidationError{
					field:  fmt.Sprintf("Paths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LoadedProjectEventStateValidationError is the validation error returned by
// LoadedProjectEventState.Validate if the designated constraints aren't met.
type LoadedProjectEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadedProjectEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadedProjectEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadedProjectEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadedProjectEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadedProjectEventStateValidationError) ErrorName() string {
	return "LoadedProjectEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e LoadedProjectEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadedProjectEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadedProjectEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadedProjectEventStateValidationError{}

// Validate checks the field values on RunningProjectEventState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RunningProjectEventState) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RunningProjectEventStateValidationError is the validation error returned by
// RunningProjectEventState.Validate if the designated constraints aren't met.
type RunningProjectEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunningProjectEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunningProjectEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunningProjectEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunningProjectEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunningProjectEventStateValidationError) ErrorName() string {
	return "RunningProjectEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e RunningProjectEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunningProjectEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunningProjectEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunningProjectEventStateValidationError{}

// Validate checks the field values on CompletedProjectEventState with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompletedProjectEventState) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRunSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompletedProjectEventStateValidationError{
				field:  "RunSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CompletedProjectEventStateValidationError is the validation error returned
// by CompletedProjectEventState.Validate if the designated constraints aren't met.
type CompletedProjectEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletedProjectEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletedProjectEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletedProjectEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletedProjectEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletedProjectEventStateValidationError) ErrorName() string {
	return "CompletedProjectEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e CompletedProjectEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletedProjectEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletedProjectEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletedProjectEventStateValidationError{}

// Validate checks the field values on WaitingProjectEventState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WaitingProjectEventState) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRunSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WaitingProjectEventStateValidationError{
				field:  "RunSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WaitingProjectEventStateValidationError is the validation error returned by
// WaitingProjectEventState.Validate if the designated constraints aren't met.
type WaitingProjectEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitingProjectEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitingProjectEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitingProjectEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitingProjectEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitingProjectEventStateValidationError) ErrorName() string {
	return "WaitingProjectEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e WaitingProjectEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitingProjectEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitingProjectEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitingProjectEventStateValidationError{}
