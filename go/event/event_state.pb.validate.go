// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event/event_state.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on EventStateRecord with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EventStateRecord) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetT() == nil {
		return EventStateRecordValidationError{
			field:  "T",
			reason: "value is required",
		}
	}

	if m.GetState() == nil {
		return EventStateRecordValidationError{
			field:  "State",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventStateRecordValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventStateRecordValidationError is the validation error returned by
// EventStateRecord.Validate if the designated constraints aren't met.
type EventStateRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventStateRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventStateRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventStateRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventStateRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventStateRecordValidationError) ErrorName() string { return "EventStateRecordValidationError" }

// Error satisfies the builtin error interface
func (e EventStateRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventStateRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventStateRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventStateRecordValidationError{}

// Validate checks the field values on EventState with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EventState) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *EventState_Ignored:

		if v, ok := interface{}(m.GetIgnored()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventStateValidationError{
					field:  "Ignored",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EventState_Error:

		if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventStateValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EventState_Pending:

		if v, ok := interface{}(m.GetPending()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventStateValidationError{
					field:  "Pending",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EventState_Processing:

		if v, ok := interface{}(m.GetProcessing()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventStateValidationError{
					field:  "Processing",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EventState_Processed:

		if v, ok := interface{}(m.GetProcessed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventStateValidationError{
					field:  "Processed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return EventStateValidationError{
			field:  "Type",
			reason: "value is required",
		}

	}

	return nil
}

// EventStateValidationError is the validation error returned by
// EventState.Validate if the designated constraints aren't met.
type EventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventStateValidationError) ErrorName() string { return "EventStateValidationError" }

// Error satisfies the builtin error interface
func (e EventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventStateValidationError{}

// Validate checks the field values on IgnoredEventState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IgnoredEventState) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Reason

	return nil
}

// IgnoredEventStateValidationError is the validation error returned by
// IgnoredEventState.Validate if the designated constraints aren't met.
type IgnoredEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IgnoredEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IgnoredEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IgnoredEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IgnoredEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IgnoredEventStateValidationError) ErrorName() string {
	return "IgnoredEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e IgnoredEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIgnoredEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IgnoredEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IgnoredEventStateValidationError{}

// Validate checks the field values on ErrorEventState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ErrorEventState) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Error

	return nil
}

// ErrorEventStateValidationError is the validation error returned by
// ErrorEventState.Validate if the designated constraints aren't met.
type ErrorEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorEventStateValidationError) ErrorName() string { return "ErrorEventStateValidationError" }

// Error satisfies the builtin error interface
func (e ErrorEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorEventStateValidationError{}

// Validate checks the field values on PendingEventState with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PendingEventState) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PendingEventStateValidationError is the validation error returned by
// PendingEventState.Validate if the designated constraints aren't met.
type PendingEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PendingEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PendingEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PendingEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PendingEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PendingEventStateValidationError) ErrorName() string {
	return "PendingEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e PendingEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPendingEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PendingEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PendingEventStateValidationError{}

// Validate checks the field values on ProcessingEventState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProcessingEventState) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProjectIds() {
		_, _ = idx, item

		if !_ProcessingEventState_ProjectIds_Pattern.MatchString(item) {
			return ProcessingEventStateValidationError{
				field:  fmt.Sprintf("ProjectIds[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
			}
		}

	}

	for idx, item := range m.GetIgnoredProjectIds() {
		_, _ = idx, item

		if !_ProcessingEventState_IgnoredProjectIds_Pattern.MatchString(item) {
			return ProcessingEventStateValidationError{
				field:  fmt.Sprintf("IgnoredProjectIds[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
			}
		}

	}

	return nil
}

// ProcessingEventStateValidationError is the validation error returned by
// ProcessingEventState.Validate if the designated constraints aren't met.
type ProcessingEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessingEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessingEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessingEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessingEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessingEventStateValidationError) ErrorName() string {
	return "ProcessingEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessingEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessingEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessingEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessingEventStateValidationError{}

var _ProcessingEventState_ProjectIds_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")

var _ProcessingEventState_IgnoredProjectIds_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")

// Validate checks the field values on ProcessedEventState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProcessedEventState) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProjectIds() {
		_, _ = idx, item

		if !_ProcessedEventState_ProjectIds_Pattern.MatchString(item) {
			return ProcessedEventStateValidationError{
				field:  fmt.Sprintf("ProjectIds[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
			}
		}

	}

	for idx, item := range m.GetAttnProjectIds() {
		_, _ = idx, item

		if !_ProcessedEventState_AttnProjectIds_Pattern.MatchString(item) {
			return ProcessedEventStateValidationError{
				field:  fmt.Sprintf("AttnProjectIds[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z0-9_-]+$\"",
			}
		}

	}

	return nil
}

// ProcessedEventStateValidationError is the validation error returned by
// ProcessedEventState.Validate if the designated constraints aren't met.
type ProcessedEventStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessedEventStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessedEventStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessedEventStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessedEventStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessedEventStateValidationError) ErrorName() string {
	return "ProcessedEventStateValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessedEventStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessedEventState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessedEventStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessedEventStateValidationError{}

var _ProcessedEventState_ProjectIds_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")

var _ProcessedEventState_AttnProjectIds_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z0-9_-]+$")
