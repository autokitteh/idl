// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event/event.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetT() == nil {
		return EventValidationError{
			field:  "T",
			reason: "value is required",
		}
	}

	if !_Event_Id_Pattern.MatchString(m.GetId()) {
		return EventValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^E[0-9a-f]+$\"",
		}
	}

	if !_Event_SrcId_Pattern.MatchString(m.GetSrcId()) {
		return EventValidationError{
			field:  "SrcId",
			reason: "value does not match regex pattern \"^[a-zA-Z][0-9a-zA-Z_-]+\\\\.[a-zA-Z][0-9a-zA-Z_-]+$\"",
		}
	}

	// no validation rules for AssociationToken

	// no validation rules for OriginalId

	if utf8.RuneCountInString(m.GetType()) < 1 {
		return EventValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
	}

	for key, val := range m.GetData() {
		_ = val

		if val == nil {
			return EventValidationError{
				field:  fmt.Sprintf("Data[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		if !_Event_Data_Pattern.MatchString(key) {
			return EventValidationError{
				field:  fmt.Sprintf("Data[%v]", key),
				reason: "value does not match regex pattern \"^[a-zA-Z_][a-zA-Z0-9_]*$\"",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  fmt.Sprintf("Data[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetMemo() {
		_ = val

		if utf8.RuneCountInString(key) < 1 {
			return EventValidationError{
				field:  fmt.Sprintf("Memo[%v]", key),
				reason: "value length must be at least 1 runes",
			}
		}

		// no validation rules for Memo[key]
	}

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

var _Event_Id_Pattern = regexp.MustCompile("^E[0-9a-f]+$")

var _Event_SrcId_Pattern = regexp.MustCompile("^[a-zA-Z][0-9a-zA-Z_-]+\\.[a-zA-Z][0-9a-zA-Z_-]+$")

var _Event_Data_Pattern = regexp.MustCompile("^[a-zA-Z_][a-zA-Z0-9_]*$")
